// $ANTLR 3.2 Sep 23, 2009 12:02:23 org/brackit/xquery/compiler/parser/XQuery.g 2011-05-05 13:18:27

/*=============================================================================

    Copyright 2009 Nikolay Ognyanov
    Copyright 2010-2011 Caetano Sauer, Sebastian Baechle 

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

=============================================================================*/
package org.brackit.xquery.compiler.parser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class XQueryParser extends ParserBase {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "LAngle", "RAngle", "LCurly", "RCurly", "LClose", "RClose", "SymEq", "Colon", "Quot", "Apos", "EscapeQuot", "EscapeApos", "EscapeLCurly", "EscapeRClurly", "ElementContentChar", "PredefinedEntityRef", "QuotAttrContentChar", "AposAttrContentChar", "XQuery", "MainModule", "LibraryModule", "QueryBody", "Prolog", "NamespaceDeclaration", "OptionDeclaration", "VersionDeclaration", "BaseURIDeclaration", "BoundarySpaceDeclaration", "OrderingModeDeclaration", "EmptyOrderDeclaration", "CopyNamespacesDeclaration", "CollationDeclaration", "ConstructionDeclaration", "ModuleImport", "Pragma", "FlowrExpr", "ForClause", "ForLetBindingExpr", "ForLetExpr", "LetClause", "CountClause", "GroupByClause", "GroupBySpec", "AllowingEmpty", "OrderByClause", "OrderBySpec", "OrderByExprBinding", "OrderByKind", "OrderByEmptyMode", "Collation", "OrderModifier", "WhereClause", "ReturnClause", "TypedVariableBinding", "PosVariableBinding", "PathExpr", "StepExpr", "AxisSpec", "NameTest", "Wildcard", "WildcardBeforeColon", "WildcardAfterColon", "KindTestDocument", "KindTestElement", "KindTestAttribute", "KindTestSchemaElement", "KindTestSchemaAttribute", "KindTestPi", "KindTestComment", "KindTestText", "KindTestAnyKind", "TryCatchExpr", "TryClause", "CatchClause", "CatchErrorList", "CatchVar", "SwitchExpr", "SwitchCase", "GeneralCompEQ", "GeneralCompNE", "GeneralCompLT", "GeneralCompLE", "GeneralCompGT", "GeneralCompGE", "ValueCompEQ", "ValueCompNE", "ValueCompLE", "ValueCompLT", "ValueCompGE", "ValueCompGT", "NodeCompIs", "NodeCompPrecedes", "NodeCompFollows", "AddOp", "SubtractOp", "MultiplyOp", "DivideOp", "IDivideOp", "ModulusOp", "UnionExpr", "IntersectExpr", "ExceptExpr", "OrExpr", "AndExpr", "RangeExpr", "InstanceofExpr", "TreatExpr", "CastableExpr", "CastExpr", "NegateExpr", "Predicate", "FilterExpr", "SequenceExpr", "EmptySequence", "ParenthesizedExpr", "ContextItemExpr", "OrderedExpr", "UnorderedExpr", "ComparisonExpr", "ArithmeticExpr", "IfExpr", "ValidateExpr", "ValidateStrict", "ValidateLax", "CompElementConstructor", "CompDocumentConstructor", "CompAttributeConstructor", "CompTextConstructor", "CompCommentConstructor", "CompPIConstructor", "ContentSequence", "FunctionCall", "FunctionDeclaration", "Parameter", "Variable", "ExternalVariable", "TypedVariableDeclaration", "VariableRef", "SchemaImport", "Namespace", "DefaultElementNamespace", "DefaultFunctionNamespace", "SequenceType", "EmptySequenceType", "ItemType", "AtomicType", "CardinalityOne", "CardinalityOneOrMany", "CardinalityZeroOrOne", "CardinalityZeroOrMany", "TypeSwitch", "TypeSwitchCase", "TypeSwitchDefault", "QuantifiedExpr", "SomeQuantifier", "EveryQuantifier", "Insert", "InsertFirst", "InsertLast", "InsertInto", "InsertBefore", "InsertAfter", "Delete", "Replace", "ReplaceNode", "ReplaceValue", "Rename", "Transform", "CopyBinding", "Modify", "TransformReturn", "Literal", "Int", "Dec", "Dbl", "Str", "Qname", "JoinExpr", "LeftJoinExpr", "JoinClause", "ReturnExpr", "Selection", "GroupBy", "OrderBy", "Join", "Start", "ForBind", "LetBind", "Count", "XQUERY", "ENCODING", "VERSION", "MODULE", "NAMESPACE", "DECLARE", "BOUNDARY_SPACE", "PRESERVE", "STRIP", "DEFAULT", "ELEMENT", "FUNCTION", "OPTION", "FT_OPTION", "USING", "ORDERING", "ORDERED", "UNORDERED", "ORDER", "EMPTY", "GREATEST", "LEAST", "COPY_NAMESPACES", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAN", "PERCENT", "PER_MILLE", "ZERO_DIGIT", "DIGIT", "PATTERN_SEPARATOR", "NO_PRESERVE", "INHERIT", "NO_INHERIT", "COLLATION", "BASE_URI", "IMPORT", "SCHEMA", "AT", "EXTERNAL", "VARIABLE", "CONSTANT", "CONSTRUCTION", "SEQUENTIAL", "UPDATING", "SIMPLE", "DETERMINISTIC", "NONDETERMINISTIC", "FOR", "IN", "ALLOWING", "SCORE", "LET", "TUMBLING", "WINDOW", "SLIDING", "START", "WHEN", "ONLY", "END", "PREVIOUS", "NEXT", "COUNT", "WHERE", "GROUP", "BY", "STABLE", "ASCENDING", "DESCENDING", "RETURN", "SOME", "SATISFIES", "EVERY", "TYPESWITCH", "CASE", "AS", "IF", "THEN", "ELSE", "OR", "AND", "CONTAINS", "TEXT", "TO", "DIV", "IDIV", "MOD", "UNION", "INTERSECT", "EXCEPT", "INSTANCE", "OF", "TREAT", "CASTABLE", "CAST", "EQ", "NE", "LT", "LE", "GT", "GE", "IS", "VALIDATE", "LAX", "STRICT", "CHILD", "DESCENDANT", "ATTRIBUTE", "SELF", "DESCENDANT_OR_SELF", "FOLLOWING_SIBLING", "FOLLOWING", "PARENT", "ANCESTOR", "PRECEDING_SIBLING", "PRECEDING", "ANCESTOR_OR_SELF", "IntegerLiteral", "DecimalLiteral", "DoubleLiteral", "QuotedStringLiteral", "AposedStringLiteral", "S", "DirCommentConstructor", "DirPIConstructor", "CDataSection", "CharRef", "EscapeRCurly", "DOCUMENT", "COMMENT", "PROCESSING_INSTRUCTION", "EMPTY_SEQUENCE", "ITEM", "ANYKIND", "DOCUMENT_NODE", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "REVALIDATION", "SKIP", "FIRST", "LAST", "INTO", "AFTER", "BEFORE", "INSERT", "NODE", "NODES", "DELETE", "REPLACE", "WITH", "VALUE", "RENAME", "COPY", "MODIFY", "SET", "BLOCK", "EXIT", "RETURNING", "WHILE", "FTOR", "FTAND", "NOT", "FTNOT", "WEIGHT", "ANY", "WORD", "ALL", "WORDS", "PHRASE", "OCCURS", "TIMES", "EXACTLY", "MOST", "FROM", "DISTANCE", "SENTENCES", "PARAGRAPHS", "SAME", "DIFFERENT", "SENTENCE", "PARAGRAPH", "ENTIRE", "CONTENT", "INSENSITIVE", "SENSITIVE", "LOWERCASE", "UPPERCASE", "DIACRITICS", "STEMMING", "NO", "THESAURUS", "RELATIONSHIP", "LEVELS", "STOP", "LANGUAGE", "WILDCARDS", "WITHOUT", "CONTEXT", "TRY", "CATCH", "NAMESPACE_NODE", "NCName", "VS", "Digits", "HexDigits", "Comment", "NCNameStartChar", "NCNameChar", "Char", "Letter", "';'", "'%'", "'('", "','", "')'", "'$'", "':='", "'+'", "'-'", "'*'", "'|'", "'!='", "'<='", "'>='", "'<<'", "'>>'", "'/'", "'//'", "'::'", "'@'", "'..'", "'['", "']'", "'.'", "'?'"
    };
    public static final int FUNCTION=204;
    public static final int OrderBySpec=49;
    public static final int Insert=160;
    public static final int PATTERN_SEPARATOR=226;
    public static final int TypeSwitchCase=155;
    public static final int LetBind=191;
    public static final int DivideOp=100;
    public static final int ReplaceValue=169;
    public static final int EXCEPT=285;
    public static final int Int=176;
    public static final int DISTANCE=370;
    public static final int EveryQuantifier=159;
    public static final int SchemaImport=142;
    public static final int KindTestPi=71;
    public static final int PRECEDING=311;
    public static final int WORDS=363;
    public static final int ValidateLax=127;
    public static final int RETURN=265;
    public static final int ELEMENT=203;
    public static final int Rename=170;
    public static final int EmptySequence=117;
    public static final int TypeSwitch=154;
    public static final int EQ=291;
    public static final int ValueCompLE=90;
    public static final int GE=296;
    public static final int STRICT=300;
    public static final int PRESERVE=200;
    public static final int MultiplyOp=99;
    public static final int TYPESWITCH=269;
    public static final int STOP=389;
    public static final int CONTENT=378;
    public static final int ItemType=148;
    public static final int S=318;
    public static final int SubtractOp=98;
    public static final int VALUE=346;
    public static final int TryCatchExpr=75;
    public static final int EMPTY=212;
    public static final int GROUP=260;
    public static final int INTERSECT=284;
    public static final int FTAND=356;
    public static final int ANYKIND=329;
    public static final int TypedVariableDeclaration=140;
    public static final int SCHEMA_ELEMENT=332;
    public static final int NO_PRESERVE=227;
    public static final int CONSTANT=237;
    public static final int GT=295;
    public static final int UnorderedExpr=121;
    public static final int LClose=8;
    public static final int IDivideOp=101;
    public static final int CollationDeclaration=35;
    public static final int NAN=221;
    public static final int MODIFY=349;
    public static final int Wildcard=63;
    public static final int THESAURUS=386;
    public static final int VERSION=195;
    public static final int BoundarySpaceDeclaration=31;
    public static final int ASCENDING=263;
    public static final int InstanceofExpr=109;
    public static final int UPDATING=240;
    public static final int ForLetExpr=42;
    public static final int AT=234;
    public static final int AS=271;
    public static final int CONSTRUCTION=238;
    public static final int DOCUMENT=324;
    public static final int PREVIOUS=256;
    public static final int NODES=342;
    public static final int SequenceType=146;
    public static final int DefaultElementNamespace=144;
    public static final int Predicate=114;
    public static final int CASTABLE=289;
    public static final int BY=261;
    public static final int ValueCompLT=91;
    public static final int SwitchCase=81;
    public static final int INHERIT=228;
    public static final int ANCESTOR_OR_SELF=312;
    public static final int UnionExpr=103;
    public static final int EscapeApos=15;
    public static final int FTNOT=358;
    public static final int MODULE=196;
    public static final int ORDERED=209;
    public static final int NAMESPACE_NODE=396;
    public static final int SAME=373;
    public static final int Parameter=137;
    public static final int VariableRef=141;
    public static final int SCHEMA_ATTRIBUTE=331;
    public static final int CompDocumentConstructor=129;
    public static final int WildcardAfterColon=65;
    public static final int GroupByClause=45;
    public static final int Str=179;
    public static final int INSTANCE=286;
    public static final int ValidateExpr=125;
    public static final int Join=188;
    public static final int INFINITY=219;
    public static final int WILDCARDS=391;
    public static final int BLOCK=351;
    public static final int MainModule=23;
    public static final int DESCENDING=264;
    public static final int SEQUENTIAL=239;
    public static final int ValueCompNE=89;
    public static final int WhereClause=55;
    public static final int SELF=304;
    public static final int TryClause=76;
    public static final int LT=293;
    public static final int Collation=53;
    public static final int DIFFERENT=374;
    public static final int COUNT=258;
    public static final int OrderByExprBinding=50;
    public static final int OrderByEmptyMode=52;
    public static final int ReplaceNode=168;
    public static final int FunctionDeclaration=136;
    public static final int Char=404;
    public static final int Digits=399;
    public static final int RETURNING=353;
    public static final int QuotAttrContentChar=20;
    public static final int LCurly=6;
    public static final int ForClause=40;
    public static final int Dbl=178;
    public static final int NegateExpr=113;
    public static final int RangeExpr=108;
    public static final int StepExpr=60;
    public static final int COMMENT=325;
    public static final int INTO=337;
    public static final int Quot=12;
    public static final int REVALIDATION=333;
    public static final int NE=292;
    public static final int EXIT=352;
    public static final int NO_INHERIT=229;
    public static final int ModuleImport=37;
    public static final int AposAttrContentChar=21;
    public static final int AposedStringLiteral=317;
    public static final int WITHOUT=392;
    public static final int DefaultFunctionNamespace=145;
    public static final int NO=385;
    public static final int EVERY=268;
    public static final int SENSITIVE=380;
    public static final int Colon=11;
    public static final int WEIGHT=359;
    public static final int DELETE=343;
    public static final int ParenthesizedExpr=118;
    public static final int OF=287;
    public static final int Dec=177;
    public static final int EmptySequenceType=147;
    public static final int DESCENDANT_OR_SELF=305;
    public static final int CastableExpr=111;
    public static final int OR=275;
    public static final int ConstructionDeclaration=36;
    public static final int EscapeQuot=14;
    public static final int AllowingEmpty=47;
    public static final int Letter=405;
    public static final int NCName=397;
    public static final int WHERE=259;
    public static final int LAX=299;
    public static final int OrderModifier=54;
    public static final int ValueCompGE=92;
    public static final int KindTestSchemaElement=69;
    public static final int NamespaceDeclaration=27;
    public static final int GroupBy=186;
    public static final int SymEq=10;
    public static final int NodeCompIs=94;
    public static final int DECIMAL_SEPARATOR=217;
    public static final int Delete=166;
    public static final int CONTEXT=393;
    public static final int IF=272;
    public static final int ForBind=190;
    public static final int RAngle=5;
    public static final int IN=245;
    public static final int ExceptExpr=105;
    public static final int IS=297;
    public static final int SOME=266;
    public static final int NEXT=257;
    public static final int WildcardBeforeColon=64;
    public static final int DIGIT=225;
    public static final int ValueCompGT=93;
    public static final int Prolog=26;
    public static final int SLIDING=251;
    public static final int WITH=345;
    public static final int HexDigits=400;
    public static final int XQUERY=193;
    public static final int EXACTLY=367;
    public static final int QueryBody=25;
    public static final int DEFAULT=202;
    public static final int DESCENDANT=302;
    public static final int FilterExpr=115;
    public static final int PHRASE=364;
    public static final int Modify=173;
    public static final int InsertLast=162;
    public static final int ElementContentChar=18;
    public static final int VersionDeclaration=29;
    public static final int EscapeLCurly=16;
    public static final int CopyBinding=172;
    public static final int Replace=167;
    public static final int ValueCompEQ=88;
    public static final int LEAST=214;
    public static final int WINDOW=250;
    public static final int OrderedExpr=120;
    public static final int PARAGRAPHS=372;
    public static final int LET=248;
    public static final int LE=294;
    public static final int Selection=185;
    public static final int CardinalityZeroOrMany=153;
    public static final int CompCommentConstructor=132;
    public static final int ValidateStrict=126;
    public static final int GeneralCompLT=84;
    public static final int VS=398;
    public static final int Apos=13;
    public static final int PER_MILLE=223;
    public static final int MOD=282;
    public static final int GeneralCompLE=85;
    public static final int CONTAINS=277;
    public static final int ContentSequence=134;
    public static final int NOT=357;
    public static final int ExternalVariable=139;
    public static final int EOF=-1;
    public static final int IMPORT=232;
    public static final int OrderBy=187;
    public static final int RClose=9;
    public static final int USING=207;
    public static final int T__426=426;
    public static final int SENTENCE=375;
    public static final int T__427=427;
    public static final int T__428=428;
    public static final int T__429=429;
    public static final int T__422=422;
    public static final int T__423=423;
    public static final int T__424=424;
    public static final int T__425=425;
    public static final int T__430=430;
    public static final int OrderByClause=48;
    public static final int QuotedStringLiteral=316;
    public static final int OrExpr=106;
    public static final int ReturnExpr=184;
    public static final int DIACRITICS=383;
    public static final int CHILD=301;
    public static final int T__419=419;
    public static final int NONDETERMINISTIC=243;
    public static final int TreatExpr=110;
    public static final int T__413=413;
    public static final int T__414=414;
    public static final int T__411=411;
    public static final int T__412=412;
    public static final int T__417=417;
    public static final int NodeCompPrecedes=95;
    public static final int T__418=418;
    public static final int T__415=415;
    public static final int LibraryModule=24;
    public static final int ELSE=274;
    public static final int KindTestText=73;
    public static final int T__416=416;
    public static final int FlowrExpr=39;
    public static final int ModulusOp=102;
    public static final int T__421=421;
    public static final int T__420=420;
    public static final int ContextItemExpr=119;
    public static final int GeneralCompNE=83;
    public static final int FTOR=355;
    public static final int XQuery=22;
    public static final int RCurly=7;
    public static final int ReturnClause=56;
    public static final int T__408=408;
    public static final int T__409=409;
    public static final int LANGUAGE=390;
    public static final int CompTextConstructor=131;
    public static final int LetClause=43;
    public static final int LOWERCASE=381;
    public static final int INSENSITIVE=379;
    public static final int BaseURIDeclaration=30;
    public static final int FT_OPTION=206;
    public static final int T__406=406;
    public static final int T__407=407;
    public static final int T__410=410;
    public static final int CompAttributeConstructor=130;
    public static final int END=255;
    public static final int DoubleLiteral=315;
    public static final int RENAME=347;
    public static final int OPTION=205;
    public static final int CharRef=322;
    public static final int SwitchExpr=80;
    public static final int InsertInto=163;
    public static final int BOUNDARY_SPACE=199;
    public static final int DirCommentConstructor=319;
    public static final int CatchVar=79;
    public static final int ONLY=254;
    public static final int OCCURS=365;
    public static final int KindTestComment=72;
    public static final int GeneralCompGT=86;
    public static final int SATISFIES=267;
    public static final int IDIV=281;
    public static final int EMPTY_SEQUENCE=327;
    public static final int PARENT=308;
    public static final int GeneralCompGE=87;
    public static final int Literal=175;
    public static final int THEN=273;
    public static final int CatchErrorList=78;
    public static final int COLLATION=230;
    public static final int MINUS_SIGN=220;
    public static final int REPLACE=344;
    public static final int PosVariableBinding=58;
    public static final int ANCESTOR=309;
    public static final int KindTestAnyKind=74;
    public static final int ComparisonExpr=122;
    public static final int MOST=368;
    public static final int AxisSpec=61;
    public static final int Start=189;
    public static final int NCNameChar=403;
    public static final int ITEM=328;
    public static final int TO=279;
    public static final int GroupBySpec=46;
    public static final int CompElementConstructor=128;
    public static final int AddOp=97;
    public static final int STEMMING=384;
    public static final int Transform=171;
    public static final int SET=350;
    public static final int NodeCompFollows=96;
    public static final int IfExpr=124;
    public static final int TEXT=278;
    public static final int DirPIConstructor=320;
    public static final int UNION=283;
    public static final int CompPIConstructor=133;
    public static final int CardinalityOne=150;
    public static final int NameTest=62;
    public static final int FOLLOWING_SIBLING=306;
    public static final int SCHEMA=233;
    public static final int ENTIRE=377;
    public static final int WHEN=253;
    public static final int VALIDATE=298;
    public static final int JoinExpr=181;
    public static final int DECLARE=198;
    public static final int START=252;
    public static final int IntegerLiteral=313;
    public static final int DIV=280;
    public static final int ForLetBindingExpr=41;
    public static final int PathExpr=59;
    public static final int CardinalityOneOrMany=151;
    public static final int FIRST=335;
    public static final int SENTENCES=371;
    public static final int CAST=290;
    public static final int EXTERNAL=235;
    public static final int InsertAfter=165;
    public static final int WHILE=354;
    public static final int DETERMINISTIC=242;
    public static final int CASE=270;
    public static final int ENCODING=194;
    public static final int OptionDeclaration=28;
    public static final int JoinClause=183;
    public static final int AtomicType=149;
    public static final int DOCUMENT_NODE=330;
    public static final int KindTestSchemaAttribute=70;
    public static final int CDataSection=321;
    public static final int TypedVariableBinding=57;
    public static final int WORD=361;
    public static final int UPPERCASE=382;
    public static final int Variable=138;
    public static final int INSERT=340;
    public static final int Comment=401;
    public static final int CountClause=44;
    public static final int ZERO_DIGIT=224;
    public static final int LAST=336;
    public static final int EscapeRCurly=323;
    public static final int CardinalityZeroOrOne=152;
    public static final int LeftJoinExpr=182;
    public static final int OrderByKind=51;
    public static final int NODE=341;
    public static final int KindTestAttribute=68;
    public static final int GeneralCompEQ=82;
    public static final int DECIMAL_FORMAT=216;
    public static final int GREATEST=213;
    public static final int LAngle=4;
    public static final int AndExpr=107;
    public static final int PROCESSING_INSTRUCTION=326;
    public static final int TRY=394;
    public static final int RELATIONSHIP=387;
    public static final int NAMESPACE=197;
    public static final int SKIP=334;
    public static final int VARIABLE=236;
    public static final int TypeSwitchDefault=156;
    public static final int BASE_URI=231;
    public static final int KindTestElement=67;
    public static final int OrderingModeDeclaration=32;
    public static final int CATCH=395;
    public static final int FROM=369;
    public static final int Namespace=143;
    public static final int PRECEDING_SIBLING=310;
    public static final int SIMPLE=241;
    public static final int ORDER=211;
    public static final int ATTRIBUTE=303;
    public static final int FOR=244;
    public static final int AND=276;
    public static final int FOLLOWING=307;
    public static final int IntersectExpr=104;
    public static final int PARAGRAPH=376;
    public static final int COPY_NAMESPACES=215;
    public static final int TransformReturn=174;
    public static final int SomeQuantifier=158;
    public static final int COPY=348;
    public static final int ALL=362;
    public static final int FunctionCall=135;
    public static final int CatchClause=77;
    public static final int CopyNamespacesDeclaration=34;
    public static final int STRIP=201;
    public static final int STABLE=262;
    public static final int KindTestDocument=66;
    public static final int NCNameStartChar=402;
    public static final int Count=192;
    public static final int PERCENT=222;
    public static final int CastExpr=112;
    public static final int Pragma=38;
    public static final int Qname=180;
    public static final int ArithmeticExpr=123;
    public static final int TUMBLING=249;
    public static final int BEFORE=339;
    public static final int AFTER=338;
    public static final int GROUPING_SEPARATOR=218;
    public static final int DecimalLiteral=314;
    public static final int UNORDERED=210;
    public static final int EscapeRClurly=17;
    public static final int ANY=360;
    public static final int SequenceExpr=116;
    public static final int InsertFirst=161;
    public static final int SCORE=247;
    public static final int InsertBefore=164;
    public static final int ORDERING=208;
    public static final int PredefinedEntityRef=19;
    public static final int ALLOWING=246;
    public static final int EmptyOrderDeclaration=33;
    public static final int LEVELS=388;
    public static final int TIMES=366;
    public static final int QuantifiedExpr=157;
    public static final int TREAT=288;

    // delegates
    // delegators


        public XQueryParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public XQueryParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return XQueryParser.tokenNames; }
    public String getGrammarFileName() { return "org/brackit/xquery/compiler/parser/XQuery.g"; }


        // XQuery version constants
        public static final int XQUERY_1_0 = 0;
        public static final int XQUERY_3_0 = 1;

        // Pass some token codes to super class at creation time.
        boolean dummy = setTokenCodes(NCName, Colon);

        // Flags enabling XQuery extensions
        private boolean update = true;
        private boolean scripting = true;
        private boolean fullText = true;

        private VarScopes variables = new VarScopes();

        // XQuery version - must be one of XQUERY_1_0 or XQUERY_3_0 
        private int xqVersion = XQUERY_3_0;

        public boolean getUpdate   () {return update;}
        public boolean getScripting() {return scripting;}
        public boolean getFullText () {return fullText ;}
        public int getXQVersion() {return xqVersion;}

        public void setUpdate(boolean value) {update = value;}
        public void setScripting(boolean value) {scripting = value;}
        public void setFullText (boolean value) {fullText  = value;}

        public void setXQVersion(int value) {
            if (value != XQUERY_1_0 && value != XQUERY_3_0)
                throw new IllegalArgumentException("Unknown XQuery version.");
            xqVersion = value;
        }
        
        private void setXQVersion(String version) {
        	if ("3.0".equals(version)) {
    		xqVersion = 1;
    	} else if ("1.0".equals(version)) {
    		xqVersion = 0;
    	} else {
    	            throw new IllegalArgumentException("Unknown XQuery version: " + version);
    	}
        }
        
        protected Object recoverFromMismatchedToken(IntStream input,
                                                int ttype,
                                                BitSet follow)
        throws RecognitionException
    {   
        throw new MismatchedTokenException(ttype, input);
    }


    public static class module_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module"
    // org/brackit/xquery/compiler/parser/XQuery.g:348:1: module : ( versionDecl )? ( libraryModule -> ^( XQuery libraryModule ) | mainModule -> ^( XQuery mainModule ) ) EOF ;
    public final XQueryParser.module_return module() throws RecognitionException {
        XQueryParser.module_return retval = new XQueryParser.module_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF4=null;
        XQueryParser.versionDecl_return versionDecl1 = null;

        XQueryParser.libraryModule_return libraryModule2 = null;

        XQueryParser.mainModule_return mainModule3 = null;


        Object EOF4_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_libraryModule=new RewriteRuleSubtreeStream(adaptor,"rule libraryModule");
        RewriteRuleSubtreeStream stream_versionDecl=new RewriteRuleSubtreeStream(adaptor,"rule versionDecl");
        RewriteRuleSubtreeStream stream_mainModule=new RewriteRuleSubtreeStream(adaptor,"rule mainModule");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:349:5: ( ( versionDecl )? ( libraryModule -> ^( XQuery libraryModule ) | mainModule -> ^( XQuery mainModule ) ) EOF )
            // org/brackit/xquery/compiler/parser/XQuery.g:349:7: ( versionDecl )? ( libraryModule -> ^( XQuery libraryModule ) | mainModule -> ^( XQuery mainModule ) ) EOF
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:349:7: ( versionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( ((LA1_1>=ENCODING && LA1_1<=VERSION)) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:349:7: versionDecl
                    {
                    pushFollow(FOLLOW_versionDecl_in_module1391);
                    versionDecl1=versionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_versionDecl.add(versionDecl1.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:349:20: ( libraryModule -> ^( XQuery libraryModule ) | mainModule -> ^( XQuery mainModule ) )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||(LA2_1>=LAngle && LA2_1<=RAngle)||(LA2_1>=SymEq && LA2_1<=Colon)||(LA2_1>=OR && LA2_1<=CONTAINS)||(LA2_1>=TO && LA2_1<=INSTANCE)||(LA2_1>=TREAT && LA2_1<=IS)||LA2_1==406||(LA2_1>=408 && LA2_1<=409)||(LA2_1>=413 && LA2_1<=423)||LA2_1==427) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA2_0==LAngle||LA2_0==Pragma||(LA2_0>=XQUERY && LA2_0<=VERSION)||(LA2_0>=NAMESPACE && LA2_0<=AposedStringLiteral)||(LA2_0>=DirCommentConstructor && LA2_0<=DirPIConstructor)||(LA2_0>=DOCUMENT && LA2_0<=WHILE)||(LA2_0>=NOT && LA2_0<=NCName)||LA2_0==408||LA2_0==411||(LA2_0>=413 && LA2_0<=415)||(LA2_0>=422 && LA2_0<=423)||(LA2_0>=425 && LA2_0<=426)||LA2_0==429) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:349:21: libraryModule
                    {
                    pushFollow(FOLLOW_libraryModule_in_module1395);
                    libraryModule2=libraryModule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libraryModule.add(libraryModule2.getTree());


                    // AST REWRITE
                    // elements: libraryModule
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 349:35: -> ^( XQuery libraryModule )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:349:38: ^( XQuery libraryModule )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XQuery, "XQuery"), root_1);

                        adaptor.addChild(root_1, stream_libraryModule.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:349:63: mainModule
                    {
                    pushFollow(FOLLOW_mainModule_in_module1406);
                    mainModule3=mainModule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mainModule.add(mainModule3.getTree());


                    // AST REWRITE
                    // elements: mainModule
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 349:74: -> ^( XQuery mainModule )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:349:77: ^( XQuery mainModule )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XQuery, "XQuery"), root_1);

                        adaptor.addChild(root_1, stream_mainModule.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_module1417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF4);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module"

    public static class versionDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "versionDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:351:1: versionDecl : XQUERY ( ( ENCODING stringLiteral ) | ( VERSION version= stringLiteral ( ENCODING stringLiteral )? ) ) ';' ;
    public final XQueryParser.versionDecl_return versionDecl() throws RecognitionException {
        XQueryParser.versionDecl_return retval = new XQueryParser.versionDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token XQUERY5=null;
        Token ENCODING6=null;
        Token VERSION8=null;
        Token ENCODING9=null;
        Token char_literal11=null;
        XQueryParser.stringLiteral_return version = null;

        XQueryParser.stringLiteral_return stringLiteral7 = null;

        XQueryParser.stringLiteral_return stringLiteral10 = null;


        Object XQUERY5_tree=null;
        Object ENCODING6_tree=null;
        Object VERSION8_tree=null;
        Object ENCODING9_tree=null;
        Object char_literal11_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:352:5: ( XQUERY ( ( ENCODING stringLiteral ) | ( VERSION version= stringLiteral ( ENCODING stringLiteral )? ) ) ';' )
            // org/brackit/xquery/compiler/parser/XQuery.g:353:2: XQUERY ( ( ENCODING stringLiteral ) | ( VERSION version= stringLiteral ( ENCODING stringLiteral )? ) ) ';'
            {
            root_0 = (Object)adaptor.nil();

            XQUERY5=(Token)match(input,XQUERY,FOLLOW_XQUERY_in_versionDecl1438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            XQUERY5_tree = (Object)adaptor.create(XQUERY5);
            adaptor.addChild(root_0, XQUERY5_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:354:2: ( ( ENCODING stringLiteral ) | ( VERSION version= stringLiteral ( ENCODING stringLiteral )? ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:354:3: ( ENCODING stringLiteral )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:354:3: ( ENCODING stringLiteral )
                    // org/brackit/xquery/compiler/parser/XQuery.g:354:4: ENCODING stringLiteral
                    {
                    ENCODING6=(Token)match(input,ENCODING,FOLLOW_ENCODING_in_versionDecl1444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENCODING6_tree = (Object)adaptor.create(ENCODING6);
                    adaptor.addChild(root_0, ENCODING6_tree);
                    }
                    pushFollow(FOLLOW_stringLiteral_in_versionDecl1446);
                    stringLiteral7=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral7.getTree());
                    if ( state.backtracking==0 ) {
                      checkEncoding();
                    }

                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:355:2: ( VERSION version= stringLiteral ( ENCODING stringLiteral )? )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:355:2: ( VERSION version= stringLiteral ( ENCODING stringLiteral )? )
                    // org/brackit/xquery/compiler/parser/XQuery.g:355:3: VERSION version= stringLiteral ( ENCODING stringLiteral )?
                    {
                    VERSION8=(Token)match(input,VERSION,FOLLOW_VERSION_in_versionDecl1456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VERSION8_tree = (Object)adaptor.create(VERSION8);
                    adaptor.addChild(root_0, VERSION8_tree);
                    }
                    pushFollow(FOLLOW_stringLiteral_in_versionDecl1460);
                    version=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, version.getTree());
                    if ( state.backtracking==0 ) {
                       setXQVersion((version!=null?input.toString(version.start,version.stop):null).substring(1, (version!=null?input.toString(version.start,version.stop):null).length() - 1));
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:355:106: ( ENCODING stringLiteral )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:355:107: ENCODING stringLiteral
                            {
                            ENCODING9=(Token)match(input,ENCODING,FOLLOW_ENCODING_in_versionDecl1465); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ENCODING9_tree = (Object)adaptor.create(ENCODING9);
                            adaptor.addChild(root_0, ENCODING9_tree);
                            }
                            pushFollow(FOLLOW_stringLiteral_in_versionDecl1467);
                            stringLiteral10=stringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral10.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            char_literal11=(Token)match(input,406,FOLLOW_406_in_versionDecl1473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal11_tree = (Object)adaptor.create(char_literal11);
            adaptor.addChild(root_0, char_literal11_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "versionDecl"

    public static class mainModule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mainModule"
    // org/brackit/xquery/compiler/parser/XQuery.g:357:1: mainModule : prolog queryBody -> ^( MainModule ( prolog )* queryBody ) ;
    public final XQueryParser.mainModule_return mainModule() throws RecognitionException {
        XQueryParser.mainModule_return retval = new XQueryParser.mainModule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.prolog_return prolog12 = null;

        XQueryParser.queryBody_return queryBody13 = null;


        RewriteRuleSubtreeStream stream_prolog=new RewriteRuleSubtreeStream(adaptor,"rule prolog");
        RewriteRuleSubtreeStream stream_queryBody=new RewriteRuleSubtreeStream(adaptor,"rule queryBody");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:358:5: ( prolog queryBody -> ^( MainModule ( prolog )* queryBody ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:358:7: prolog queryBody
            {
            pushFollow(FOLLOW_prolog_in_mainModule1489);
            prolog12=prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prolog.add(prolog12.getTree());
            pushFollow(FOLLOW_queryBody_in_mainModule1491);
            queryBody13=queryBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_queryBody.add(queryBody13.getTree());


            // AST REWRITE
            // elements: prolog, queryBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:24: -> ^( MainModule ( prolog )* queryBody )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:358:27: ^( MainModule ( prolog )* queryBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MainModule, "MainModule"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:358:40: ( prolog )*
                while ( stream_prolog.hasNext() ) {
                    adaptor.addChild(root_1, stream_prolog.nextTree());

                }
                stream_prolog.reset();
                adaptor.addChild(root_1, stream_queryBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mainModule"

    public static class libraryModule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libraryModule"
    // org/brackit/xquery/compiler/parser/XQuery.g:360:1: libraryModule : moduleDecl prolog -> ^( LibraryModule moduleDecl prolog ) ;
    public final XQueryParser.libraryModule_return libraryModule() throws RecognitionException {
        XQueryParser.libraryModule_return retval = new XQueryParser.libraryModule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.moduleDecl_return moduleDecl14 = null;

        XQueryParser.prolog_return prolog15 = null;


        RewriteRuleSubtreeStream stream_prolog=new RewriteRuleSubtreeStream(adaptor,"rule prolog");
        RewriteRuleSubtreeStream stream_moduleDecl=new RewriteRuleSubtreeStream(adaptor,"rule moduleDecl");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:361:5: ( moduleDecl prolog -> ^( LibraryModule moduleDecl prolog ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:361:7: moduleDecl prolog
            {
            pushFollow(FOLLOW_moduleDecl_in_libraryModule1518);
            moduleDecl14=moduleDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleDecl.add(moduleDecl14.getTree());
            pushFollow(FOLLOW_prolog_in_libraryModule1520);
            prolog15=prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prolog.add(prolog15.getTree());


            // AST REWRITE
            // elements: prolog, moduleDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:25: -> ^( LibraryModule moduleDecl prolog )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:361:28: ^( LibraryModule moduleDecl prolog )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LibraryModule, "LibraryModule"), root_1);

                adaptor.addChild(root_1, stream_moduleDecl.nextTree());
                adaptor.addChild(root_1, stream_prolog.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libraryModule"

    public static class moduleDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:363:1: moduleDecl : MODULE NAMESPACE name= ncName SymEq uri= ';' -> ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) ) ;
    public final XQueryParser.moduleDecl_return moduleDecl() throws RecognitionException {
        XQueryParser.moduleDecl_return retval = new XQueryParser.moduleDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token uri=null;
        Token MODULE16=null;
        Token NAMESPACE17=null;
        Token SymEq18=null;
        XQueryParser.ncName_return name = null;


        Object uri_tree=null;
        Object MODULE16_tree=null;
        Object NAMESPACE17_tree=null;
        Object SymEq18_tree=null;
        RewriteRuleTokenStream stream_SymEq=new RewriteRuleTokenStream(adaptor,"token SymEq");
        RewriteRuleTokenStream stream_406=new RewriteRuleTokenStream(adaptor,"token 406");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:364:5: ( MODULE NAMESPACE name= ncName SymEq uri= ';' -> ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:364:7: MODULE NAMESPACE name= ncName SymEq uri= ';'
            {
            MODULE16=(Token)match(input,MODULE,FOLLOW_MODULE_in_moduleDecl1546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(MODULE16);

            NAMESPACE17=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleDecl1548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE17);

            pushFollow(FOLLOW_ncName_in_moduleDecl1552);
            name=ncName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ncName.add(name.getTree());
            SymEq18=(Token)match(input,SymEq,FOLLOW_SymEq_in_moduleDecl1554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SymEq.add(SymEq18);

            uri=(Token)match(input,406,FOLLOW_406_in_moduleDecl1559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_406.add(uri);



            // AST REWRITE
            // elements: name, uri
            // token labels: uri
            // rule labels: retval, name
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_uri=new RewriteRuleTokenStream(adaptor,"token uri",uri);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:51: -> ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:364:54: ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NamespaceDeclaration, "NamespaceDeclaration"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:364:77: ^( Literal $name)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_name.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:364:94: ^( Literal $uri)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_uri.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleDecl"

    public static class prolog_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prolog"
    // org/brackit/xquery/compiler/parser/XQuery.g:366:1: prolog : ( prologPartOne )* ( prologPartTwo )* -> ^( Prolog ( prologPartOne )* ( prologPartTwo )* ) ;
    public final XQueryParser.prolog_return prolog() throws RecognitionException {
        XQueryParser.prolog_return retval = new XQueryParser.prolog_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.prologPartOne_return prologPartOne19 = null;

        XQueryParser.prologPartTwo_return prologPartTwo20 = null;


        RewriteRuleSubtreeStream stream_prologPartOne=new RewriteRuleSubtreeStream(adaptor,"rule prologPartOne");
        RewriteRuleSubtreeStream stream_prologPartTwo=new RewriteRuleSubtreeStream(adaptor,"rule prologPartTwo");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:367:5: ( ( prologPartOne )* ( prologPartTwo )* -> ^( Prolog ( prologPartOne )* ( prologPartTwo )* ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:367:7: ( prologPartOne )* ( prologPartTwo )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:367:7: ( prologPartOne )*
            loop5:
            do {
                int alt5=2;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:367:7: prologPartOne
            	    {
            	    pushFollow(FOLLOW_prologPartOne_in_prolog1595);
            	    prologPartOne19=prologPartOne();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prologPartOne.add(prologPartOne19.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // org/brackit/xquery/compiler/parser/XQuery.g:368:7: ( prologPartTwo )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DECLARE) ) {
                    int LA6_2 = input.LA(2);

                    if ( (LA6_2==OPTION) ) {
                        alt6=1;
                    }
                    else if ( (LA6_2==CONTEXT) && ((xqVersion==XQUERY_3_0))) {
                        alt6=1;
                    }
                    else if ( (LA6_2==FUNCTION||(LA6_2>=VARIABLE && LA6_2<=CONSTANT)||(LA6_2>=SEQUENTIAL && LA6_2<=NONDETERMINISTIC)||LA6_2==407) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:368:7: prologPartTwo
            	    {
            	    pushFollow(FOLLOW_prologPartTwo_in_prolog1605);
            	    prologPartTwo20=prologPartTwo();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prologPartTwo.add(prologPartTwo20.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);



            // AST REWRITE
            // elements: prologPartOne, prologPartTwo
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:7: -> ^( Prolog ( prologPartOne )* ( prologPartTwo )* )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:369:10: ^( Prolog ( prologPartOne )* ( prologPartTwo )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Prolog, "Prolog"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:369:19: ( prologPartOne )*
                while ( stream_prologPartOne.hasNext() ) {
                    adaptor.addChild(root_1, stream_prologPartOne.nextTree());

                }
                stream_prologPartOne.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:369:34: ( prologPartTwo )*
                while ( stream_prologPartTwo.hasNext() ) {
                    adaptor.addChild(root_1, stream_prologPartTwo.nextTree());

                }
                stream_prologPartTwo.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prolog"

    public static class prologPartOne_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologPartOne"
    // org/brackit/xquery/compiler/parser/XQuery.g:372:1: prologPartOne : ( ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl ) ';' -> ( defaultNamespaceDecl )* ( setter )* ( namespaceDecl )* ( importDecl )* ( ftOptionDecl )* ) ;
    public final XQueryParser.prologPartOne_return prologPartOne() throws RecognitionException {
        XQueryParser.prologPartOne_return retval = new XQueryParser.prologPartOne_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal26=null;
        XQueryParser.defaultNamespaceDecl_return defaultNamespaceDecl21 = null;

        XQueryParser.setter_return setter22 = null;

        XQueryParser.namespaceDecl_return namespaceDecl23 = null;

        XQueryParser.importDecl_return importDecl24 = null;

        XQueryParser.ftOptionDecl_return ftOptionDecl25 = null;


        Object char_literal26_tree=null;
        RewriteRuleTokenStream stream_406=new RewriteRuleTokenStream(adaptor,"token 406");
        RewriteRuleSubtreeStream stream_importDecl=new RewriteRuleSubtreeStream(adaptor,"rule importDecl");
        RewriteRuleSubtreeStream stream_defaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule defaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_setter=new RewriteRuleSubtreeStream(adaptor,"rule setter");
        RewriteRuleSubtreeStream stream_namespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule namespaceDecl");
        RewriteRuleSubtreeStream stream_ftOptionDecl=new RewriteRuleSubtreeStream(adaptor,"rule ftOptionDecl");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:373:5: ( ( ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl ) ';' -> ( defaultNamespaceDecl )* ( setter )* ( namespaceDecl )* ( importDecl )* ( ftOptionDecl )* ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:374:5: ( ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl ) ';' -> ( defaultNamespaceDecl )* ( setter )* ( namespaceDecl )* ( importDecl )* ( ftOptionDecl )* )
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:374:5: ( ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl ) ';' -> ( defaultNamespaceDecl )* ( setter )* ( namespaceDecl )* ( importDecl )* ( ftOptionDecl )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:374:6: ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl ) ';'
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:374:6: ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl )
            int alt7=5;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:374:7: defaultNamespaceDecl
                    {
                    pushFollow(FOLLOW_defaultNamespaceDecl_in_prologPartOne1650);
                    defaultNamespaceDecl21=defaultNamespaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultNamespaceDecl.add(defaultNamespaceDecl21.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:374:30: setter
                    {
                    pushFollow(FOLLOW_setter_in_prologPartOne1654);
                    setter22=setter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_setter.add(setter22.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:374:39: namespaceDecl
                    {
                    pushFollow(FOLLOW_namespaceDecl_in_prologPartOne1658);
                    namespaceDecl23=namespaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_namespaceDecl.add(namespaceDecl23.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:374:55: importDecl
                    {
                    pushFollow(FOLLOW_importDecl_in_prologPartOne1662);
                    importDecl24=importDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importDecl.add(importDecl24.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:374:68: ftOptionDecl
                    {
                    pushFollow(FOLLOW_ftOptionDecl_in_prologPartOne1666);
                    ftOptionDecl25=ftOptionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ftOptionDecl.add(ftOptionDecl25.getTree());

                    }
                    break;

            }

            char_literal26=(Token)match(input,406,FOLLOW_406_in_prologPartOne1713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_406.add(char_literal26);



            // AST REWRITE
            // elements: defaultNamespaceDecl, setter, importDecl, ftOptionDecl, namespaceDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:11: -> ( defaultNamespaceDecl )* ( setter )* ( namespaceDecl )* ( importDecl )* ( ftOptionDecl )*
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:375:14: ( defaultNamespaceDecl )*
                while ( stream_defaultNamespaceDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_defaultNamespaceDecl.nextTree());

                }
                stream_defaultNamespaceDecl.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:375:36: ( setter )*
                while ( stream_setter.hasNext() ) {
                    adaptor.addChild(root_0, stream_setter.nextTree());

                }
                stream_setter.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:375:44: ( namespaceDecl )*
                while ( stream_namespaceDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_namespaceDecl.nextTree());

                }
                stream_namespaceDecl.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:375:59: ( importDecl )*
                while ( stream_importDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_importDecl.nextTree());

                }
                stream_importDecl.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:375:71: ( ftOptionDecl )*
                while ( stream_ftOptionDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_ftOptionDecl.nextTree());

                }
                stream_ftOptionDecl.reset();

            }

            retval.tree = root_0;}
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologPartOne"

    public static class prologPartTwo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologPartTwo"
    // org/brackit/xquery/compiler/parser/XQuery.g:377:1: prologPartTwo : ( ( annotatedDecl | optionDecl | contextItemDecl ) ';' -> ( annotatedDecl )* ( optionDecl )* ( contextItemDecl )* ) ;
    public final XQueryParser.prologPartTwo_return prologPartTwo() throws RecognitionException {
        XQueryParser.prologPartTwo_return retval = new XQueryParser.prologPartTwo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal30=null;
        XQueryParser.annotatedDecl_return annotatedDecl27 = null;

        XQueryParser.optionDecl_return optionDecl28 = null;

        XQueryParser.contextItemDecl_return contextItemDecl29 = null;


        Object char_literal30_tree=null;
        RewriteRuleTokenStream stream_406=new RewriteRuleTokenStream(adaptor,"token 406");
        RewriteRuleSubtreeStream stream_annotatedDecl=new RewriteRuleSubtreeStream(adaptor,"rule annotatedDecl");
        RewriteRuleSubtreeStream stream_contextItemDecl=new RewriteRuleSubtreeStream(adaptor,"rule contextItemDecl");
        RewriteRuleSubtreeStream stream_optionDecl=new RewriteRuleSubtreeStream(adaptor,"rule optionDecl");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:378:5: ( ( ( annotatedDecl | optionDecl | contextItemDecl ) ';' -> ( annotatedDecl )* ( optionDecl )* ( contextItemDecl )* ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:379:7: ( ( annotatedDecl | optionDecl | contextItemDecl ) ';' -> ( annotatedDecl )* ( optionDecl )* ( contextItemDecl )* )
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:379:7: ( ( annotatedDecl | optionDecl | contextItemDecl ) ';' -> ( annotatedDecl )* ( optionDecl )* ( contextItemDecl )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:379:8: ( annotatedDecl | optionDecl | contextItemDecl ) ';'
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:379:8: ( annotatedDecl | optionDecl | contextItemDecl )
            int alt8=3;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DECLARE) ) {
                int LA8_1 = input.LA(2);

                if ( (LA8_1==OPTION) ) {
                    alt8=2;
                }
                else if ( (LA8_1==CONTEXT) && ((xqVersion==XQUERY_3_0))) {
                    alt8=3;
                }
                else if ( (LA8_1==FUNCTION||(LA8_1>=VARIABLE && LA8_1<=CONSTANT)||(LA8_1>=SEQUENTIAL && LA8_1<=NONDETERMINISTIC)||LA8_1==407) ) {
                    alt8=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:379:9: annotatedDecl
                    {
                    pushFollow(FOLLOW_annotatedDecl_in_prologPartTwo1759);
                    annotatedDecl27=annotatedDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotatedDecl.add(annotatedDecl27.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:379:25: optionDecl
                    {
                    pushFollow(FOLLOW_optionDecl_in_prologPartTwo1763);
                    optionDecl28=optionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_optionDecl.add(optionDecl28.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:379:38: contextItemDecl
                    {
                    pushFollow(FOLLOW_contextItemDecl_in_prologPartTwo1767);
                    contextItemDecl29=contextItemDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextItemDecl.add(contextItemDecl29.getTree());

                    }
                    break;

            }

            char_literal30=(Token)match(input,406,FOLLOW_406_in_prologPartTwo1816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_406.add(char_literal30);



            // AST REWRITE
            // elements: annotatedDecl, contextItemDecl, optionDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:13: -> ( annotatedDecl )* ( optionDecl )* ( contextItemDecl )*
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:380:16: ( annotatedDecl )*
                while ( stream_annotatedDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_annotatedDecl.nextTree());

                }
                stream_annotatedDecl.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:380:31: ( optionDecl )*
                while ( stream_optionDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_optionDecl.nextTree());

                }
                stream_optionDecl.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:380:43: ( contextItemDecl )*
                while ( stream_contextItemDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_contextItemDecl.nextTree());

                }
                stream_contextItemDecl.reset();

            }

            retval.tree = root_0;}
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologPartTwo"

    public static class annotatedDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotatedDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:382:1: annotatedDecl : DECLARE ( annotation )* ( varDecl | functionDecl ) -> ( annotation )* ( varDecl )? ( functionDecl )? ;
    public final XQueryParser.annotatedDecl_return annotatedDecl() throws RecognitionException {
        XQueryParser.annotatedDecl_return retval = new XQueryParser.annotatedDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE31=null;
        XQueryParser.annotation_return annotation32 = null;

        XQueryParser.varDecl_return varDecl33 = null;

        XQueryParser.functionDecl_return functionDecl34 = null;


        Object DECLARE31_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_functionDecl=new RewriteRuleSubtreeStream(adaptor,"rule functionDecl");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:383:5: ( DECLARE ( annotation )* ( varDecl | functionDecl ) -> ( annotation )* ( varDecl )? ( functionDecl )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:384:4: DECLARE ( annotation )* ( varDecl | functionDecl )
            {
            DECLARE31=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_annotatedDecl1848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE31);

            // org/brackit/xquery/compiler/parser/XQuery.g:384:12: ( annotation )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==407) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:384:12: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotatedDecl1850);
            	    annotation32=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation32.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // org/brackit/xquery/compiler/parser/XQuery.g:384:24: ( varDecl | functionDecl )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==VARIABLE) ) {
                alt10=1;
            }
            else if ( (LA10_0==CONSTANT) && ((scripting))) {
                alt10=1;
            }
            else if ( (LA10_0==FUNCTION||(LA10_0>=UPDATING && LA10_0<=NONDETERMINISTIC)) ) {
                alt10=2;
            }
            else if ( (LA10_0==SEQUENTIAL) && ((scripting))) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:384:25: varDecl
                    {
                    pushFollow(FOLLOW_varDecl_in_annotatedDecl1854);
                    varDecl33=varDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varDecl.add(varDecl33.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:384:35: functionDecl
                    {
                    pushFollow(FOLLOW_functionDecl_in_annotatedDecl1858);
                    functionDecl34=functionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_functionDecl.add(functionDecl34.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: functionDecl, varDecl, annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:4: -> ( annotation )* ( varDecl )? ( functionDecl )?
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:385:7: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_0, stream_annotation.nextTree());

                }
                stream_annotation.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:385:19: ( varDecl )?
                if ( stream_varDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_varDecl.nextTree());

                }
                stream_varDecl.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:385:28: ( functionDecl )?
                if ( stream_functionDecl.hasNext() ) {
                    adaptor.addChild(root_0, stream_functionDecl.nextTree());

                }
                stream_functionDecl.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotatedDecl"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // org/brackit/xquery/compiler/parser/XQuery.g:387:1: annotation : '%' eqName ( '(' literal ( ',' literal )* ')' )? ;
    public final XQueryParser.annotation_return annotation() throws RecognitionException {
        XQueryParser.annotation_return retval = new XQueryParser.annotation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal35=null;
        Token char_literal37=null;
        Token char_literal39=null;
        Token char_literal41=null;
        XQueryParser.eqName_return eqName36 = null;

        XQueryParser.literal_return literal38 = null;

        XQueryParser.literal_return literal40 = null;


        Object char_literal35_tree=null;
        Object char_literal37_tree=null;
        Object char_literal39_tree=null;
        Object char_literal41_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:388:5: ( '%' eqName ( '(' literal ( ',' literal )* ')' )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:389:5: '%' eqName ( '(' literal ( ',' literal )* ')' )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal35=(Token)match(input,407,FOLLOW_407_in_annotation1895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal35_tree = (Object)adaptor.create(char_literal35);
            adaptor.addChild(root_0, char_literal35_tree);
            }
            pushFollow(FOLLOW_eqName_in_annotation1897);
            eqName36=eqName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eqName36.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:389:16: ( '(' literal ( ',' literal )* ')' )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==408) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:389:17: '(' literal ( ',' literal )* ')'
                    {
                    char_literal37=(Token)match(input,408,FOLLOW_408_in_annotation1900); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal37_tree = (Object)adaptor.create(char_literal37);
                    adaptor.addChild(root_0, char_literal37_tree);
                    }
                    pushFollow(FOLLOW_literal_in_annotation1902);
                    literal38=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal38.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:389:29: ( ',' literal )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==409) ) {
                            alt11=1;
                        }


                        switch (alt11) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:389:30: ',' literal
                    	    {
                    	    char_literal39=(Token)match(input,409,FOLLOW_409_in_annotation1905); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal39_tree = (Object)adaptor.create(char_literal39);
                    	    adaptor.addChild(root_0, char_literal39_tree);
                    	    }
                    	    pushFollow(FOLLOW_literal_in_annotation1907);
                    	    literal40=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal40.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);

                    char_literal41=(Token)match(input,410,FOLLOW_410_in_annotation1911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal41_tree = (Object)adaptor.create(char_literal41);
                    adaptor.addChild(root_0, char_literal41_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class setter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "setter"
    // org/brackit/xquery/compiler/parser/XQuery.g:392:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl | {...}? => revalidationDecl | {...}? => decimalFormatDecl );
    public final XQueryParser.setter_return setter() throws RecognitionException {
        XQueryParser.setter_return retval = new XQueryParser.setter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.boundarySpaceDecl_return boundarySpaceDecl42 = null;

        XQueryParser.defaultCollationDecl_return defaultCollationDecl43 = null;

        XQueryParser.baseURIDecl_return baseURIDecl44 = null;

        XQueryParser.constructionDecl_return constructionDecl45 = null;

        XQueryParser.orderingModeDecl_return orderingModeDecl46 = null;

        XQueryParser.emptyOrderDecl_return emptyOrderDecl47 = null;

        XQueryParser.copyNamespacesDecl_return copyNamespacesDecl48 = null;

        XQueryParser.revalidationDecl_return revalidationDecl49 = null;

        XQueryParser.decimalFormatDecl_return decimalFormatDecl50 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:393:5: ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl | {...}? => revalidationDecl | {...}? => decimalFormatDecl )
            int alt13=9;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:393:7: boundarySpaceDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boundarySpaceDecl_in_setter1939);
                    boundarySpaceDecl42=boundarySpaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boundarySpaceDecl42.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:394:7: defaultCollationDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_defaultCollationDecl_in_setter1948);
                    defaultCollationDecl43=defaultCollationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultCollationDecl43.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:395:7: baseURIDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_baseURIDecl_in_setter1957);
                    baseURIDecl44=baseURIDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, baseURIDecl44.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:396:7: constructionDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constructionDecl_in_setter1965);
                    constructionDecl45=constructionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructionDecl45.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:397:7: orderingModeDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_orderingModeDecl_in_setter1975);
                    orderingModeDecl46=orderingModeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderingModeDecl46.getTree());

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:398:7: emptyOrderDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emptyOrderDecl_in_setter1988);
                    emptyOrderDecl47=emptyOrderDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emptyOrderDecl47.getTree());

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:399:7: copyNamespacesDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_copyNamespacesDecl_in_setter1997);
                    copyNamespacesDecl48=copyNamespacesDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, copyNamespacesDecl48.getTree());

                    }
                    break;
                case 8 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:400:7: {...}? => revalidationDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((update)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "setter", "update");
                    }
                    pushFollow(FOLLOW_revalidationDecl_in_setter2024);
                    revalidationDecl49=revalidationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, revalidationDecl49.getTree());

                    }
                    break;
                case 9 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:401:7: {...}? => decimalFormatDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "setter", "xqVersion==XQUERY_3_0");
                    }
                    pushFollow(FOLLOW_decimalFormatDecl_in_setter2052);
                    decimalFormatDecl50=decimalFormatDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decimalFormatDecl50.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "setter"

    public static class importDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:403:1: importDecl : ( schemaImport | moduleImport );
    public final XQueryParser.importDecl_return importDecl() throws RecognitionException {
        XQueryParser.importDecl_return retval = new XQueryParser.importDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.schemaImport_return schemaImport51 = null;

        XQueryParser.moduleImport_return moduleImport52 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:404:5: ( schemaImport | moduleImport )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==IMPORT) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==SCHEMA) ) {
                    alt14=1;
                }
                else if ( (LA14_1==MODULE) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:404:7: schemaImport
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_schemaImport_in_importDecl2083);
                    schemaImport51=schemaImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schemaImport51.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:405:7: moduleImport
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moduleImport_in_importDecl2091);
                    moduleImport52=moduleImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleImport52.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importDecl"

    public static class namespaceDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespaceDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:407:1: namespaceDecl : DECLARE NAMESPACE name= ncName SymEq uri= uriLiteral -> ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) ) ;
    public final XQueryParser.namespaceDecl_return namespaceDecl() throws RecognitionException {
        XQueryParser.namespaceDecl_return retval = new XQueryParser.namespaceDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE53=null;
        Token NAMESPACE54=null;
        Token SymEq55=null;
        XQueryParser.ncName_return name = null;

        XQueryParser.uriLiteral_return uri = null;


        Object DECLARE53_tree=null;
        Object NAMESPACE54_tree=null;
        Object SymEq55_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SymEq=new RewriteRuleTokenStream(adaptor,"token SymEq");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:408:5: ( DECLARE NAMESPACE name= ncName SymEq uri= uriLiteral -> ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:408:7: DECLARE NAMESPACE name= ncName SymEq uri= uriLiteral
            {
            DECLARE53=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_namespaceDecl2107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE53);

            NAMESPACE54=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDecl2109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE54);

            pushFollow(FOLLOW_ncName_in_namespaceDecl2113);
            name=ncName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ncName.add(name.getTree());
            SymEq55=(Token)match(input,SymEq,FOLLOW_SymEq_in_namespaceDecl2115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SymEq.add(SymEq55);

            pushFollow(FOLLOW_uriLiteral_in_namespaceDecl2119);
            uri=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_uriLiteral.add(uri.getTree());


            // AST REWRITE
            // elements: uri, name
            // token labels: 
            // rule labels: retval, name, uri
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_uri=new RewriteRuleSubtreeStream(adaptor,"rule uri",uri!=null?uri.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:58: -> ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:408:61: ^( NamespaceDeclaration ^( Literal $name) ^( Literal $uri) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NamespaceDeclaration, "NamespaceDeclaration"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:408:84: ^( Literal $name)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_name.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:408:101: ^( Literal $uri)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_uri.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "namespaceDecl"

    public static class boundarySpaceDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boundarySpaceDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:410:1: boundarySpaceDecl : DECLARE BOUNDARY_SPACE ( PRESERVE -> ^( BoundarySpaceDeclaration ^( Literal Str[\"preserve\"] ) ) | STRIP -> ^( BoundarySpaceDeclaration ^( Literal Str[\"strip\"] ) ) ) ;
    public final XQueryParser.boundarySpaceDecl_return boundarySpaceDecl() throws RecognitionException {
        XQueryParser.boundarySpaceDecl_return retval = new XQueryParser.boundarySpaceDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE56=null;
        Token BOUNDARY_SPACE57=null;
        Token PRESERVE58=null;
        Token STRIP59=null;

        Object DECLARE56_tree=null;
        Object BOUNDARY_SPACE57_tree=null;
        Object PRESERVE58_tree=null;
        Object STRIP59_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_STRIP=new RewriteRuleTokenStream(adaptor,"token STRIP");
        RewriteRuleTokenStream stream_BOUNDARY_SPACE=new RewriteRuleTokenStream(adaptor,"token BOUNDARY_SPACE");
        RewriteRuleTokenStream stream_PRESERVE=new RewriteRuleTokenStream(adaptor,"token PRESERVE");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:411:5: ( DECLARE BOUNDARY_SPACE ( PRESERVE -> ^( BoundarySpaceDeclaration ^( Literal Str[\"preserve\"] ) ) | STRIP -> ^( BoundarySpaceDeclaration ^( Literal Str[\"strip\"] ) ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:412:5: DECLARE BOUNDARY_SPACE ( PRESERVE -> ^( BoundarySpaceDeclaration ^( Literal Str[\"preserve\"] ) ) | STRIP -> ^( BoundarySpaceDeclaration ^( Literal Str[\"strip\"] ) ) )
            {
            DECLARE56=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_boundarySpaceDecl2160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE56);

            BOUNDARY_SPACE57=(Token)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_boundarySpaceDecl2162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BOUNDARY_SPACE.add(BOUNDARY_SPACE57);

            // org/brackit/xquery/compiler/parser/XQuery.g:413:5: ( PRESERVE -> ^( BoundarySpaceDeclaration ^( Literal Str[\"preserve\"] ) ) | STRIP -> ^( BoundarySpaceDeclaration ^( Literal Str[\"strip\"] ) ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==PRESERVE) ) {
                alt15=1;
            }
            else if ( (LA15_0==STRIP) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:414:5: PRESERVE
                    {
                    PRESERVE58=(Token)match(input,PRESERVE,FOLLOW_PRESERVE_in_boundarySpaceDecl2174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRESERVE.add(PRESERVE58);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 414:14: -> ^( BoundarySpaceDeclaration ^( Literal Str[\"preserve\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:414:17: ^( BoundarySpaceDeclaration ^( Literal Str[\"preserve\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BoundarySpaceDeclaration, "BoundarySpaceDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:414:44: ^( Literal Str[\"preserve\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "preserve"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:415:7: STRIP
                    {
                    STRIP59=(Token)match(input,STRIP,FOLLOW_STRIP_in_boundarySpaceDecl2195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRIP.add(STRIP59);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 415:13: -> ^( BoundarySpaceDeclaration ^( Literal Str[\"strip\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:415:16: ^( BoundarySpaceDeclaration ^( Literal Str[\"strip\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BoundarySpaceDeclaration, "BoundarySpaceDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:415:43: ^( Literal Str[\"strip\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "strip"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boundarySpaceDecl"

    public static class defaultNamespaceDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultNamespaceDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:418:1: defaultNamespaceDecl : DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uri= uriLiteral -> {elementNamespaceDecl}? ^( DefaultElementNamespace ^( Literal $uri) ) -> ^( DefaultFunctionNamespace ^( Literal $uri) ) ;
    public final XQueryParser.defaultNamespaceDecl_return defaultNamespaceDecl() throws RecognitionException {
        XQueryParser.defaultNamespaceDecl_return retval = new XQueryParser.defaultNamespaceDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE60=null;
        Token DEFAULT61=null;
        Token ELEMENT62=null;
        Token FUNCTION63=null;
        Token NAMESPACE64=null;
        XQueryParser.uriLiteral_return uri = null;


        Object DECLARE60_tree=null;
        Object DEFAULT61_tree=null;
        Object ELEMENT62_tree=null;
        Object FUNCTION63_tree=null;
        Object NAMESPACE64_tree=null;
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");

        boolean elementNamespaceDecl = true;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:422:5: ( DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uri= uriLiteral -> {elementNamespaceDecl}? ^( DefaultElementNamespace ^( Literal $uri) ) -> ^( DefaultFunctionNamespace ^( Literal $uri) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:422:7: DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uri= uriLiteral
            {
            DECLARE60=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_defaultNamespaceDecl2235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE60);

            DEFAULT61=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultNamespaceDecl2237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT61);

            // org/brackit/xquery/compiler/parser/XQuery.g:422:23: ( ELEMENT | FUNCTION )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==ELEMENT) ) {
                alt16=1;
            }
            else if ( (LA16_0==FUNCTION) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:422:24: ELEMENT
                    {
                    ELEMENT62=(Token)match(input,ELEMENT,FOLLOW_ELEMENT_in_defaultNamespaceDecl2240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(ELEMENT62);


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:422:34: FUNCTION
                    {
                    FUNCTION63=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_defaultNamespaceDecl2244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION63);

                    if ( state.backtracking==0 ) {
                       elementNamespaceDecl = false; 
                    }

                    }
                    break;

            }

            NAMESPACE64=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultNamespaceDecl2249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE64);

            pushFollow(FOLLOW_uriLiteral_in_defaultNamespaceDecl2253);
            uri=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_uriLiteral.add(uri.getTree());


            // AST REWRITE
            // elements: uri, uri
            // token labels: 
            // rule labels: retval, uri
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_uri=new RewriteRuleSubtreeStream(adaptor,"rule uri",uri!=null?uri.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:5: -> {elementNamespaceDecl}? ^( DefaultElementNamespace ^( Literal $uri) )
            if (elementNamespaceDecl) {
                // org/brackit/xquery/compiler/parser/XQuery.g:423:32: ^( DefaultElementNamespace ^( Literal $uri) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:423:58: ^( Literal $uri)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_uri.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 424:5: -> ^( DefaultFunctionNamespace ^( Literal $uri) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:424:8: ^( DefaultFunctionNamespace ^( Literal $uri) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DefaultFunctionNamespace, "DefaultFunctionNamespace"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:424:35: ^( Literal $uri)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_uri.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultNamespaceDecl"

    public static class optionDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:426:1: optionDecl : DECLARE OPTION qName stringLiteral -> ^( OptionDeclaration qName ^( Literal stringLiteral ) ) ;
    public final XQueryParser.optionDecl_return optionDecl() throws RecognitionException {
        XQueryParser.optionDecl_return retval = new XQueryParser.optionDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE65=null;
        Token OPTION66=null;
        XQueryParser.qName_return qName67 = null;

        XQueryParser.stringLiteral_return stringLiteral68 = null;


        Object DECLARE65_tree=null;
        Object OPTION66_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_OPTION=new RewriteRuleTokenStream(adaptor,"token OPTION");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_stringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule stringLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:427:5: ( DECLARE OPTION qName stringLiteral -> ^( OptionDeclaration qName ^( Literal stringLiteral ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:427:7: DECLARE OPTION qName stringLiteral
            {
            DECLARE65=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_optionDecl2310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE65);

            OPTION66=(Token)match(input,OPTION,FOLLOW_OPTION_in_optionDecl2312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPTION.add(OPTION66);

            pushFollow(FOLLOW_qName_in_optionDecl2314);
            qName67=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qName.add(qName67.getTree());
            pushFollow(FOLLOW_stringLiteral_in_optionDecl2316);
            stringLiteral68=stringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stringLiteral.add(stringLiteral68.getTree());


            // AST REWRITE
            // elements: qName, stringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:42: -> ^( OptionDeclaration qName ^( Literal stringLiteral ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:427:45: ^( OptionDeclaration qName ^( Literal stringLiteral ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OptionDeclaration, "OptionDeclaration"), root_1);

                adaptor.addChild(root_1, stream_qName.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:427:71: ^( Literal stringLiteral )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_stringLiteral.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "optionDecl"

    public static class ftOptionDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftOptionDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:429:1: ftOptionDecl : {...}? => DECLARE FT_OPTION ( USING ftMatchOption )+ ;
    public final XQueryParser.ftOptionDecl_return ftOptionDecl() throws RecognitionException {
        XQueryParser.ftOptionDecl_return retval = new XQueryParser.ftOptionDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE69=null;
        Token FT_OPTION70=null;
        Token USING71=null;
        XQueryParser.ftMatchOption_return ftMatchOption72 = null;


        Object DECLARE69_tree=null;
        Object FT_OPTION70_tree=null;
        Object USING71_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:430:5: ({...}? => DECLARE FT_OPTION ( USING ftMatchOption )+ )
            // org/brackit/xquery/compiler/parser/XQuery.g:430:7: {...}? => DECLARE FT_OPTION ( USING ftMatchOption )+
            {
            root_0 = (Object)adaptor.nil();

            if ( !((fullText)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ftOptionDecl", "fullText");
            }
            DECLARE69=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_ftOptionDecl2402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE69_tree = (Object)adaptor.create(DECLARE69);
            adaptor.addChild(root_0, DECLARE69_tree);
            }
            FT_OPTION70=(Token)match(input,FT_OPTION,FOLLOW_FT_OPTION_in_ftOptionDecl2404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FT_OPTION70_tree = (Object)adaptor.create(FT_OPTION70);
            adaptor.addChild(root_0, FT_OPTION70_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:430:40: ( USING ftMatchOption )+
            int cnt17=0;
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==USING) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:430:41: USING ftMatchOption
            	    {
            	    USING71=(Token)match(input,USING,FOLLOW_USING_in_ftOptionDecl2407); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING71_tree = (Object)adaptor.create(USING71);
            	    adaptor.addChild(root_0, USING71_tree);
            	    }
            	    pushFollow(FOLLOW_ftMatchOption_in_ftOptionDecl2409);
            	    ftMatchOption72=ftMatchOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftMatchOption72.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        throw eee;
                }
                cnt17++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftOptionDecl"

    public static class orderingModeDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderingModeDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:432:1: orderingModeDecl : DECLARE ORDERING ( ORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"ordered\"] ) ) | UNORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"unordered\"] ) ) ) ;
    public final XQueryParser.orderingModeDecl_return orderingModeDecl() throws RecognitionException {
        XQueryParser.orderingModeDecl_return retval = new XQueryParser.orderingModeDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE73=null;
        Token ORDERING74=null;
        Token ORDERED75=null;
        Token UNORDERED76=null;

        Object DECLARE73_tree=null;
        Object ORDERING74_tree=null;
        Object ORDERED75_tree=null;
        Object UNORDERED76_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_ORDERING=new RewriteRuleTokenStream(adaptor,"token ORDERING");
        RewriteRuleTokenStream stream_ORDERED=new RewriteRuleTokenStream(adaptor,"token ORDERED");
        RewriteRuleTokenStream stream_UNORDERED=new RewriteRuleTokenStream(adaptor,"token UNORDERED");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:433:5: ( DECLARE ORDERING ( ORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"ordered\"] ) ) | UNORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"unordered\"] ) ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:433:7: DECLARE ORDERING ( ORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"ordered\"] ) ) | UNORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"unordered\"] ) ) )
            {
            DECLARE73=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_orderingModeDecl2427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE73);

            ORDERING74=(Token)match(input,ORDERING,FOLLOW_ORDERING_in_orderingModeDecl2429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDERING.add(ORDERING74);

            // org/brackit/xquery/compiler/parser/XQuery.g:434:5: ( ORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"ordered\"] ) ) | UNORDERED -> ^( OrderingModeDeclaration ^( Literal Str[\"unordered\"] ) ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==ORDERED) ) {
                alt18=1;
            }
            else if ( (LA18_0==UNORDERED) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:435:7: ORDERED
                    {
                    ORDERED75=(Token)match(input,ORDERED,FOLLOW_ORDERED_in_orderingModeDecl2443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDERED.add(ORDERED75);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 435:15: -> ^( OrderingModeDeclaration ^( Literal Str[\"ordered\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:435:18: ^( OrderingModeDeclaration ^( Literal Str[\"ordered\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrderingModeDeclaration, "OrderingModeDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:435:44: ^( Literal Str[\"ordered\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "ordered"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:436:7: UNORDERED
                    {
                    UNORDERED76=(Token)match(input,UNORDERED,FOLLOW_UNORDERED_in_orderingModeDecl2464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNORDERED.add(UNORDERED76);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 436:17: -> ^( OrderingModeDeclaration ^( Literal Str[\"unordered\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:436:20: ^( OrderingModeDeclaration ^( Literal Str[\"unordered\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrderingModeDeclaration, "OrderingModeDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:436:46: ^( Literal Str[\"unordered\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "unordered"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderingModeDecl"

    public static class emptyOrderDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "emptyOrderDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:439:1: emptyOrderDecl : DECLARE DEFAULT ORDER EMPTY ( GREATEST -> ^( EmptyOrderDeclaration ^( Literal Str[\"greatest\"] ) ) | LEAST -> ^( EmptyOrderDeclaration ^( Literal Str[\"least\"] ) ) ) ;
    public final XQueryParser.emptyOrderDecl_return emptyOrderDecl() throws RecognitionException {
        XQueryParser.emptyOrderDecl_return retval = new XQueryParser.emptyOrderDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE77=null;
        Token DEFAULT78=null;
        Token ORDER79=null;
        Token EMPTY80=null;
        Token GREATEST81=null;
        Token LEAST82=null;

        Object DECLARE77_tree=null;
        Object DEFAULT78_tree=null;
        Object ORDER79_tree=null;
        Object EMPTY80_tree=null;
        Object GREATEST81_tree=null;
        Object LEAST82_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_LEAST=new RewriteRuleTokenStream(adaptor,"token LEAST");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_GREATEST=new RewriteRuleTokenStream(adaptor,"token GREATEST");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_EMPTY=new RewriteRuleTokenStream(adaptor,"token EMPTY");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:440:5: ( DECLARE DEFAULT ORDER EMPTY ( GREATEST -> ^( EmptyOrderDeclaration ^( Literal Str[\"greatest\"] ) ) | LEAST -> ^( EmptyOrderDeclaration ^( Literal Str[\"least\"] ) ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:440:7: DECLARE DEFAULT ORDER EMPTY ( GREATEST -> ^( EmptyOrderDeclaration ^( Literal Str[\"greatest\"] ) ) | LEAST -> ^( EmptyOrderDeclaration ^( Literal Str[\"least\"] ) ) )
            {
            DECLARE77=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_emptyOrderDecl2499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE77);

            DEFAULT78=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_emptyOrderDecl2501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT78);

            ORDER79=(Token)match(input,ORDER,FOLLOW_ORDER_in_emptyOrderDecl2503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDER.add(ORDER79);

            EMPTY80=(Token)match(input,EMPTY,FOLLOW_EMPTY_in_emptyOrderDecl2505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMPTY.add(EMPTY80);

            // org/brackit/xquery/compiler/parser/XQuery.g:441:5: ( GREATEST -> ^( EmptyOrderDeclaration ^( Literal Str[\"greatest\"] ) ) | LEAST -> ^( EmptyOrderDeclaration ^( Literal Str[\"least\"] ) ) )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==GREATEST) ) {
                alt19=1;
            }
            else if ( (LA19_0==LEAST) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:442:5: GREATEST
                    {
                    GREATEST81=(Token)match(input,GREATEST,FOLLOW_GREATEST_in_emptyOrderDecl2517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATEST.add(GREATEST81);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 442:14: -> ^( EmptyOrderDeclaration ^( Literal Str[\"greatest\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:442:17: ^( EmptyOrderDeclaration ^( Literal Str[\"greatest\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EmptyOrderDeclaration, "EmptyOrderDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:442:41: ^( Literal Str[\"greatest\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "greatest"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:443:7: LEAST
                    {
                    LEAST82=(Token)match(input,LEAST,FOLLOW_LEAST_in_emptyOrderDecl2538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEAST.add(LEAST82);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 443:13: -> ^( EmptyOrderDeclaration ^( Literal Str[\"least\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:443:16: ^( EmptyOrderDeclaration ^( Literal Str[\"least\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EmptyOrderDeclaration, "EmptyOrderDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:443:40: ^( Literal Str[\"least\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "least"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "emptyOrderDecl"

    public static class copyNamespacesDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "copyNamespacesDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:446:1: copyNamespacesDecl : DECLARE COPY_NAMESPACES preserveMode ',' inheritMode -> ^( CopyNamespacesDeclaration preserveMode inheritMode ) ;
    public final XQueryParser.copyNamespacesDecl_return copyNamespacesDecl() throws RecognitionException {
        XQueryParser.copyNamespacesDecl_return retval = new XQueryParser.copyNamespacesDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE83=null;
        Token COPY_NAMESPACES84=null;
        Token char_literal86=null;
        XQueryParser.preserveMode_return preserveMode85 = null;

        XQueryParser.inheritMode_return inheritMode87 = null;


        Object DECLARE83_tree=null;
        Object COPY_NAMESPACES84_tree=null;
        Object char_literal86_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_COPY_NAMESPACES=new RewriteRuleTokenStream(adaptor,"token COPY_NAMESPACES");
        RewriteRuleSubtreeStream stream_inheritMode=new RewriteRuleSubtreeStream(adaptor,"rule inheritMode");
        RewriteRuleSubtreeStream stream_preserveMode=new RewriteRuleSubtreeStream(adaptor,"rule preserveMode");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:447:5: ( DECLARE COPY_NAMESPACES preserveMode ',' inheritMode -> ^( CopyNamespacesDeclaration preserveMode inheritMode ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:447:7: DECLARE COPY_NAMESPACES preserveMode ',' inheritMode
            {
            DECLARE83=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_copyNamespacesDecl2573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE83);

            COPY_NAMESPACES84=(Token)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl2575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COPY_NAMESPACES.add(COPY_NAMESPACES84);

            pushFollow(FOLLOW_preserveMode_in_copyNamespacesDecl2577);
            preserveMode85=preserveMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_preserveMode.add(preserveMode85.getTree());
            char_literal86=(Token)match(input,409,FOLLOW_409_in_copyNamespacesDecl2579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_409.add(char_literal86);

            pushFollow(FOLLOW_inheritMode_in_copyNamespacesDecl2581);
            inheritMode87=inheritMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inheritMode.add(inheritMode87.getTree());


            // AST REWRITE
            // elements: preserveMode, inheritMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:5: -> ^( CopyNamespacesDeclaration preserveMode inheritMode )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:448:8: ^( CopyNamespacesDeclaration preserveMode inheritMode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CopyNamespacesDeclaration, "CopyNamespacesDeclaration"), root_1);

                adaptor.addChild(root_1, stream_preserveMode.nextTree());
                adaptor.addChild(root_1, stream_inheritMode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "copyNamespacesDecl"

    public static class decimalFormatDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decimalFormatDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:450:1: decimalFormatDecl : DECLARE ( ( DECIMAL_FORMAT qName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( dfPropertyName SymEq stringLiteral )* ;
    public final XQueryParser.decimalFormatDecl_return decimalFormatDecl() throws RecognitionException {
        XQueryParser.decimalFormatDecl_return retval = new XQueryParser.decimalFormatDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE88=null;
        Token DECIMAL_FORMAT89=null;
        Token DEFAULT91=null;
        Token DECIMAL_FORMAT92=null;
        Token SymEq94=null;
        XQueryParser.qName_return qName90 = null;

        XQueryParser.dfPropertyName_return dfPropertyName93 = null;

        XQueryParser.stringLiteral_return stringLiteral95 = null;


        Object DECLARE88_tree=null;
        Object DECIMAL_FORMAT89_tree=null;
        Object DEFAULT91_tree=null;
        Object DECIMAL_FORMAT92_tree=null;
        Object SymEq94_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:451:5: ( DECLARE ( ( DECIMAL_FORMAT qName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( dfPropertyName SymEq stringLiteral )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:451:7: DECLARE ( ( DECIMAL_FORMAT qName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( dfPropertyName SymEq stringLiteral )*
            {
            root_0 = (Object)adaptor.nil();

            DECLARE88=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_decimalFormatDecl2660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE88_tree = (Object)adaptor.create(DECLARE88);
            adaptor.addChild(root_0, DECLARE88_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:451:15: ( ( DECIMAL_FORMAT qName ) | ( DEFAULT DECIMAL_FORMAT ) )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==DECIMAL_FORMAT) ) {
                alt20=1;
            }
            else if ( (LA20_0==DEFAULT) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:451:16: ( DECIMAL_FORMAT qName )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:451:16: ( DECIMAL_FORMAT qName )
                    // org/brackit/xquery/compiler/parser/XQuery.g:451:17: DECIMAL_FORMAT qName
                    {
                    DECIMAL_FORMAT89=(Token)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_decimalFormatDecl2664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT89_tree = (Object)adaptor.create(DECIMAL_FORMAT89);
                    adaptor.addChild(root_0, DECIMAL_FORMAT89_tree);
                    }
                    pushFollow(FOLLOW_qName_in_decimalFormatDecl2666);
                    qName90=qName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qName90.getTree());

                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:451:41: ( DEFAULT DECIMAL_FORMAT )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:451:41: ( DEFAULT DECIMAL_FORMAT )
                    // org/brackit/xquery/compiler/parser/XQuery.g:451:42: DEFAULT DECIMAL_FORMAT
                    {
                    DEFAULT91=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_decimalFormatDecl2672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT91_tree = (Object)adaptor.create(DEFAULT91);
                    adaptor.addChild(root_0, DEFAULT91_tree);
                    }
                    DECIMAL_FORMAT92=(Token)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_decimalFormatDecl2674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT92_tree = (Object)adaptor.create(DECIMAL_FORMAT92);
                    adaptor.addChild(root_0, DECIMAL_FORMAT92_tree);
                    }

                    }


                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:452:7: ( dfPropertyName SymEq stringLiteral )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( ((LA21_0>=DECIMAL_SEPARATOR && LA21_0<=PATTERN_SEPARATOR)) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:452:8: dfPropertyName SymEq stringLiteral
            	    {
            	    pushFollow(FOLLOW_dfPropertyName_in_decimalFormatDecl2685);
            	    dfPropertyName93=dfPropertyName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dfPropertyName93.getTree());
            	    SymEq94=(Token)match(input,SymEq,FOLLOW_SymEq_in_decimalFormatDecl2687); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SymEq94_tree = (Object)adaptor.create(SymEq94);
            	    adaptor.addChild(root_0, SymEq94_tree);
            	    }
            	    pushFollow(FOLLOW_stringLiteral_in_decimalFormatDecl2689);
            	    stringLiteral95=stringLiteral();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral95.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decimalFormatDecl"

    public static class dfPropertyName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dfPropertyName"
    // org/brackit/xquery/compiler/parser/XQuery.g:454:1: dfPropertyName : ( DECIMAL_SEPARATOR | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | PERCENT | PER_MILLE | ZERO_DIGIT | DIGIT | PATTERN_SEPARATOR );
    public final XQueryParser.dfPropertyName_return dfPropertyName() throws RecognitionException {
        XQueryParser.dfPropertyName_return retval = new XQueryParser.dfPropertyName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set96=null;

        Object set96_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:455:5: ( DECIMAL_SEPARATOR | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | PERCENT | PER_MILLE | ZERO_DIGIT | DIGIT | PATTERN_SEPARATOR )
            // org/brackit/xquery/compiler/parser/XQuery.g:
            {
            root_0 = (Object)adaptor.nil();

            set96=(Token)input.LT(1);
            if ( (input.LA(1)>=DECIMAL_SEPARATOR && input.LA(1)<=PATTERN_SEPARATOR) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set96));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dfPropertyName"

    public static class preserveMode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preserveMode"
    // org/brackit/xquery/compiler/parser/XQuery.g:466:1: preserveMode : ( PRESERVE -> ^( Literal Str[\"preserve\"] ) | NO_PRESERVE -> ^( Literal Str[\"nopreserve\"] ) );
    public final XQueryParser.preserveMode_return preserveMode() throws RecognitionException {
        XQueryParser.preserveMode_return retval = new XQueryParser.preserveMode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PRESERVE97=null;
        Token NO_PRESERVE98=null;

        Object PRESERVE97_tree=null;
        Object NO_PRESERVE98_tree=null;
        RewriteRuleTokenStream stream_PRESERVE=new RewriteRuleTokenStream(adaptor,"token PRESERVE");
        RewriteRuleTokenStream stream_NO_PRESERVE=new RewriteRuleTokenStream(adaptor,"token NO_PRESERVE");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:467:5: ( PRESERVE -> ^( Literal Str[\"preserve\"] ) | NO_PRESERVE -> ^( Literal Str[\"nopreserve\"] ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==PRESERVE) ) {
                alt22=1;
            }
            else if ( (LA22_0==NO_PRESERVE) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:467:7: PRESERVE
                    {
                    PRESERVE97=(Token)match(input,PRESERVE,FOLLOW_PRESERVE_in_preserveMode2847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRESERVE.add(PRESERVE97);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 467:16: -> ^( Literal Str[\"preserve\"] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:467:19: ^( Literal Str[\"preserve\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, "preserve"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:467:48: NO_PRESERVE
                    {
                    NO_PRESERVE98=(Token)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_preserveMode2860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NO_PRESERVE.add(NO_PRESERVE98);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 467:60: -> ^( Literal Str[\"nopreserve\"] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:467:63: ^( Literal Str[\"nopreserve\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, "nopreserve"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preserveMode"

    public static class inheritMode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inheritMode"
    // org/brackit/xquery/compiler/parser/XQuery.g:469:1: inheritMode : ( INHERIT -> ^( Literal Str[\"inherit\"] ) | NO_INHERIT -> ^( Literal Str[\"noinherit\"] ) );
    public final XQueryParser.inheritMode_return inheritMode() throws RecognitionException {
        XQueryParser.inheritMode_return retval = new XQueryParser.inheritMode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INHERIT99=null;
        Token NO_INHERIT100=null;

        Object INHERIT99_tree=null;
        Object NO_INHERIT100_tree=null;
        RewriteRuleTokenStream stream_NO_INHERIT=new RewriteRuleTokenStream(adaptor,"token NO_INHERIT");
        RewriteRuleTokenStream stream_INHERIT=new RewriteRuleTokenStream(adaptor,"token INHERIT");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:470:5: ( INHERIT -> ^( Literal Str[\"inherit\"] ) | NO_INHERIT -> ^( Literal Str[\"noinherit\"] ) )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==INHERIT) ) {
                alt23=1;
            }
            else if ( (LA23_0==NO_INHERIT) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:470:7: INHERIT
                    {
                    INHERIT99=(Token)match(input,INHERIT,FOLLOW_INHERIT_in_inheritMode2885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INHERIT.add(INHERIT99);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 470:15: -> ^( Literal Str[\"inherit\"] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:470:18: ^( Literal Str[\"inherit\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, "inherit"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:470:46: NO_INHERIT
                    {
                    NO_INHERIT100=(Token)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_inheritMode2898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NO_INHERIT.add(NO_INHERIT100);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 470:57: -> ^( Literal Str[\"noinherit\"] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:470:60: ^( Literal Str[\"noinherit\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, "noinherit"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inheritMode"

    public static class defaultCollationDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultCollationDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:472:1: defaultCollationDecl : DECLARE DEFAULT COLLATION uriLiteral -> ^( CollationDeclaration ^( Literal uriLiteral ) ) ;
    public final XQueryParser.defaultCollationDecl_return defaultCollationDecl() throws RecognitionException {
        XQueryParser.defaultCollationDecl_return retval = new XQueryParser.defaultCollationDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE101=null;
        Token DEFAULT102=null;
        Token COLLATION103=null;
        XQueryParser.uriLiteral_return uriLiteral104 = null;


        Object DECLARE101_tree=null;
        Object DEFAULT102_tree=null;
        Object COLLATION103_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_COLLATION=new RewriteRuleTokenStream(adaptor,"token COLLATION");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:473:5: ( DECLARE DEFAULT COLLATION uriLiteral -> ^( CollationDeclaration ^( Literal uriLiteral ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:473:7: DECLARE DEFAULT COLLATION uriLiteral
            {
            DECLARE101=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_defaultCollationDecl2923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE101);

            DEFAULT102=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultCollationDecl2925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT102);

            COLLATION103=(Token)match(input,COLLATION,FOLLOW_COLLATION_in_defaultCollationDecl2927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLLATION.add(COLLATION103);

            pushFollow(FOLLOW_uriLiteral_in_defaultCollationDecl2929);
            uriLiteral104=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_uriLiteral.add(uriLiteral104.getTree());


            // AST REWRITE
            // elements: uriLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:44: -> ^( CollationDeclaration ^( Literal uriLiteral ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:473:47: ^( CollationDeclaration ^( Literal uriLiteral ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CollationDeclaration, "CollationDeclaration"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:473:70: ^( Literal uriLiteral )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_uriLiteral.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultCollationDecl"

    public static class baseURIDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "baseURIDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:475:1: baseURIDecl : DECLARE BASE_URI uriLiteral -> ^( BaseURIDeclaration ^( Literal uriLiteral ) ) ;
    public final XQueryParser.baseURIDecl_return baseURIDecl() throws RecognitionException {
        XQueryParser.baseURIDecl_return retval = new XQueryParser.baseURIDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE105=null;
        Token BASE_URI106=null;
        XQueryParser.uriLiteral_return uriLiteral107 = null;


        Object DECLARE105_tree=null;
        Object BASE_URI106_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:476:5: ( DECLARE BASE_URI uriLiteral -> ^( BaseURIDeclaration ^( Literal uriLiteral ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:476:7: DECLARE BASE_URI uriLiteral
            {
            DECLARE105=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_baseURIDecl2957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE105);

            BASE_URI106=(Token)match(input,BASE_URI,FOLLOW_BASE_URI_in_baseURIDecl2959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE_URI.add(BASE_URI106);

            pushFollow(FOLLOW_uriLiteral_in_baseURIDecl2961);
            uriLiteral107=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_uriLiteral.add(uriLiteral107.getTree());


            // AST REWRITE
            // elements: uriLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:35: -> ^( BaseURIDeclaration ^( Literal uriLiteral ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:476:38: ^( BaseURIDeclaration ^( Literal uriLiteral ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BaseURIDeclaration, "BaseURIDeclaration"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:476:59: ^( Literal uriLiteral )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_uriLiteral.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "baseURIDecl"

    public static class schemaImport_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schemaImport"
    // org/brackit/xquery/compiler/parser/XQuery.g:478:1: schemaImport : IMPORT SCHEMA ( schemaPrefix )? uri= uriLiteral ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )? -> ^( SchemaImport ( schemaPrefix )? $uri ( $at)* ) ;
    public final XQueryParser.schemaImport_return schemaImport() throws RecognitionException {
        XQueryParser.schemaImport_return retval = new XQueryParser.schemaImport_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IMPORT108=null;
        Token SCHEMA109=null;
        Token AT111=null;
        Token char_literal112=null;
        List list_at=null;
        XQueryParser.uriLiteral_return uri = null;

        XQueryParser.schemaPrefix_return schemaPrefix110 = null;

        RuleReturnScope at = null;
        Object IMPORT108_tree=null;
        Object SCHEMA109_tree=null;
        Object AT111_tree=null;
        Object char_literal112_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleSubtreeStream stream_schemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule schemaPrefix");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:479:5: ( IMPORT SCHEMA ( schemaPrefix )? uri= uriLiteral ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )? -> ^( SchemaImport ( schemaPrefix )? $uri ( $at)* ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:479:7: IMPORT SCHEMA ( schemaPrefix )? uri= uriLiteral ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )?
            {
            IMPORT108=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_schemaImport2989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(IMPORT108);

            SCHEMA109=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_schemaImport2991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA109);

            // org/brackit/xquery/compiler/parser/XQuery.g:479:21: ( schemaPrefix )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==NAMESPACE||LA24_0==DEFAULT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:479:21: schemaPrefix
                    {
                    pushFollow(FOLLOW_schemaPrefix_in_schemaImport2993);
                    schemaPrefix110=schemaPrefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_schemaPrefix.add(schemaPrefix110.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_schemaImport2998);
            uri=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_uriLiteral.add(uri.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:480:8: ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==AT) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:480:9: AT at+= uriLiteral ( ',' at+= uriLiteral )*
                    {
                    AT111=(Token)match(input,AT,FOLLOW_AT_in_schemaImport3009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(AT111);

                    pushFollow(FOLLOW_uriLiteral_in_schemaImport3013);
                    at=uriLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_uriLiteral.add(at.getTree());
                    if (list_at==null) list_at=new ArrayList();
                    list_at.add(at.getTree());

                    // org/brackit/xquery/compiler/parser/XQuery.g:480:27: ( ',' at+= uriLiteral )*
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==409) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:480:28: ',' at+= uriLiteral
                    	    {
                    	    char_literal112=(Token)match(input,409,FOLLOW_409_in_schemaImport3016); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_409.add(char_literal112);

                    	    pushFollow(FOLLOW_uriLiteral_in_schemaImport3020);
                    	    at=uriLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_uriLiteral.add(at.getTree());
                    	    if (list_at==null) list_at=new ArrayList();
                    	    list_at.add(at.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: uri, at, schemaPrefix
            // token labels: 
            // rule labels: retval, uri
            // token list labels: 
            // rule list labels: at
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_uri=new RewriteRuleSubtreeStream(adaptor,"rule uri",uri!=null?uri.tree:null);
            RewriteRuleSubtreeStream stream_at=new RewriteRuleSubtreeStream(adaptor,"token at",list_at);
            root_0 = (Object)adaptor.nil();
            // 480:51: -> ^( SchemaImport ( schemaPrefix )? $uri ( $at)* )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:480:54: ^( SchemaImport ( schemaPrefix )? $uri ( $at)* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:480:69: ( schemaPrefix )?
                if ( stream_schemaPrefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_schemaPrefix.nextTree());

                }
                stream_schemaPrefix.reset();
                adaptor.addChild(root_1, stream_uri.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:480:88: ( $at)*
                while ( stream_at.hasNext() ) {
                    adaptor.addChild(root_1, stream_at.nextTree());

                }
                stream_at.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "schemaImport"

    public static class schemaPrefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schemaPrefix"
    // org/brackit/xquery/compiler/parser/XQuery.g:482:1: schemaPrefix : ( ( NAMESPACE ncName SymEq ) -> ^( Namespace ncName ) | DEFAULT ELEMENT NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.schemaPrefix_return schemaPrefix() throws RecognitionException {
        XQueryParser.schemaPrefix_return retval = new XQueryParser.schemaPrefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NAMESPACE113=null;
        Token SymEq115=null;
        Token DEFAULT116=null;
        Token ELEMENT117=null;
        Token NAMESPACE118=null;
        XQueryParser.ncName_return ncName114 = null;


        Object NAMESPACE113_tree=null;
        Object SymEq115_tree=null;
        Object DEFAULT116_tree=null;
        Object ELEMENT117_tree=null;
        Object NAMESPACE118_tree=null;
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_SymEq=new RewriteRuleTokenStream(adaptor,"token SymEq");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:483:5: ( ( NAMESPACE ncName SymEq ) -> ^( Namespace ncName ) | DEFAULT ELEMENT NAMESPACE -> DefaultElementNamespace )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==NAMESPACE) ) {
                alt27=1;
            }
            else if ( (LA27_0==DEFAULT) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:483:7: ( NAMESPACE ncName SymEq )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:483:7: ( NAMESPACE ncName SymEq )
                    // org/brackit/xquery/compiler/parser/XQuery.g:483:8: NAMESPACE ncName SymEq
                    {
                    NAMESPACE113=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix3057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE113);

                    pushFollow(FOLLOW_ncName_in_schemaPrefix3059);
                    ncName114=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncName114.getTree());
                    SymEq115=(Token)match(input,SymEq,FOLLOW_SymEq_in_schemaPrefix3061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SymEq.add(SymEq115);


                    }



                    // AST REWRITE
                    // elements: ncName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 483:32: -> ^( Namespace ncName )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:483:35: ^( Namespace ncName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Namespace, "Namespace"), root_1);

                        adaptor.addChild(root_1, stream_ncName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:484:7: DEFAULT ELEMENT NAMESPACE
                    {
                    DEFAULT116=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_schemaPrefix3078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT116);

                    ELEMENT117=(Token)match(input,ELEMENT,FOLLOW_ELEMENT_in_schemaPrefix3080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(ELEMENT117);

                    NAMESPACE118=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix3082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE118);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 484:33: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "schemaPrefix"

    public static class moduleImport_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleImport"
    // org/brackit/xquery/compiler/parser/XQuery.g:486:1: moduleImport : IMPORT MODULE ( NAMESPACE ncName SymEq )? uri= uriLiteral ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )? -> {!hasPrefix}? ^( ModuleImport $uri ( $at)* ) -> ^( ModuleImport ^( Namespace ncName ) $uri ( $at)* ) ;
    public final XQueryParser.moduleImport_return moduleImport() throws RecognitionException {
        XQueryParser.moduleImport_return retval = new XQueryParser.moduleImport_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IMPORT119=null;
        Token MODULE120=null;
        Token NAMESPACE121=null;
        Token SymEq123=null;
        Token AT124=null;
        Token char_literal125=null;
        List list_at=null;
        XQueryParser.uriLiteral_return uri = null;

        XQueryParser.ncName_return ncName122 = null;

        RuleReturnScope at = null;
        Object IMPORT119_tree=null;
        Object MODULE120_tree=null;
        Object NAMESPACE121_tree=null;
        Object SymEq123_tree=null;
        Object AT124_tree=null;
        Object char_literal125_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SymEq=new RewriteRuleTokenStream(adaptor,"token SymEq");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");

        boolean hasPrefix = false;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:490:5: ( IMPORT MODULE ( NAMESPACE ncName SymEq )? uri= uriLiteral ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )? -> {!hasPrefix}? ^( ModuleImport $uri ( $at)* ) -> ^( ModuleImport ^( Namespace ncName ) $uri ( $at)* ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:490:7: IMPORT MODULE ( NAMESPACE ncName SymEq )? uri= uriLiteral ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )?
            {
            IMPORT119=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_moduleImport3107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(IMPORT119);

            MODULE120=(Token)match(input,MODULE,FOLLOW_MODULE_in_moduleImport3109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(MODULE120);

            // org/brackit/xquery/compiler/parser/XQuery.g:490:21: ( NAMESPACE ncName SymEq )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==NAMESPACE) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:490:22: NAMESPACE ncName SymEq
                    {
                    NAMESPACE121=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleImport3112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE121);

                    pushFollow(FOLLOW_ncName_in_moduleImport3114);
                    ncName122=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncName122.getTree());
                    SymEq123=(Token)match(input,SymEq,FOLLOW_SymEq_in_moduleImport3116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SymEq.add(SymEq123);

                    if ( state.backtracking==0 ) {
                       hasPrefix = true; 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_moduleImport3124);
            uri=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_uriLiteral.add(uri.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:491:7: ( AT at+= uriLiteral ( ',' at+= uriLiteral )* )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==AT) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:491:8: AT at+= uriLiteral ( ',' at+= uriLiteral )*
                    {
                    AT124=(Token)match(input,AT,FOLLOW_AT_in_moduleImport3133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(AT124);

                    pushFollow(FOLLOW_uriLiteral_in_moduleImport3137);
                    at=uriLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_uriLiteral.add(at.getTree());
                    if (list_at==null) list_at=new ArrayList();
                    list_at.add(at.getTree());

                    // org/brackit/xquery/compiler/parser/XQuery.g:491:26: ( ',' at+= uriLiteral )*
                    loop29:
                    do {
                        int alt29=2;
                        int LA29_0 = input.LA(1);

                        if ( (LA29_0==409) ) {
                            alt29=1;
                        }


                        switch (alt29) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:491:27: ',' at+= uriLiteral
                    	    {
                    	    char_literal125=(Token)match(input,409,FOLLOW_409_in_moduleImport3140); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_409.add(char_literal125);

                    	    pushFollow(FOLLOW_uriLiteral_in_moduleImport3144);
                    	    at=uriLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_uriLiteral.add(at.getTree());
                    	    if (list_at==null) list_at=new ArrayList();
                    	    list_at.add(at.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop29;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: uri, at, at, ncName, uri
            // token labels: 
            // rule labels: retval, uri
            // token list labels: 
            // rule list labels: at
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_uri=new RewriteRuleSubtreeStream(adaptor,"rule uri",uri!=null?uri.tree:null);
            RewriteRuleSubtreeStream stream_at=new RewriteRuleSubtreeStream(adaptor,"token at",list_at);
            root_0 = (Object)adaptor.nil();
            // 492:7: -> {!hasPrefix}? ^( ModuleImport $uri ( $at)* )
            if (!hasPrefix) {
                // org/brackit/xquery/compiler/parser/XQuery.g:492:24: ^( ModuleImport $uri ( $at)* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                adaptor.addChild(root_1, stream_uri.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:492:44: ( $at)*
                while ( stream_at.hasNext() ) {
                    adaptor.addChild(root_1, stream_at.nextTree());

                }
                stream_at.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 493:7: -> ^( ModuleImport ^( Namespace ncName ) $uri ( $at)* )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:493:10: ^( ModuleImport ^( Namespace ncName ) $uri ( $at)* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:493:25: ^( Namespace ncName )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Namespace, "Namespace"), root_2);

                adaptor.addChild(root_2, stream_ncName.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_uri.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:493:50: ( $at)*
                while ( stream_at.hasNext() ) {
                    adaptor.addChild(root_1, stream_at.nextTree());

                }
                stream_at.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleImport"

    public static class varDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:495:1: varDecl : varOrConst '$' name= qName ( typeDeclaration )? declVarValue -> ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? declVarValue ) ;
    public final XQueryParser.varDecl_return varDecl() throws RecognitionException {
        XQueryParser.varDecl_return retval = new XQueryParser.varDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal127=null;
        XQueryParser.qName_return name = null;

        XQueryParser.varOrConst_return varOrConst126 = null;

        XQueryParser.typeDeclaration_return typeDeclaration128 = null;

        XQueryParser.declVarValue_return declVarValue129 = null;


        Object char_literal127_tree=null;
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_declVarValue=new RewriteRuleSubtreeStream(adaptor,"rule declVarValue");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        RewriteRuleSubtreeStream stream_varOrConst=new RewriteRuleSubtreeStream(adaptor,"rule varOrConst");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:496:5: ( varOrConst '$' name= qName ( typeDeclaration )? declVarValue -> ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? declVarValue ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:497:2: varOrConst '$' name= qName ( typeDeclaration )? declVarValue
            {
            pushFollow(FOLLOW_varOrConst_in_varDecl3211);
            varOrConst126=varOrConst();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrConst.add(varOrConst126.getTree());
            char_literal127=(Token)match(input,411,FOLLOW_411_in_varDecl3213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal127);

            pushFollow(FOLLOW_qName_in_varDecl3217);
            name=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qName.add(name.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:497:28: ( typeDeclaration )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==AS) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:497:28: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_varDecl3219);
                    typeDeclaration128=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration128.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_declVarValue_in_varDecl3222);
            declVarValue129=declVarValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declVarValue.add(declVarValue129.getTree());


            // AST REWRITE
            // elements: typeDeclaration, declVarValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:2: -> ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? declVarValue )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:498:5: ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? declVarValue )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypedVariableDeclaration, "TypedVariableDeclaration"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))));
                // org/brackit/xquery/compiler/parser/XQuery.g:498:72: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_1, stream_declVarValue.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varDecl"

    public static class declVarValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declVarValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:501:1: declVarValue : ( ':=' exprSingle -> exprSingle | EXTERNAL externalDefaultValue -> ^( ExternalVariable ( externalDefaultValue )? ) );
    public final XQueryParser.declVarValue_return declVarValue() throws RecognitionException {
        XQueryParser.declVarValue_return retval = new XQueryParser.declVarValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal130=null;
        Token EXTERNAL132=null;
        XQueryParser.exprSingle_return exprSingle131 = null;

        XQueryParser.externalDefaultValue_return externalDefaultValue133 = null;


        Object string_literal130_tree=null;
        Object EXTERNAL132_tree=null;
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_412=new RewriteRuleTokenStream(adaptor,"token 412");
        RewriteRuleSubtreeStream stream_externalDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule externalDefaultValue");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:502:5: ( ':=' exprSingle -> exprSingle | EXTERNAL externalDefaultValue -> ^( ExternalVariable ( externalDefaultValue )? ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==412) ) {
                alt32=1;
            }
            else if ( (LA32_0==EXTERNAL) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:502:7: ':=' exprSingle
                    {
                    string_literal130=(Token)match(input,412,FOLLOW_412_in_declVarValue3257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_412.add(string_literal130);

                    pushFollow(FOLLOW_exprSingle_in_declVarValue3259);
                    exprSingle131=exprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle131.getTree());


                    // AST REWRITE
                    // elements: exprSingle
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 502:23: -> exprSingle
                    {
                        adaptor.addChild(root_0, stream_exprSingle.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:503:7: EXTERNAL externalDefaultValue
                    {
                    EXTERNAL132=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_declVarValue3272); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTERNAL.add(EXTERNAL132);

                    pushFollow(FOLLOW_externalDefaultValue_in_declVarValue3274);
                    externalDefaultValue133=externalDefaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_externalDefaultValue.add(externalDefaultValue133.getTree());


                    // AST REWRITE
                    // elements: externalDefaultValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 503:37: -> ^( ExternalVariable ( externalDefaultValue )? )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:503:40: ^( ExternalVariable ( externalDefaultValue )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ExternalVariable, "ExternalVariable"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:503:59: ( externalDefaultValue )?
                        if ( stream_externalDefaultValue.hasNext() ) {
                            adaptor.addChild(root_1, stream_externalDefaultValue.nextTree());

                        }
                        stream_externalDefaultValue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "declVarValue"

    public static class varOrConst_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrConst"
    // org/brackit/xquery/compiler/parser/XQuery.g:506:1: varOrConst : ( VARIABLE | {...}? => CONSTANT );
    public final XQueryParser.varOrConst_return varOrConst() throws RecognitionException {
        XQueryParser.varOrConst_return retval = new XQueryParser.varOrConst_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token VARIABLE134=null;
        Token CONSTANT135=null;

        Object VARIABLE134_tree=null;
        Object CONSTANT135_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:507:5: ( VARIABLE | {...}? => CONSTANT )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==VARIABLE) ) {
                alt33=1;
            }
            else if ( (LA33_0==CONSTANT) && ((scripting))) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:507:7: VARIABLE
                    {
                    root_0 = (Object)adaptor.nil();

                    VARIABLE134=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_varOrConst3300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE134_tree = (Object)adaptor.create(VARIABLE134);
                    adaptor.addChild(root_0, VARIABLE134_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:508:7: {...}? => CONSTANT
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((scripting)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "varOrConst", "scripting");
                    }
                    CONSTANT135=(Token)match(input,CONSTANT,FOLLOW_CONSTANT_in_varOrConst3312); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONSTANT135_tree = (Object)adaptor.create(CONSTANT135);
                    adaptor.addChild(root_0, CONSTANT135_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varOrConst"

    public static class externalDefaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "externalDefaultValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:510:1: externalDefaultValue : ({...}? => ':=' varDefaultValue -> varDefaultValue | );
    public final XQueryParser.externalDefaultValue_return externalDefaultValue() throws RecognitionException {
        XQueryParser.externalDefaultValue_return retval = new XQueryParser.externalDefaultValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal136=null;
        XQueryParser.varDefaultValue_return varDefaultValue137 = null;


        Object string_literal136_tree=null;
        RewriteRuleTokenStream stream_412=new RewriteRuleTokenStream(adaptor,"token 412");
        RewriteRuleSubtreeStream stream_varDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule varDefaultValue");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:511:5: ({...}? => ':=' varDefaultValue -> varDefaultValue | )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==412) && ((xqVersion==XQUERY_3_0))) {
                alt34=1;
            }
            else if ( (LA34_0==406) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:511:7: {...}? => ':=' varDefaultValue
                    {
                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "externalDefaultValue", "xqVersion==XQUERY_3_0");
                    }
                    string_literal136=(Token)match(input,412,FOLLOW_412_in_externalDefaultValue3365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_412.add(string_literal136);

                    pushFollow(FOLLOW_varDefaultValue_in_externalDefaultValue3367);
                    varDefaultValue137=varDefaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varDefaultValue.add(varDefaultValue137.getTree());


                    // AST REWRITE
                    // elements: varDefaultValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 511:56: -> varDefaultValue
                    {
                        adaptor.addChild(root_0, stream_varDefaultValue.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:513:5: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "externalDefaultValue"

    public static class varValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:514:1: varValue : exprSingle ;
    public final XQueryParser.varValue_return varValue() throws RecognitionException {
        XQueryParser.varValue_return retval = new XQueryParser.varValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.exprSingle_return exprSingle138 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:515:5: ( exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:515:7: exprSingle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_varValue3461);
            exprSingle138=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle138.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varValue"

    public static class varDefaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varDefaultValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:517:1: varDefaultValue : exprSingle ;
    public final XQueryParser.varDefaultValue_return varDefaultValue() throws RecognitionException {
        XQueryParser.varDefaultValue_return retval = new XQueryParser.varDefaultValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.exprSingle_return exprSingle139 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:518:5: ( exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:518:7: exprSingle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_varDefaultValue3528);
            exprSingle139=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle139.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varDefaultValue"

    public static class constructionDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructionDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:520:1: constructionDecl : DECLARE CONSTRUCTION ( STRIP -> ^( ConstructionDeclaration ^( Literal Str[\"strip\"] ) ) | PRESERVE -> ^( ConstructionDeclaration ^( Literal Str[\"preserve\"] ) ) ) ;
    public final XQueryParser.constructionDecl_return constructionDecl() throws RecognitionException {
        XQueryParser.constructionDecl_return retval = new XQueryParser.constructionDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE140=null;
        Token CONSTRUCTION141=null;
        Token STRIP142=null;
        Token PRESERVE143=null;

        Object DECLARE140_tree=null;
        Object CONSTRUCTION141_tree=null;
        Object STRIP142_tree=null;
        Object PRESERVE143_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_CONSTRUCTION=new RewriteRuleTokenStream(adaptor,"token CONSTRUCTION");
        RewriteRuleTokenStream stream_STRIP=new RewriteRuleTokenStream(adaptor,"token STRIP");
        RewriteRuleTokenStream stream_PRESERVE=new RewriteRuleTokenStream(adaptor,"token PRESERVE");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:521:5: ( DECLARE CONSTRUCTION ( STRIP -> ^( ConstructionDeclaration ^( Literal Str[\"strip\"] ) ) | PRESERVE -> ^( ConstructionDeclaration ^( Literal Str[\"preserve\"] ) ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:521:7: DECLARE CONSTRUCTION ( STRIP -> ^( ConstructionDeclaration ^( Literal Str[\"strip\"] ) ) | PRESERVE -> ^( ConstructionDeclaration ^( Literal Str[\"preserve\"] ) ) )
            {
            DECLARE140=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_constructionDecl3544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE140);

            CONSTRUCTION141=(Token)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_constructionDecl3546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONSTRUCTION.add(CONSTRUCTION141);

            // org/brackit/xquery/compiler/parser/XQuery.g:522:5: ( STRIP -> ^( ConstructionDeclaration ^( Literal Str[\"strip\"] ) ) | PRESERVE -> ^( ConstructionDeclaration ^( Literal Str[\"preserve\"] ) ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==STRIP) ) {
                alt35=1;
            }
            else if ( (LA35_0==PRESERVE) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:523:5: STRIP
                    {
                    STRIP142=(Token)match(input,STRIP,FOLLOW_STRIP_in_constructionDecl3559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRIP.add(STRIP142);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 523:11: -> ^( ConstructionDeclaration ^( Literal Str[\"strip\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:523:14: ^( ConstructionDeclaration ^( Literal Str[\"strip\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ConstructionDeclaration, "ConstructionDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:523:40: ^( Literal Str[\"strip\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "strip"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:524:7: PRESERVE
                    {
                    PRESERVE143=(Token)match(input,PRESERVE,FOLLOW_PRESERVE_in_constructionDecl3580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRESERVE.add(PRESERVE143);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 524:16: -> ^( ConstructionDeclaration ^( Literal Str[\"preserve\"] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:524:19: ^( ConstructionDeclaration ^( Literal Str[\"preserve\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ConstructionDeclaration, "ConstructionDeclaration"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:524:45: ^( Literal Str[\"preserve\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, "preserve"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructionDecl"

    public static class functionDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:527:1: functionDecl : ( ( xq3FunModifier )? ( updateFunModifier | scriptingFunModifier )? FUNCTION fqName '(' ( paramList )? ')' ( typeDeclaration )? ( enclosedExpr | EXTERNAL ) -> ^( FunctionDeclaration fqName ( typeDeclaration )? ( xq3FunModifier )? ( updateFunModifier )? ( scriptingFunModifier )? ^( Parameter ( paramList )? ) ( enclosedExpr )? ) | {...}? => ( xq3FunModifier )? SEQUENTIAL FUNCTION fqName '(' ( paramList )? ')' ( typeDeclaration )? ( block | EXTERNAL ) );
    public final XQueryParser.functionDecl_return functionDecl() throws RecognitionException {
        XQueryParser.functionDecl_return retval = new XQueryParser.functionDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FUNCTION147=null;
        Token char_literal149=null;
        Token char_literal151=null;
        Token EXTERNAL154=null;
        Token SEQUENTIAL156=null;
        Token FUNCTION157=null;
        Token char_literal159=null;
        Token char_literal161=null;
        Token EXTERNAL164=null;
        XQueryParser.xq3FunModifier_return xq3FunModifier144 = null;

        XQueryParser.updateFunModifier_return updateFunModifier145 = null;

        XQueryParser.scriptingFunModifier_return scriptingFunModifier146 = null;

        XQueryParser.fqName_return fqName148 = null;

        XQueryParser.paramList_return paramList150 = null;

        XQueryParser.typeDeclaration_return typeDeclaration152 = null;

        XQueryParser.enclosedExpr_return enclosedExpr153 = null;

        XQueryParser.xq3FunModifier_return xq3FunModifier155 = null;

        XQueryParser.fqName_return fqName158 = null;

        XQueryParser.paramList_return paramList160 = null;

        XQueryParser.typeDeclaration_return typeDeclaration162 = null;

        XQueryParser.block_return block163 = null;


        Object FUNCTION147_tree=null;
        Object char_literal149_tree=null;
        Object char_literal151_tree=null;
        Object EXTERNAL154_tree=null;
        Object SEQUENTIAL156_tree=null;
        Object FUNCTION157_tree=null;
        Object char_literal159_tree=null;
        Object char_literal161_tree=null;
        Object EXTERNAL164_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_updateFunModifier=new RewriteRuleSubtreeStream(adaptor,"rule updateFunModifier");
        RewriteRuleSubtreeStream stream_xq3FunModifier=new RewriteRuleSubtreeStream(adaptor,"rule xq3FunModifier");
        RewriteRuleSubtreeStream stream_paramList=new RewriteRuleSubtreeStream(adaptor,"rule paramList");
        RewriteRuleSubtreeStream stream_fqName=new RewriteRuleSubtreeStream(adaptor,"rule fqName");
        RewriteRuleSubtreeStream stream_scriptingFunModifier=new RewriteRuleSubtreeStream(adaptor,"rule scriptingFunModifier");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        RewriteRuleSubtreeStream stream_enclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule enclosedExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:528:5: ( ( xq3FunModifier )? ( updateFunModifier | scriptingFunModifier )? FUNCTION fqName '(' ( paramList )? ')' ( typeDeclaration )? ( enclosedExpr | EXTERNAL ) -> ^( FunctionDeclaration fqName ( typeDeclaration )? ( xq3FunModifier )? ( updateFunModifier )? ( scriptingFunModifier )? ^( Parameter ( paramList )? ) ( enclosedExpr )? ) | {...}? => ( xq3FunModifier )? SEQUENTIAL FUNCTION fqName '(' ( paramList )? ')' ( typeDeclaration )? ( block | EXTERNAL ) )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==DETERMINISTIC) ) {
                int LA45_1 = input.LA(2);

                if ( (LA45_1==FUNCTION||(LA45_1>=UPDATING && LA45_1<=SIMPLE)) ) {
                    alt45=1;
                }
                else if ( (LA45_1==SEQUENTIAL) && (((scripting)&&(xqVersion==XQUERY_3_0)))) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==NONDETERMINISTIC) ) {
                int LA45_2 = input.LA(2);

                if ( (LA45_2==FUNCTION||(LA45_2>=UPDATING && LA45_2<=SIMPLE)) ) {
                    alt45=1;
                }
                else if ( (LA45_2==SEQUENTIAL) && (((scripting)&&(xqVersion==XQUERY_3_0)))) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==FUNCTION||(LA45_0>=UPDATING && LA45_0<=SIMPLE)) ) {
                alt45=1;
            }
            else if ( (LA45_0==SEQUENTIAL) && ((scripting))) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:529:2: ( xq3FunModifier )? ( updateFunModifier | scriptingFunModifier )? FUNCTION fqName '(' ( paramList )? ')' ( typeDeclaration )? ( enclosedExpr | EXTERNAL )
                    {
                    if ( state.backtracking==0 ) {
                       variables.openScope(); 
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:530:2: ( xq3FunModifier )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( ((LA36_0>=DETERMINISTIC && LA36_0<=NONDETERMINISTIC)) && ((xqVersion==XQUERY_3_0))) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:530:2: xq3FunModifier
                            {
                            pushFollow(FOLLOW_xq3FunModifier_in_functionDecl3620);
                            xq3FunModifier144=xq3FunModifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_xq3FunModifier.add(xq3FunModifier144.getTree());

                            }
                            break;

                    }

                    // org/brackit/xquery/compiler/parser/XQuery.g:530:18: ( updateFunModifier | scriptingFunModifier )?
                    int alt37=3;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==UPDATING) && ((update))) {
                        alt37=1;
                    }
                    else if ( (LA37_0==SIMPLE) && ((scripting))) {
                        alt37=2;
                    }
                    switch (alt37) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:530:19: updateFunModifier
                            {
                            pushFollow(FOLLOW_updateFunModifier_in_functionDecl3624);
                            updateFunModifier145=updateFunModifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_updateFunModifier.add(updateFunModifier145.getTree());

                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:530:39: scriptingFunModifier
                            {
                            pushFollow(FOLLOW_scriptingFunModifier_in_functionDecl3628);
                            scriptingFunModifier146=scriptingFunModifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_scriptingFunModifier.add(scriptingFunModifier146.getTree());

                            }
                            break;

                    }

                    FUNCTION147=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl3633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION147);

                    pushFollow(FOLLOW_fqName_in_functionDecl3635);
                    fqName148=fqName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fqName.add(fqName148.getTree());
                    char_literal149=(Token)match(input,408,FOLLOW_408_in_functionDecl3637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_408.add(char_literal149);

                    // org/brackit/xquery/compiler/parser/XQuery.g:531:22: ( paramList )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==411) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:531:22: paramList
                            {
                            pushFollow(FOLLOW_paramList_in_functionDecl3639);
                            paramList150=paramList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_paramList.add(paramList150.getTree());

                            }
                            break;

                    }

                    char_literal151=(Token)match(input,410,FOLLOW_410_in_functionDecl3642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_410.add(char_literal151);

                    // org/brackit/xquery/compiler/parser/XQuery.g:532:2: ( typeDeclaration )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==AS) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:532:2: typeDeclaration
                            {
                            pushFollow(FOLLOW_typeDeclaration_in_functionDecl3645);
                            typeDeclaration152=typeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration152.getTree());

                            }
                            break;

                    }

                    // org/brackit/xquery/compiler/parser/XQuery.g:532:19: ( enclosedExpr | EXTERNAL )
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==LCurly) ) {
                        alt40=1;
                    }
                    else if ( (LA40_0==EXTERNAL) ) {
                        alt40=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 40, 0, input);

                        throw nvae;
                    }
                    switch (alt40) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:532:20: enclosedExpr
                            {
                            pushFollow(FOLLOW_enclosedExpr_in_functionDecl3649);
                            enclosedExpr153=enclosedExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enclosedExpr.add(enclosedExpr153.getTree());

                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:532:35: EXTERNAL
                            {
                            EXTERNAL154=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_functionDecl3653); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(EXTERNAL154);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       variables.closeScope(); 
                    }


                    // AST REWRITE
                    // elements: xq3FunModifier, enclosedExpr, fqName, paramList, typeDeclaration, updateFunModifier, scriptingFunModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 534:2: -> ^( FunctionDeclaration fqName ( typeDeclaration )? ( xq3FunModifier )? ( updateFunModifier )? ( scriptingFunModifier )? ^( Parameter ( paramList )? ) ( enclosedExpr )? )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:5: ^( FunctionDeclaration fqName ( typeDeclaration )? ( xq3FunModifier )? ( updateFunModifier )? ( scriptingFunModifier )? ^( Parameter ( paramList )? ) ( enclosedExpr )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FunctionDeclaration, "FunctionDeclaration"), root_1);

                        adaptor.addChild(root_1, stream_fqName.nextTree());
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:34: ( typeDeclaration )?
                        if ( stream_typeDeclaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                        }
                        stream_typeDeclaration.reset();
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:51: ( xq3FunModifier )?
                        if ( stream_xq3FunModifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_xq3FunModifier.nextTree());

                        }
                        stream_xq3FunModifier.reset();
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:67: ( updateFunModifier )?
                        if ( stream_updateFunModifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_updateFunModifier.nextTree());

                        }
                        stream_updateFunModifier.reset();
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:86: ( scriptingFunModifier )?
                        if ( stream_scriptingFunModifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_scriptingFunModifier.nextTree());

                        }
                        stream_scriptingFunModifier.reset();
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:108: ^( Parameter ( paramList )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Parameter, "Parameter"), root_2);

                        // org/brackit/xquery/compiler/parser/XQuery.g:534:120: ( paramList )?
                        if ( stream_paramList.hasNext() ) {
                            adaptor.addChild(root_2, stream_paramList.nextTree());

                        }
                        stream_paramList.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // org/brackit/xquery/compiler/parser/XQuery.g:534:132: ( enclosedExpr )?
                        if ( stream_enclosedExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_enclosedExpr.nextTree());

                        }
                        stream_enclosedExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:535:10: {...}? => ( xq3FunModifier )? SEQUENTIAL FUNCTION fqName '(' ( paramList )? ')' ( typeDeclaration )? ( block | EXTERNAL )
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((scripting)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "functionDecl", "scripting");
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:536:2: ( xq3FunModifier )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( ((LA41_0>=DETERMINISTIC && LA41_0<=NONDETERMINISTIC)) && ((xqVersion==XQUERY_3_0))) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:536:2: xq3FunModifier
                            {
                            pushFollow(FOLLOW_xq3FunModifier_in_functionDecl3750);
                            xq3FunModifier155=xq3FunModifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xq3FunModifier155.getTree());

                            }
                            break;

                    }

                    SEQUENTIAL156=(Token)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_functionDecl3754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEQUENTIAL156_tree = (Object)adaptor.create(SEQUENTIAL156);
                    adaptor.addChild(root_0, SEQUENTIAL156_tree);
                    }
                    FUNCTION157=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl3757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNCTION157_tree = (Object)adaptor.create(FUNCTION157);
                    adaptor.addChild(root_0, FUNCTION157_tree);
                    }
                    pushFollow(FOLLOW_fqName_in_functionDecl3759);
                    fqName158=fqName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fqName158.getTree());
                    char_literal159=(Token)match(input,408,FOLLOW_408_in_functionDecl3761); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal159_tree = (Object)adaptor.create(char_literal159);
                    adaptor.addChild(root_0, char_literal159_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:538:22: ( paramList )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==411) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:538:22: paramList
                            {
                            pushFollow(FOLLOW_paramList_in_functionDecl3763);
                            paramList160=paramList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, paramList160.getTree());

                            }
                            break;

                    }

                    char_literal161=(Token)match(input,410,FOLLOW_410_in_functionDecl3766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal161_tree = (Object)adaptor.create(char_literal161);
                    adaptor.addChild(root_0, char_literal161_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:539:2: ( typeDeclaration )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==AS) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:539:2: typeDeclaration
                            {
                            pushFollow(FOLLOW_typeDeclaration_in_functionDecl3769);
                            typeDeclaration162=typeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration162.getTree());

                            }
                            break;

                    }

                    // org/brackit/xquery/compiler/parser/XQuery.g:539:19: ( block | EXTERNAL )
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==LCurly) ) {
                        alt44=1;
                    }
                    else if ( (LA44_0==EXTERNAL) ) {
                        alt44=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 0, input);

                        throw nvae;
                    }
                    switch (alt44) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:539:20: block
                            {
                            pushFollow(FOLLOW_block_in_functionDecl3773);
                            block163=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block163.getTree());

                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:539:35: EXTERNAL
                            {
                            EXTERNAL164=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_functionDecl3784); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EXTERNAL164_tree = (Object)adaptor.create(EXTERNAL164);
                            adaptor.addChild(root_0, EXTERNAL164_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionDecl"

    public static class updateFunModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateFunModifier"
    // org/brackit/xquery/compiler/parser/XQuery.g:541:1: updateFunModifier : {...}? => UPDATING ;
    public final XQueryParser.updateFunModifier_return updateFunModifier() throws RecognitionException {
        XQueryParser.updateFunModifier_return retval = new XQueryParser.updateFunModifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token UPDATING165=null;

        Object UPDATING165_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:542:5: ({...}? => UPDATING )
            // org/brackit/xquery/compiler/parser/XQuery.g:542:7: {...}? => UPDATING
            {
            root_0 = (Object)adaptor.nil();

            if ( !((update)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "updateFunModifier", "update");
            }
            UPDATING165=(Token)match(input,UPDATING,FOLLOW_UPDATING_in_updateFunModifier3805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UPDATING165_tree = (Object)adaptor.create(UPDATING165);
            adaptor.addChild(root_0, UPDATING165_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateFunModifier"

    public static class scriptingFunModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scriptingFunModifier"
    // org/brackit/xquery/compiler/parser/XQuery.g:544:1: scriptingFunModifier : {...}? => SIMPLE ;
    public final XQueryParser.scriptingFunModifier_return scriptingFunModifier() throws RecognitionException {
        XQueryParser.scriptingFunModifier_return retval = new XQueryParser.scriptingFunModifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SIMPLE166=null;

        Object SIMPLE166_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:545:5: ({...}? => SIMPLE )
            // org/brackit/xquery/compiler/parser/XQuery.g:545:7: {...}? => SIMPLE
            {
            root_0 = (Object)adaptor.nil();

            if ( !((scripting)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "scriptingFunModifier", "scripting");
            }
            SIMPLE166=(Token)match(input,SIMPLE,FOLLOW_SIMPLE_in_scriptingFunModifier3825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SIMPLE166_tree = (Object)adaptor.create(SIMPLE166);
            adaptor.addChild(root_0, SIMPLE166_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "scriptingFunModifier"

    public static class xq3FunModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xq3FunModifier"
    // org/brackit/xquery/compiler/parser/XQuery.g:547:1: xq3FunModifier : ({...}? => DETERMINISTIC | {...}? => NONDETERMINISTIC );
    public final XQueryParser.xq3FunModifier_return xq3FunModifier() throws RecognitionException {
        XQueryParser.xq3FunModifier_return retval = new XQueryParser.xq3FunModifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DETERMINISTIC167=null;
        Token NONDETERMINISTIC168=null;

        Object DETERMINISTIC167_tree=null;
        Object NONDETERMINISTIC168_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:548:5: ({...}? => DETERMINISTIC | {...}? => NONDETERMINISTIC )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==DETERMINISTIC) && ((xqVersion==XQUERY_3_0))) {
                alt46=1;
            }
            else if ( (LA46_0==NONDETERMINISTIC) && ((xqVersion==XQUERY_3_0))) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:548:7: {...}? => DETERMINISTIC
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "xq3FunModifier", "xqVersion==XQUERY_3_0");
                    }
                    DETERMINISTIC167=(Token)match(input,DETERMINISTIC,FOLLOW_DETERMINISTIC_in_xq3FunModifier3845); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DETERMINISTIC167_tree = (Object)adaptor.create(DETERMINISTIC167);
                    adaptor.addChild(root_0, DETERMINISTIC167_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:549:7: {...}? => NONDETERMINISTIC
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "xq3FunModifier", "xqVersion==XQUERY_3_0");
                    }
                    NONDETERMINISTIC168=(Token)match(input,NONDETERMINISTIC,FOLLOW_NONDETERMINISTIC_in_xq3FunModifier3857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NONDETERMINISTIC168_tree = (Object)adaptor.create(NONDETERMINISTIC168);
                    adaptor.addChild(root_0, NONDETERMINISTIC168_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "xq3FunModifier"

    public static class paramList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paramList"
    // org/brackit/xquery/compiler/parser/XQuery.g:551:1: paramList : param ( ',' param )* -> ( param )* ;
    public final XQueryParser.paramList_return paramList() throws RecognitionException {
        XQueryParser.paramList_return retval = new XQueryParser.paramList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal170=null;
        XQueryParser.param_return param169 = null;

        XQueryParser.param_return param171 = null;


        Object char_literal170_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleSubtreeStream stream_param=new RewriteRuleSubtreeStream(adaptor,"rule param");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:552:5: ( param ( ',' param )* -> ( param )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:552:7: param ( ',' param )*
            {
            pushFollow(FOLLOW_param_in_paramList3873);
            param169=param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param.add(param169.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:552:13: ( ',' param )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==409) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:552:14: ',' param
            	    {
            	    char_literal170=(Token)match(input,409,FOLLOW_409_in_paramList3876); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_409.add(char_literal170);

            	    pushFollow(FOLLOW_param_in_paramList3878);
            	    param171=param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_param.add(param171.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);



            // AST REWRITE
            // elements: param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:26: -> ( param )*
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:552:29: ( param )*
                while ( stream_param.hasNext() ) {
                    adaptor.addChild(root_0, stream_param.nextTree());

                }
                stream_param.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paramList"

    public static class param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "param"
    // org/brackit/xquery/compiler/parser/XQuery.g:554:1: param : '$' name= qName ( typeDeclaration )? -> ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? ) ;
    public final XQueryParser.param_return param() throws RecognitionException {
        XQueryParser.param_return retval = new XQueryParser.param_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal172=null;
        XQueryParser.qName_return name = null;

        XQueryParser.typeDeclaration_return typeDeclaration173 = null;


        Object char_literal172_tree=null;
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:555:5: ( '$' name= qName ( typeDeclaration )? -> ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:555:7: '$' name= qName ( typeDeclaration )?
            {
            char_literal172=(Token)match(input,411,FOLLOW_411_in_param3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal172);

            pushFollow(FOLLOW_qName_in_param3905);
            name=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qName.add(name.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:555:22: ( typeDeclaration )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==AS) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:555:22: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_param3907);
                    typeDeclaration173=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:39: -> ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:555:42: ^( TypedVariableDeclaration Variable[variables.declare($name.text)] ( typeDeclaration )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypedVariableDeclaration, "TypedVariableDeclaration"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))));
                // org/brackit/xquery/compiler/parser/XQuery.g:555:109: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param"

    public static class enclosedExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enclosedExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:557:1: enclosedExpr : LCurly expr RCurly -> expr ;
    public final XQueryParser.enclosedExpr_return enclosedExpr() throws RecognitionException {
        XQueryParser.enclosedExpr_return retval = new XQueryParser.enclosedExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LCurly174=null;
        Token RCurly176=null;
        XQueryParser.expr_return expr175 = null;


        Object LCurly174_tree=null;
        Object RCurly176_tree=null;
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:558:5: ( LCurly expr RCurly -> expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:558:7: LCurly expr RCurly
            {
            LCurly174=(Token)match(input,LCurly,FOLLOW_LCurly_in_enclosedExpr3936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly174);

            pushFollow(FOLLOW_expr_in_enclosedExpr3938);
            expr175=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr175.getTree());
            RCurly176=(Token)match(input,RCurly,FOLLOW_RCurly_in_enclosedExpr3940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly176);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:26: -> expr
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enclosedExpr"

    public static class queryBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "queryBody"
    // org/brackit/xquery/compiler/parser/XQuery.g:562:1: queryBody : e= expr -> ^( QueryBody[$e.start, \"QueryBody\"] expr ) ;
    public final XQueryParser.queryBody_return queryBody() throws RecognitionException {
        XQueryParser.queryBody_return retval = new XQueryParser.queryBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.expr_return e = null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:568:5: (e= expr -> ^( QueryBody[$e.start, \"QueryBody\"] expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:568:7: e= expr
            {
            pushFollow(FOLLOW_expr_in_queryBody3984);
            e=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(e.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:5: -> ^( QueryBody[$e.start, \"QueryBody\"] expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:569:8: ^( QueryBody[$e.start, \"QueryBody\"] expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QueryBody, (e!=null?((Token)e.start):null), "QueryBody"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "queryBody"

    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // org/brackit/xquery/compiler/parser/XQuery.g:572:1: expr : first= exprSingle ( ( ',' | ';' ) further+= exprSingle )* ( ';' )? -> { further != null }? ^( SequenceExpr $first ( $further)+ ) -> $first;
    public final XQueryParser.expr_return expr() throws RecognitionException {
        XQueryParser.expr_return retval = new XQueryParser.expr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal177=null;
        Token char_literal178=null;
        Token char_literal179=null;
        List list_further=null;
        XQueryParser.exprSingle_return first = null;

        RuleReturnScope further = null;
        Object char_literal177_tree=null;
        Object char_literal178_tree=null;
        Object char_literal179_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_406=new RewriteRuleTokenStream(adaptor,"token 406");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");

                boolean isSeq  = false;
                boolean seqEnd = false;
              
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:586:5: (first= exprSingle ( ( ',' | ';' ) further+= exprSingle )* ( ';' )? -> { further != null }? ^( SequenceExpr $first ( $further)+ ) -> $first)
            // org/brackit/xquery/compiler/parser/XQuery.g:586:7: first= exprSingle ( ( ',' | ';' ) further+= exprSingle )* ( ';' )?
            {
            pushFollow(FOLLOW_exprSingle_in_expr4069);
            first=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(first.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:587:3: ( ( ',' | ';' ) further+= exprSingle )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==406) ) {
                    int LA50_1 = input.LA(2);

                    if ( (LA50_1==LAngle||LA50_1==Pragma||(LA50_1>=XQUERY && LA50_1<=AposedStringLiteral)||(LA50_1>=DirCommentConstructor && LA50_1<=DirPIConstructor)||(LA50_1>=DOCUMENT && LA50_1<=WHILE)||(LA50_1>=NOT && LA50_1<=NCName)||LA50_1==408||LA50_1==411||(LA50_1>=413 && LA50_1<=415)||(LA50_1>=422 && LA50_1<=423)||(LA50_1>=425 && LA50_1<=426)||LA50_1==429) ) {
                        alt50=1;
                    }


                }
                else if ( (LA50_0==409) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:588:9: ( ',' | ';' ) further+= exprSingle
            	    {
            	    // org/brackit/xquery/compiler/parser/XQuery.g:588:9: ( ',' | ';' )
            	    int alt49=2;
            	    int LA49_0 = input.LA(1);

            	    if ( (LA49_0==409) ) {
            	        alt49=1;
            	    }
            	    else if ( (LA49_0==406) ) {
            	        alt49=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 49, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt49) {
            	        case 1 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:588:10: ','
            	            {
            	            char_literal177=(Token)match(input,409,FOLLOW_409_in_expr4084); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_409.add(char_literal177);


            	            }
            	            break;
            	        case 2 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:589:10: ';'
            	            {
            	            char_literal178=(Token)match(input,406,FOLLOW_406_in_expr4095); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_406.add(char_literal178);

            	            if ( state.backtracking==0 ) {

            	              					if(!scripting) raiseError("Unexpectd token ';'.");
            	              					isSeq = true;
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_exprSingle_in_expr4119);
            	    further=exprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprSingle.add(further.getTree());
            	    if (list_further==null) list_further=new ArrayList();
            	    list_further.add(further.getTree());


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            // org/brackit/xquery/compiler/parser/XQuery.g:597:3: ( ';' )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==406) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:597:4: ';'
                    {
                    char_literal179=(Token)match(input,406,FOLLOW_406_in_expr4129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_406.add(char_literal179);

                    if ( state.backtracking==0 ) {

                      				if(!scripting) raiseError("Unexpectd token ';'.");
                      				isSeq = true; seqEnd = true;
                      			
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: first, further, first
            // token labels: 
            // rule labels: retval, first
            // token list labels: 
            // rule list labels: further
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.tree:null);
            RewriteRuleSubtreeStream stream_further=new RewriteRuleSubtreeStream(adaptor,"token further",list_further);
            root_0 = (Object)adaptor.nil();
            // 603:3: -> { further != null }? ^( SequenceExpr $first ( $further)+ )
            if ( further != null ) {
                // org/brackit/xquery/compiler/parser/XQuery.g:603:27: ^( SequenceExpr $first ( $further)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SequenceExpr, "SequenceExpr"), root_1);

                adaptor.addChild(root_1, stream_first.nextTree());
                if ( !(stream_further.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_further.hasNext() ) {
                    adaptor.addChild(root_1, stream_further.nextTree());

                }
                stream_further.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 604:3: -> $first
            {
                adaptor.addChild(root_0, stream_first.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                      if(isSeq && !seqEnd) {
                          raiseError("Sequential expression not terminated by ';'.");
                      }
                    
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class exprSingle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exprSingle"
    // org/brackit/xquery/compiler/parser/XQuery.g:619:1: exprSingle : ( flworExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr | {...}? => insertExpr | {...}? => deleteExpr | {...}? => renameExpr | {...}? => replaceExpr | {...}? => transformExpr | {...}? => blockExpr | {...}? => assignmentExpr | {...}? => exitExpr | {...}? => whileExpr | {...}? => tryCatchExpr );
    public final XQueryParser.exprSingle_return exprSingle() throws RecognitionException {
        XQueryParser.exprSingle_return retval = new XQueryParser.exprSingle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.flworExpr_return flworExpr180 = null;

        XQueryParser.quantifiedExpr_return quantifiedExpr181 = null;

        XQueryParser.typeswitchExpr_return typeswitchExpr182 = null;

        XQueryParser.ifExpr_return ifExpr183 = null;

        XQueryParser.orExpr_return orExpr184 = null;

        XQueryParser.insertExpr_return insertExpr185 = null;

        XQueryParser.deleteExpr_return deleteExpr186 = null;

        XQueryParser.renameExpr_return renameExpr187 = null;

        XQueryParser.replaceExpr_return replaceExpr188 = null;

        XQueryParser.transformExpr_return transformExpr189 = null;

        XQueryParser.blockExpr_return blockExpr190 = null;

        XQueryParser.assignmentExpr_return assignmentExpr191 = null;

        XQueryParser.exitExpr_return exitExpr192 = null;

        XQueryParser.whileExpr_return whileExpr193 = null;

        XQueryParser.tryCatchExpr_return tryCatchExpr194 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:620:5: ( flworExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr | {...}? => insertExpr | {...}? => deleteExpr | {...}? => renameExpr | {...}? => replaceExpr | {...}? => transformExpr | {...}? => blockExpr | {...}? => assignmentExpr | {...}? => exitExpr | {...}? => whileExpr | {...}? => tryCatchExpr )
            int alt52=15;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:620:7: flworExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_flworExpr_in_exprSingle4181);
                    flworExpr180=flworExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flworExpr180.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:621:7: quantifiedExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantifiedExpr_in_exprSingle4189);
                    quantifiedExpr181=quantifiedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantifiedExpr181.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:622:7: typeswitchExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_typeswitchExpr_in_exprSingle4197);
                    typeswitchExpr182=typeswitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeswitchExpr182.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:623:7: ifExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ifExpr_in_exprSingle4205);
                    ifExpr183=ifExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifExpr183.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:624:7: orExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_orExpr_in_exprSingle4213);
                    orExpr184=orExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orExpr184.getTree());

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:625:7: {...}? => insertExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((update)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "update");
                    }
                    pushFollow(FOLLOW_insertExpr_in_exprSingle4240);
                    insertExpr185=insertExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertExpr185.getTree());

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:626:7: {...}? => deleteExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((update)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "update");
                    }
                    pushFollow(FOLLOW_deleteExpr_in_exprSingle4289);
                    deleteExpr186=deleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteExpr186.getTree());

                    }
                    break;
                case 8 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:627:7: {...}? => renameExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((update)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "update");
                    }
                    pushFollow(FOLLOW_renameExpr_in_exprSingle4338);
                    renameExpr187=renameExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, renameExpr187.getTree());

                    }
                    break;
                case 9 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:628:7: {...}? => replaceExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((update)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "update");
                    }
                    pushFollow(FOLLOW_replaceExpr_in_exprSingle4387);
                    replaceExpr188=replaceExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, replaceExpr188.getTree());

                    }
                    break;
                case 10 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:629:7: {...}? => transformExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((update)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "update");
                    }
                    pushFollow(FOLLOW_transformExpr_in_exprSingle4435);
                    transformExpr189=transformExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, transformExpr189.getTree());

                    }
                    break;
                case 11 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:630:7: {...}? => blockExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((scripting)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "scripting");
                    }
                    pushFollow(FOLLOW_blockExpr_in_exprSingle4478);
                    blockExpr190=blockExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockExpr190.getTree());

                    }
                    break;
                case 12 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:631:7: {...}? => assignmentExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((scripting)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "scripting");
                    }
                    pushFollow(FOLLOW_assignmentExpr_in_exprSingle4522);
                    assignmentExpr191=assignmentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpr191.getTree());

                    }
                    break;
                case 13 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:632:7: {...}? => exitExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((scripting)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "scripting");
                    }
                    pushFollow(FOLLOW_exitExpr_in_exprSingle4561);
                    exitExpr192=exitExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exitExpr192.getTree());

                    }
                    break;
                case 14 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:633:7: {...}? => whileExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((scripting)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "scripting");
                    }
                    pushFollow(FOLLOW_whileExpr_in_exprSingle4606);
                    whileExpr193=whileExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whileExpr193.getTree());

                    }
                    break;
                case 15 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:634:7: {...}? => tryCatchExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "exprSingle", "xqVersion==XQUERY_3_0");
                    }
                    pushFollow(FOLLOW_tryCatchExpr_in_exprSingle4638);
                    tryCatchExpr194=tryCatchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tryCatchExpr194.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exprSingle"

    public static class flworExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "flworExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:641:1: flworExpr : ({...}? => initialClause ( intermediateClause )* returnClause -> ^( FlowrExpr initialClause ( intermediateClause )* returnClause ) | ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause -> ^( FlowrExpr ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause ) );
    public final XQueryParser.flworExpr_return flworExpr() throws RecognitionException {
        XQueryParser.flworExpr_return retval = new XQueryParser.flworExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.initialClause_return initialClause195 = null;

        XQueryParser.intermediateClause_return intermediateClause196 = null;

        XQueryParser.returnClause_return returnClause197 = null;

        XQueryParser.initialClause_return initialClause198 = null;

        XQueryParser.whereClause_return whereClause199 = null;

        XQueryParser.orderByClause_return orderByClause200 = null;

        XQueryParser.returnClause_return returnClause201 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_returnClause=new RewriteRuleSubtreeStream(adaptor,"rule returnClause");
        RewriteRuleSubtreeStream stream_initialClause=new RewriteRuleSubtreeStream(adaptor,"rule initialClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_intermediateClause=new RewriteRuleSubtreeStream(adaptor,"rule intermediateClause");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:642:7: ({...}? => initialClause ( intermediateClause )* returnClause -> ^( FlowrExpr initialClause ( intermediateClause )* returnClause ) | ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause -> ^( FlowrExpr ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause ) )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==FOR) ) {
                int LA57_1 = input.LA(2);

                if ( ((xqVersion==XQUERY_3_0)) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA57_0==LET) ) {
                int LA57_2 = input.LA(2);

                if ( ((xqVersion==XQUERY_3_0)) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:643:7: {...}? => initialClause ( intermediateClause )* returnClause
                    {
                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "flworExpr", "xqVersion==XQUERY_3_0");
                    }
                    if ( state.backtracking==0 ) {
                       variables.openScope(); 
                    }
                    pushFollow(FOLLOW_initialClause_in_flworExpr4706);
                    initialClause195=initialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initialClause.add(initialClause195.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:645:22: ( intermediateClause )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( (LA53_0==ORDER||LA53_0==FOR||LA53_0==LET||(LA53_0>=COUNT && LA53_0<=GROUP)||LA53_0==STABLE) ) {
                            alt53=1;
                        }


                        switch (alt53) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:645:22: intermediateClause
                    	    {
                    	    pushFollow(FOLLOW_intermediateClause_in_flworExpr4708);
                    	    intermediateClause196=intermediateClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_intermediateClause.add(intermediateClause196.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);

                    pushFollow(FOLLOW_returnClause_in_flworExpr4711);
                    returnClause197=returnClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_returnClause.add(returnClause197.getTree());
                    if ( state.backtracking==0 ) {
                       variables.closeScope(); 
                    }


                    // AST REWRITE
                    // elements: returnClause, intermediateClause, initialClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 647:3: -> ^( FlowrExpr initialClause ( intermediateClause )* returnClause )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:647:6: ^( FlowrExpr initialClause ( intermediateClause )* returnClause )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FlowrExpr, "FlowrExpr"), root_1);

                        adaptor.addChild(root_1, stream_initialClause.nextTree());
                        // org/brackit/xquery/compiler/parser/XQuery.g:647:32: ( intermediateClause )*
                        while ( stream_intermediateClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_intermediateClause.nextTree());

                        }
                        stream_intermediateClause.reset();
                        adaptor.addChild(root_1, stream_returnClause.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:649:8: ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause
                    {
                    if ( state.backtracking==0 ) {
                       variables.openScope(); 
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:650:8: ( initialClause )+
                    int cnt54=0;
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==FOR||LA54_0==LET) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:650:8: initialClause
                    	    {
                    	    pushFollow(FOLLOW_initialClause_in_flworExpr4753);
                    	    initialClause198=initialClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_initialClause.add(initialClause198.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                throw eee;
                        }
                        cnt54++;
                    } while (true);

                    // org/brackit/xquery/compiler/parser/XQuery.g:650:23: ( whereClause )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==WHERE) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:650:23: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_flworExpr4756);
                            whereClause199=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause199.getTree());

                            }
                            break;

                    }

                    // org/brackit/xquery/compiler/parser/XQuery.g:650:36: ( orderByClause )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==ORDER||LA56_0==STABLE) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:650:36: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_flworExpr4759);
                            orderByClause200=orderByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause200.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_returnClause_in_flworExpr4762);
                    returnClause201=returnClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_returnClause.add(returnClause201.getTree());
                    if ( state.backtracking==0 ) {
                       variables.closeScope(); 
                    }


                    // AST REWRITE
                    // elements: returnClause, orderByClause, initialClause, whereClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 652:7: -> ^( FlowrExpr ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:652:10: ^( FlowrExpr ( initialClause )+ ( whereClause )? ( orderByClause )? returnClause )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FlowrExpr, "FlowrExpr"), root_1);

                        if ( !(stream_initialClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_initialClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_initialClause.nextTree());

                        }
                        stream_initialClause.reset();
                        // org/brackit/xquery/compiler/parser/XQuery.g:652:37: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();
                        // org/brackit/xquery/compiler/parser/XQuery.g:652:50: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();
                        adaptor.addChild(root_1, stream_returnClause.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "flworExpr"

    public static class initialClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initialClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:655:1: initialClause : ( forClause | letClause | {...}? => windowClause );
    public final XQueryParser.initialClause_return initialClause() throws RecognitionException {
        XQueryParser.initialClause_return retval = new XQueryParser.initialClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.forClause_return forClause202 = null;

        XQueryParser.letClause_return letClause203 = null;

        XQueryParser.windowClause_return windowClause204 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:656:5: ( forClause | letClause | {...}? => windowClause )
            int alt58=3;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==FOR) ) {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==411) ) {
                    alt58=1;
                }
                else if ( (LA58_1==TUMBLING||LA58_1==SLIDING) && ((xqVersion==XQUERY_3_0))) {
                    alt58=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA58_0==LET) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:656:7: forClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_forClause_in_initialClause4868);
                    forClause202=forClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forClause202.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:657:7: letClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_letClause_in_initialClause4876);
                    letClause203=letClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, letClause203.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:658:7: {...}? => windowClause
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "initialClause", "xqVersion==XQUERY_3_0");
                    }
                    pushFollow(FOLLOW_windowClause_in_initialClause4888);
                    windowClause204=windowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowClause204.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "initialClause"

    public static class intermediateClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "intermediateClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:660:1: intermediateClause : ( initialClause | whereClause | groupByClause | orderByClause | countClause );
    public final XQueryParser.intermediateClause_return intermediateClause() throws RecognitionException {
        XQueryParser.intermediateClause_return retval = new XQueryParser.intermediateClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.initialClause_return initialClause205 = null;

        XQueryParser.whereClause_return whereClause206 = null;

        XQueryParser.groupByClause_return groupByClause207 = null;

        XQueryParser.orderByClause_return orderByClause208 = null;

        XQueryParser.countClause_return countClause209 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:661:5: ( initialClause | whereClause | groupByClause | orderByClause | countClause )
            int alt59=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt59=1;
                }
                break;
            case WHERE:
                {
                alt59=2;
                }
                break;
            case GROUP:
                {
                alt59=3;
                }
                break;
            case ORDER:
            case STABLE:
                {
                alt59=4;
                }
                break;
            case COUNT:
                {
                alt59=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }

            switch (alt59) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:661:7: initialClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_initialClause_in_intermediateClause4952);
                    initialClause205=initialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initialClause205.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:662:7: whereClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_whereClause_in_intermediateClause4960);
                    whereClause206=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause206.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:663:7: groupByClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_groupByClause_in_intermediateClause4968);
                    groupByClause207=groupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByClause207.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:664:7: orderByClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_orderByClause_in_intermediateClause4976);
                    orderByClause208=orderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByClause208.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:665:7: countClause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_countClause_in_intermediateClause4984);
                    countClause209=countClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, countClause209.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "intermediateClause"

    public static class forClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:668:1: forClause : FOR forClauseItem ( ',' forClauseItem )* -> ( ^( ForClause forClauseItem ) )+ ;
    public final XQueryParser.forClause_return forClause() throws RecognitionException {
        XQueryParser.forClause_return retval = new XQueryParser.forClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FOR210=null;
        Token char_literal212=null;
        XQueryParser.forClauseItem_return forClauseItem211 = null;

        XQueryParser.forClauseItem_return forClauseItem213 = null;


        Object FOR210_tree=null;
        Object char_literal212_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleSubtreeStream stream_forClauseItem=new RewriteRuleSubtreeStream(adaptor,"rule forClauseItem");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:669:5: ( FOR forClauseItem ( ',' forClauseItem )* -> ( ^( ForClause forClauseItem ) )+ )
            // org/brackit/xquery/compiler/parser/XQuery.g:670:5: FOR forClauseItem ( ',' forClauseItem )*
            {
            FOR210=(Token)match(input,FOR,FOLLOW_FOR_in_forClause5010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR210);

            pushFollow(FOLLOW_forClauseItem_in_forClause5012);
            forClauseItem211=forClauseItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forClauseItem.add(forClauseItem211.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:670:23: ( ',' forClauseItem )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==409) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:670:24: ',' forClauseItem
            	    {
            	    char_literal212=(Token)match(input,409,FOLLOW_409_in_forClause5015); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_409.add(char_literal212);

            	    pushFollow(FOLLOW_forClauseItem_in_forClause5017);
            	    forClauseItem213=forClauseItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_forClauseItem.add(forClauseItem213.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);



            // AST REWRITE
            // elements: forClauseItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:5: -> ( ^( ForClause forClauseItem ) )+
            {
                if ( !(stream_forClauseItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_forClauseItem.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:671:8: ^( ForClause forClauseItem )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ForClause, "ForClause"), root_1);

                    adaptor.addChild(root_1, stream_forClauseItem.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_forClauseItem.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forClause"

    public static class forClauseItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forClauseItem"
    // org/brackit/xquery/compiler/parser/XQuery.g:674:1: forClauseItem : '$' inBinding IN exprSingle -> inBinding exprSingle ;
    public final XQueryParser.forClauseItem_return forClauseItem() throws RecognitionException {
        XQueryParser.forClauseItem_return retval = new XQueryParser.forClauseItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal214=null;
        Token IN216=null;
        XQueryParser.inBinding_return inBinding215 = null;

        XQueryParser.exprSingle_return exprSingle217 = null;


        Object char_literal214_tree=null;
        Object IN216_tree=null;
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_inBinding=new RewriteRuleSubtreeStream(adaptor,"rule inBinding");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:675:2: ( '$' inBinding IN exprSingle -> inBinding exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:675:4: '$' inBinding IN exprSingle
            {
            char_literal214=(Token)match(input,411,FOLLOW_411_in_forClauseItem5051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal214);

            pushFollow(FOLLOW_inBinding_in_forClauseItem5053);
            inBinding215=inBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inBinding.add(inBinding215.getTree());
            IN216=(Token)match(input,IN,FOLLOW_IN_in_forClauseItem5057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IN.add(IN216);

            pushFollow(FOLLOW_exprSingle_in_forClauseItem5059);
            exprSingle217=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle217.getTree());


            // AST REWRITE
            // elements: inBinding, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 677:5: -> inBinding exprSingle
            {
                adaptor.addChild(root_0, stream_inBinding.nextTree());
                adaptor.addChild(root_0, stream_exprSingle.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forClauseItem"

    public static class inBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:680:1: inBinding : typedVarBinding ( allowingEmpty )? ( positionalVar )? ( ftScoreVar )? ;
    public final XQueryParser.inBinding_return inBinding() throws RecognitionException {
        XQueryParser.inBinding_return retval = new XQueryParser.inBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.typedVarBinding_return typedVarBinding218 = null;

        XQueryParser.allowingEmpty_return allowingEmpty219 = null;

        XQueryParser.positionalVar_return positionalVar220 = null;

        XQueryParser.ftScoreVar_return ftScoreVar221 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:681:2: ( typedVarBinding ( allowingEmpty )? ( positionalVar )? ( ftScoreVar )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:681:4: typedVarBinding ( allowingEmpty )? ( positionalVar )? ( ftScoreVar )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typedVarBinding_in_inBinding5081);
            typedVarBinding218=typedVarBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedVarBinding218.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:681:20: ( allowingEmpty )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ALLOWING) && ((xqVersion==XQUERY_3_0))) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:681:20: allowingEmpty
                    {
                    pushFollow(FOLLOW_allowingEmpty_in_inBinding5083);
                    allowingEmpty219=allowingEmpty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allowingEmpty219.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:681:35: ( positionalVar )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:681:35: positionalVar
                    {
                    pushFollow(FOLLOW_positionalVar_in_inBinding5086);
                    positionalVar220=positionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, positionalVar220.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:681:50: ( ftScoreVar )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==SCORE) && ((fullText))) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:681:50: ftScoreVar
                    {
                    pushFollow(FOLLOW_ftScoreVar_in_inBinding5089);
                    ftScoreVar221=ftScoreVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftScoreVar221.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inBinding"

    public static class typedVarBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedVarBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:684:1: typedVarBinding : name= varName ( typeDeclaration )? -> ^( TypedVariableBinding Variable[variables.declare($name.text)] ( typeDeclaration )? ) ;
    public final XQueryParser.typedVarBinding_return typedVarBinding() throws RecognitionException {
        XQueryParser.typedVarBinding_return retval = new XQueryParser.typedVarBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.varName_return name = null;

        XQueryParser.typeDeclaration_return typeDeclaration222 = null;


        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:685:2: (name= varName ( typeDeclaration )? -> ^( TypedVariableBinding Variable[variables.declare($name.text)] ( typeDeclaration )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:685:4: name= varName ( typeDeclaration )?
            {
            pushFollow(FOLLOW_varName_in_typedVarBinding5104);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:685:17: ( typeDeclaration )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==AS) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:685:17: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_typedVarBinding5106);
                    typeDeclaration222=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration222.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 686:2: -> ^( TypedVariableBinding Variable[variables.declare($name.text)] ( typeDeclaration )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:686:5: ^( TypedVariableBinding Variable[variables.declare($name.text)] ( typeDeclaration )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypedVariableBinding, "TypedVariableBinding"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))));
                // org/brackit/xquery/compiler/parser/XQuery.g:686:68: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedVarBinding"

    public static class allowingEmpty_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allowingEmpty"
    // org/brackit/xquery/compiler/parser/XQuery.g:689:1: allowingEmpty : {...}? => ALLOWING EMPTY -> ^( AllowingEmpty ) ;
    public final XQueryParser.allowingEmpty_return allowingEmpty() throws RecognitionException {
        XQueryParser.allowingEmpty_return retval = new XQueryParser.allowingEmpty_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALLOWING223=null;
        Token EMPTY224=null;

        Object ALLOWING223_tree=null;
        Object EMPTY224_tree=null;
        RewriteRuleTokenStream stream_ALLOWING=new RewriteRuleTokenStream(adaptor,"token ALLOWING");
        RewriteRuleTokenStream stream_EMPTY=new RewriteRuleTokenStream(adaptor,"token EMPTY");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:690:5: ({...}? => ALLOWING EMPTY -> ^( AllowingEmpty ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:690:7: {...}? => ALLOWING EMPTY
            {
            if ( !((xqVersion==XQUERY_3_0)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "allowingEmpty", "xqVersion==XQUERY_3_0");
            }
            ALLOWING223=(Token)match(input,ALLOWING,FOLLOW_ALLOWING_in_allowingEmpty5192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ALLOWING.add(ALLOWING223);

            EMPTY224=(Token)match(input,EMPTY,FOLLOW_EMPTY_in_allowingEmpty5194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMPTY.add(EMPTY224);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 691:5: -> ^( AllowingEmpty )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:691:8: ^( AllowingEmpty )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AllowingEmpty, "AllowingEmpty"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "allowingEmpty"

    public static class positionalVar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "positionalVar"
    // org/brackit/xquery/compiler/parser/XQuery.g:694:1: positionalVar : AT '$' name= varName -> ^( TypedVariableBinding Variable[variables.declare($name.text)] varName ) ;
    public final XQueryParser.positionalVar_return positionalVar() throws RecognitionException {
        XQueryParser.positionalVar_return retval = new XQueryParser.positionalVar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT225=null;
        Token char_literal226=null;
        XQueryParser.varName_return name = null;


        Object AT225_tree=null;
        Object char_literal226_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:695:5: ( AT '$' name= varName -> ^( TypedVariableBinding Variable[variables.declare($name.text)] varName ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:695:7: AT '$' name= varName
            {
            AT225=(Token)match(input,AT,FOLLOW_AT_in_positionalVar5225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT225);

            char_literal226=(Token)match(input,411,FOLLOW_411_in_positionalVar5227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal226);

            pushFollow(FOLLOW_varName_in_positionalVar5231);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());


            // AST REWRITE
            // elements: varName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:5: -> ^( TypedVariableBinding Variable[variables.declare($name.text)] varName )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:696:8: ^( TypedVariableBinding Variable[variables.declare($name.text)] varName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypedVariableBinding, "TypedVariableBinding"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))));
                adaptor.addChild(root_1, stream_varName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "positionalVar"

    public static class ftScoreVar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftScoreVar"
    // org/brackit/xquery/compiler/parser/XQuery.g:699:1: ftScoreVar : {...}? => SCORE '$' varName ;
    public final XQueryParser.ftScoreVar_return ftScoreVar() throws RecognitionException {
        XQueryParser.ftScoreVar_return retval = new XQueryParser.ftScoreVar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SCORE227=null;
        Token char_literal228=null;
        XQueryParser.varName_return varName229 = null;


        Object SCORE227_tree=null;
        Object char_literal228_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:700:5: ({...}? => SCORE '$' varName )
            // org/brackit/xquery/compiler/parser/XQuery.g:700:7: {...}? => SCORE '$' varName
            {
            root_0 = (Object)adaptor.nil();

            if ( !((fullText)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ftScoreVar", "fullText");
            }
            SCORE227=(Token)match(input,SCORE,FOLLOW_SCORE_in_ftScoreVar5325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCORE227_tree = (Object)adaptor.create(SCORE227);
            adaptor.addChild(root_0, SCORE227_tree);
            }
            char_literal228=(Token)match(input,411,FOLLOW_411_in_ftScoreVar5327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal228_tree = (Object)adaptor.create(char_literal228);
            adaptor.addChild(root_0, char_literal228_tree);
            }
            pushFollow(FOLLOW_varName_in_ftScoreVar5329);
            varName229=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName229.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftScoreVar"

    public static class letClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "letClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:703:1: letClause : ( LET letClauseItem ( ',' letClauseItem )* -> ( ^( LetClause letClauseItem ) )+ | {...}? => LET SCORE '$' varName ':=' exprSingle ( ',' ( ( '$' varName ( typeDeclaration )? ) | ftScoreVar ) ':=' exprSingle )* );
    public final XQueryParser.letClause_return letClause() throws RecognitionException {
        XQueryParser.letClause_return retval = new XQueryParser.letClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LET230=null;
        Token char_literal232=null;
        Token LET234=null;
        Token SCORE235=null;
        Token char_literal236=null;
        Token string_literal238=null;
        Token char_literal240=null;
        Token char_literal241=null;
        Token string_literal245=null;
        XQueryParser.letClauseItem_return letClauseItem231 = null;

        XQueryParser.letClauseItem_return letClauseItem233 = null;

        XQueryParser.varName_return varName237 = null;

        XQueryParser.exprSingle_return exprSingle239 = null;

        XQueryParser.varName_return varName242 = null;

        XQueryParser.typeDeclaration_return typeDeclaration243 = null;

        XQueryParser.ftScoreVar_return ftScoreVar244 = null;

        XQueryParser.exprSingle_return exprSingle246 = null;


        Object LET230_tree=null;
        Object char_literal232_tree=null;
        Object LET234_tree=null;
        Object SCORE235_tree=null;
        Object char_literal236_tree=null;
        Object string_literal238_tree=null;
        Object char_literal240_tree=null;
        Object char_literal241_tree=null;
        Object string_literal245_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_LET=new RewriteRuleTokenStream(adaptor,"token LET");
        RewriteRuleSubtreeStream stream_letClauseItem=new RewriteRuleSubtreeStream(adaptor,"rule letClauseItem");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:704:5: ( LET letClauseItem ( ',' letClauseItem )* -> ( ^( LetClause letClauseItem ) )+ | {...}? => LET SCORE '$' varName ':=' exprSingle ( ',' ( ( '$' varName ( typeDeclaration )? ) | ftScoreVar ) ':=' exprSingle )* )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LET) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==SCORE) && ((fullText))) {
                    alt69=2;
                }
                else if ( (LA69_1==411) ) {
                    alt69=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:705:6: LET letClauseItem ( ',' letClauseItem )*
                    {
                    LET230=(Token)match(input,LET,FOLLOW_LET_in_letClause5356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LET.add(LET230);

                    pushFollow(FOLLOW_letClauseItem_in_letClause5358);
                    letClauseItem231=letClauseItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_letClauseItem.add(letClauseItem231.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:705:24: ( ',' letClauseItem )*
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( (LA65_0==409) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:705:25: ',' letClauseItem
                    	    {
                    	    char_literal232=(Token)match(input,409,FOLLOW_409_in_letClause5361); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_409.add(char_literal232);

                    	    pushFollow(FOLLOW_letClauseItem_in_letClause5363);
                    	    letClauseItem233=letClauseItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_letClauseItem.add(letClauseItem233.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: letClauseItem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 706:6: -> ( ^( LetClause letClauseItem ) )+
                    {
                        if ( !(stream_letClauseItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_letClauseItem.hasNext() ) {
                            // org/brackit/xquery/compiler/parser/XQuery.g:706:9: ^( LetClause letClauseItem )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LetClause, "LetClause"), root_1);

                            adaptor.addChild(root_1, stream_letClauseItem.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_letClauseItem.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:709:7: {...}? => LET SCORE '$' varName ':=' exprSingle ( ',' ( ( '$' varName ( typeDeclaration )? ) | ftScoreVar ) ':=' exprSingle )*
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((fullText)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "letClause", "fullText");
                    }
                    LET234=(Token)match(input,LET,FOLLOW_LET_in_letClause5451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LET234_tree = (Object)adaptor.create(LET234);
                    adaptor.addChild(root_0, LET234_tree);
                    }
                    SCORE235=(Token)match(input,SCORE,FOLLOW_SCORE_in_letClause5453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SCORE235_tree = (Object)adaptor.create(SCORE235);
                    adaptor.addChild(root_0, SCORE235_tree);
                    }
                    char_literal236=(Token)match(input,411,FOLLOW_411_in_letClause5455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal236_tree = (Object)adaptor.create(char_literal236);
                    adaptor.addChild(root_0, char_literal236_tree);
                    }
                    pushFollow(FOLLOW_varName_in_letClause5457);
                    varName237=varName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varName237.getTree());
                    string_literal238=(Token)match(input,412,FOLLOW_412_in_letClause5459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal238_tree = (Object)adaptor.create(string_literal238);
                    adaptor.addChild(root_0, string_literal238_tree);
                    }
                    pushFollow(FOLLOW_exprSingle_in_letClause5461);
                    exprSingle239=exprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle239.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:711:7: ( ',' ( ( '$' varName ( typeDeclaration )? ) | ftScoreVar ) ':=' exprSingle )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==409) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:711:8: ',' ( ( '$' varName ( typeDeclaration )? ) | ftScoreVar ) ':=' exprSingle
                    	    {
                    	    char_literal240=(Token)match(input,409,FOLLOW_409_in_letClause5470); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal240_tree = (Object)adaptor.create(char_literal240);
                    	    adaptor.addChild(root_0, char_literal240_tree);
                    	    }
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:711:11: ( ( '$' varName ( typeDeclaration )? ) | ftScoreVar )
                    	    int alt67=2;
                    	    int LA67_0 = input.LA(1);

                    	    if ( (LA67_0==411) ) {
                    	        alt67=1;
                    	    }
                    	    else if ( (LA67_0==SCORE) && ((fullText))) {
                    	        alt67=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 67, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt67) {
                    	        case 1 :
                    	            // org/brackit/xquery/compiler/parser/XQuery.g:711:12: ( '$' varName ( typeDeclaration )? )
                    	            {
                    	            // org/brackit/xquery/compiler/parser/XQuery.g:711:12: ( '$' varName ( typeDeclaration )? )
                    	            // org/brackit/xquery/compiler/parser/XQuery.g:711:13: '$' varName ( typeDeclaration )?
                    	            {
                    	            char_literal241=(Token)match(input,411,FOLLOW_411_in_letClause5473); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            char_literal241_tree = (Object)adaptor.create(char_literal241);
                    	            adaptor.addChild(root_0, char_literal241_tree);
                    	            }
                    	            pushFollow(FOLLOW_varName_in_letClause5475);
                    	            varName242=varName();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName242.getTree());
                    	            // org/brackit/xquery/compiler/parser/XQuery.g:711:25: ( typeDeclaration )?
                    	            int alt66=2;
                    	            int LA66_0 = input.LA(1);

                    	            if ( (LA66_0==AS) ) {
                    	                alt66=1;
                    	            }
                    	            switch (alt66) {
                    	                case 1 :
                    	                    // org/brackit/xquery/compiler/parser/XQuery.g:711:25: typeDeclaration
                    	                    {
                    	                    pushFollow(FOLLOW_typeDeclaration_in_letClause5477);
                    	                    typeDeclaration243=typeDeclaration();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration243.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // org/brackit/xquery/compiler/parser/XQuery.g:711:45: ftScoreVar
                    	            {
                    	            pushFollow(FOLLOW_ftScoreVar_in_letClause5483);
                    	            ftScoreVar244=ftScoreVar();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftScoreVar244.getTree());

                    	            }
                    	            break;

                    	    }

                    	    string_literal245=(Token)match(input,412,FOLLOW_412_in_letClause5486); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal245_tree = (Object)adaptor.create(string_literal245);
                    	    adaptor.addChild(root_0, string_literal245_tree);
                    	    }
                    	    pushFollow(FOLLOW_exprSingle_in_letClause5488);
                    	    exprSingle246=exprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle246.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "letClause"

    public static class letClauseItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "letClauseItem"
    // org/brackit/xquery/compiler/parser/XQuery.g:714:1: letClauseItem : '$' typedVarBinding ':=' exprSingle -> typedVarBinding exprSingle ;
    public final XQueryParser.letClauseItem_return letClauseItem() throws RecognitionException {
        XQueryParser.letClauseItem_return retval = new XQueryParser.letClauseItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal247=null;
        Token string_literal249=null;
        XQueryParser.typedVarBinding_return typedVarBinding248 = null;

        XQueryParser.exprSingle_return exprSingle250 = null;


        Object char_literal247_tree=null;
        Object string_literal249_tree=null;
        RewriteRuleTokenStream stream_412=new RewriteRuleTokenStream(adaptor,"token 412");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_typedVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule typedVarBinding");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:715:2: ( '$' typedVarBinding ':=' exprSingle -> typedVarBinding exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:715:4: '$' typedVarBinding ':=' exprSingle
            {
            char_literal247=(Token)match(input,411,FOLLOW_411_in_letClauseItem5511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal247);

            pushFollow(FOLLOW_typedVarBinding_in_letClauseItem5513);
            typedVarBinding248=typedVarBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedVarBinding.add(typedVarBinding248.getTree());
            string_literal249=(Token)match(input,412,FOLLOW_412_in_letClauseItem5515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_412.add(string_literal249);

            pushFollow(FOLLOW_exprSingle_in_letClauseItem5517);
            exprSingle250=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle250.getTree());


            // AST REWRITE
            // elements: exprSingle, typedVarBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 716:2: -> typedVarBinding exprSingle
            {
                adaptor.addChild(root_0, stream_typedVarBinding.nextTree());
                adaptor.addChild(root_0, stream_exprSingle.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "letClauseItem"

    public static class letClauseItemFT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "letClauseItemFT"
    // org/brackit/xquery/compiler/parser/XQuery.g:719:1: letClauseItemFT : ( ( '$' typedVarBinding ) -> typedVarBinding | ftScoreVar -> ftScoreVar ) ':=' exprSingle -> ^( ForLetBindingExpr $letClauseItemFT ^( ForLetExpr exprSingle ) ) ;
    public final XQueryParser.letClauseItemFT_return letClauseItemFT() throws RecognitionException {
        XQueryParser.letClauseItemFT_return retval = new XQueryParser.letClauseItemFT_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal251=null;
        Token string_literal254=null;
        XQueryParser.typedVarBinding_return typedVarBinding252 = null;

        XQueryParser.ftScoreVar_return ftScoreVar253 = null;

        XQueryParser.exprSingle_return exprSingle255 = null;


        Object char_literal251_tree=null;
        Object string_literal254_tree=null;
        RewriteRuleTokenStream stream_412=new RewriteRuleTokenStream(adaptor,"token 412");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_typedVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule typedVarBinding");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_ftScoreVar=new RewriteRuleSubtreeStream(adaptor,"rule ftScoreVar");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:720:2: ( ( ( '$' typedVarBinding ) -> typedVarBinding | ftScoreVar -> ftScoreVar ) ':=' exprSingle -> ^( ForLetBindingExpr $letClauseItemFT ^( ForLetExpr exprSingle ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:720:4: ( ( '$' typedVarBinding ) -> typedVarBinding | ftScoreVar -> ftScoreVar ) ':=' exprSingle
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:720:4: ( ( '$' typedVarBinding ) -> typedVarBinding | ftScoreVar -> ftScoreVar )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==411) ) {
                alt70=1;
            }
            else if ( (LA70_0==SCORE) && ((fullText))) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:721:4: ( '$' typedVarBinding )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:721:4: ( '$' typedVarBinding )
                    // org/brackit/xquery/compiler/parser/XQuery.g:721:5: '$' typedVarBinding
                    {
                    char_literal251=(Token)match(input,411,FOLLOW_411_in_letClauseItemFT5542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_411.add(char_literal251);

                    pushFollow(FOLLOW_typedVarBinding_in_letClauseItemFT5544);
                    typedVarBinding252=typedVarBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedVarBinding.add(typedVarBinding252.getTree());

                    }



                    // AST REWRITE
                    // elements: typedVarBinding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 721:26: -> typedVarBinding
                    {
                        adaptor.addChild(root_0, stream_typedVarBinding.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:722:6: ftScoreVar
                    {
                    pushFollow(FOLLOW_ftScoreVar_in_letClauseItemFT5556);
                    ftScoreVar253=ftScoreVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ftScoreVar.add(ftScoreVar253.getTree());


                    // AST REWRITE
                    // elements: ftScoreVar
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 722:21: -> ftScoreVar
                    {
                        adaptor.addChild(root_0, stream_ftScoreVar.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            string_literal254=(Token)match(input,412,FOLLOW_412_in_letClauseItemFT5572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_412.add(string_literal254);

            pushFollow(FOLLOW_exprSingle_in_letClauseItemFT5574);
            exprSingle255=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle255.getTree());


            // AST REWRITE
            // elements: exprSingle, letClauseItemFT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 725:2: -> ^( ForLetBindingExpr $letClauseItemFT ^( ForLetExpr exprSingle ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:725:5: ^( ForLetBindingExpr $letClauseItemFT ^( ForLetExpr exprSingle ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ForLetBindingExpr, "ForLetBindingExpr"), root_1);

                adaptor.addChild(root_1, stream_retval.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:725:42: ^( ForLetExpr exprSingle )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ForLetExpr, "ForLetExpr"), root_2);

                adaptor.addChild(root_2, stream_exprSingle.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "letClauseItemFT"

    public static class windowClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:728:1: windowClause : FOR ( tumblingWindowClause | slidingWindowClause ) ;
    public final XQueryParser.windowClause_return windowClause() throws RecognitionException {
        XQueryParser.windowClause_return retval = new XQueryParser.windowClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FOR256=null;
        XQueryParser.tumblingWindowClause_return tumblingWindowClause257 = null;

        XQueryParser.slidingWindowClause_return slidingWindowClause258 = null;


        Object FOR256_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:729:5: ( FOR ( tumblingWindowClause | slidingWindowClause ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:729:7: FOR ( tumblingWindowClause | slidingWindowClause )
            {
            root_0 = (Object)adaptor.nil();

            FOR256=(Token)match(input,FOR,FOLLOW_FOR_in_windowClause5662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR256_tree = (Object)adaptor.create(FOR256);
            adaptor.addChild(root_0, FOR256_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:729:11: ( tumblingWindowClause | slidingWindowClause )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==TUMBLING) ) {
                alt71=1;
            }
            else if ( (LA71_0==SLIDING) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:729:12: tumblingWindowClause
                    {
                    pushFollow(FOLLOW_tumblingWindowClause_in_windowClause5665);
                    tumblingWindowClause257=tumblingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tumblingWindowClause257.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:729:35: slidingWindowClause
                    {
                    pushFollow(FOLLOW_slidingWindowClause_in_windowClause5669);
                    slidingWindowClause258=slidingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, slidingWindowClause258.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "windowClause"

    public static class tumblingWindowClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tumblingWindowClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:732:1: tumblingWindowClause : TUMBLING WINDOW '$' varName ( typeDeclaration )? IN exprSingle windowStartCondition ( windowEndCondition )? ;
    public final XQueryParser.tumblingWindowClause_return tumblingWindowClause() throws RecognitionException {
        XQueryParser.tumblingWindowClause_return retval = new XQueryParser.tumblingWindowClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TUMBLING259=null;
        Token WINDOW260=null;
        Token char_literal261=null;
        Token IN264=null;
        XQueryParser.varName_return varName262 = null;

        XQueryParser.typeDeclaration_return typeDeclaration263 = null;

        XQueryParser.exprSingle_return exprSingle265 = null;

        XQueryParser.windowStartCondition_return windowStartCondition266 = null;

        XQueryParser.windowEndCondition_return windowEndCondition267 = null;


        Object TUMBLING259_tree=null;
        Object WINDOW260_tree=null;
        Object char_literal261_tree=null;
        Object IN264_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:733:5: ( TUMBLING WINDOW '$' varName ( typeDeclaration )? IN exprSingle windowStartCondition ( windowEndCondition )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:733:7: TUMBLING WINDOW '$' varName ( typeDeclaration )? IN exprSingle windowStartCondition ( windowEndCondition )?
            {
            root_0 = (Object)adaptor.nil();

            TUMBLING259=(Token)match(input,TUMBLING,FOLLOW_TUMBLING_in_tumblingWindowClause5737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUMBLING259_tree = (Object)adaptor.create(TUMBLING259);
            adaptor.addChild(root_0, TUMBLING259_tree);
            }
            WINDOW260=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_tumblingWindowClause5739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WINDOW260_tree = (Object)adaptor.create(WINDOW260);
            adaptor.addChild(root_0, WINDOW260_tree);
            }
            char_literal261=(Token)match(input,411,FOLLOW_411_in_tumblingWindowClause5741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal261_tree = (Object)adaptor.create(char_literal261);
            adaptor.addChild(root_0, char_literal261_tree);
            }
            pushFollow(FOLLOW_varName_in_tumblingWindowClause5743);
            varName262=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName262.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:733:35: ( typeDeclaration )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==AS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:733:35: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_tumblingWindowClause5745);
                    typeDeclaration263=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration263.getTree());

                    }
                    break;

            }

            IN264=(Token)match(input,IN,FOLLOW_IN_in_tumblingWindowClause5748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN264_tree = (Object)adaptor.create(IN264);
            adaptor.addChild(root_0, IN264_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_tumblingWindowClause5750);
            exprSingle265=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle265.getTree());
            pushFollow(FOLLOW_windowStartCondition_in_tumblingWindowClause5759);
            windowStartCondition266=windowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowStartCondition266.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:734:28: ( windowEndCondition )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( ((LA73_0>=ONLY && LA73_0<=END)) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:734:28: windowEndCondition
                    {
                    pushFollow(FOLLOW_windowEndCondition_in_tumblingWindowClause5761);
                    windowEndCondition267=windowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowEndCondition267.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tumblingWindowClause"

    public static class slidingWindowClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "slidingWindowClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:737:1: slidingWindowClause : SLIDING WINDOW '$' varName ( typeDeclaration )? IN exprSingle windowStartCondition windowEndCondition ;
    public final XQueryParser.slidingWindowClause_return slidingWindowClause() throws RecognitionException {
        XQueryParser.slidingWindowClause_return retval = new XQueryParser.slidingWindowClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SLIDING268=null;
        Token WINDOW269=null;
        Token char_literal270=null;
        Token IN273=null;
        XQueryParser.varName_return varName271 = null;

        XQueryParser.typeDeclaration_return typeDeclaration272 = null;

        XQueryParser.exprSingle_return exprSingle274 = null;

        XQueryParser.windowStartCondition_return windowStartCondition275 = null;

        XQueryParser.windowEndCondition_return windowEndCondition276 = null;


        Object SLIDING268_tree=null;
        Object WINDOW269_tree=null;
        Object char_literal270_tree=null;
        Object IN273_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:738:5: ( SLIDING WINDOW '$' varName ( typeDeclaration )? IN exprSingle windowStartCondition windowEndCondition )
            // org/brackit/xquery/compiler/parser/XQuery.g:738:7: SLIDING WINDOW '$' varName ( typeDeclaration )? IN exprSingle windowStartCondition windowEndCondition
            {
            root_0 = (Object)adaptor.nil();

            SLIDING268=(Token)match(input,SLIDING,FOLLOW_SLIDING_in_slidingWindowClause5830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SLIDING268_tree = (Object)adaptor.create(SLIDING268);
            adaptor.addChild(root_0, SLIDING268_tree);
            }
            WINDOW269=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_slidingWindowClause5832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WINDOW269_tree = (Object)adaptor.create(WINDOW269);
            adaptor.addChild(root_0, WINDOW269_tree);
            }
            char_literal270=(Token)match(input,411,FOLLOW_411_in_slidingWindowClause5835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal270_tree = (Object)adaptor.create(char_literal270);
            adaptor.addChild(root_0, char_literal270_tree);
            }
            pushFollow(FOLLOW_varName_in_slidingWindowClause5837);
            varName271=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName271.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:738:35: ( typeDeclaration )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==AS) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:738:35: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_slidingWindowClause5839);
                    typeDeclaration272=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration272.getTree());

                    }
                    break;

            }

            IN273=(Token)match(input,IN,FOLLOW_IN_in_slidingWindowClause5842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN273_tree = (Object)adaptor.create(IN273);
            adaptor.addChild(root_0, IN273_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_slidingWindowClause5844);
            exprSingle274=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle274.getTree());
            pushFollow(FOLLOW_windowStartCondition_in_slidingWindowClause5853);
            windowStartCondition275=windowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowStartCondition275.getTree());
            pushFollow(FOLLOW_windowEndCondition_in_slidingWindowClause5855);
            windowEndCondition276=windowEndCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowEndCondition276.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "slidingWindowClause"

    public static class windowStartCondition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowStartCondition"
    // org/brackit/xquery/compiler/parser/XQuery.g:741:1: windowStartCondition : START windowVars WHEN exprSingle ;
    public final XQueryParser.windowStartCondition_return windowStartCondition() throws RecognitionException {
        XQueryParser.windowStartCondition_return retval = new XQueryParser.windowStartCondition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token START277=null;
        Token WHEN279=null;
        XQueryParser.windowVars_return windowVars278 = null;

        XQueryParser.exprSingle_return exprSingle280 = null;


        Object START277_tree=null;
        Object WHEN279_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:742:5: ( START windowVars WHEN exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:742:7: START windowVars WHEN exprSingle
            {
            root_0 = (Object)adaptor.nil();

            START277=(Token)match(input,START,FOLLOW_START_in_windowStartCondition5917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            START277_tree = (Object)adaptor.create(START277);
            adaptor.addChild(root_0, START277_tree);
            }
            pushFollow(FOLLOW_windowVars_in_windowStartCondition5919);
            windowVars278=windowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowVars278.getTree());
            WHEN279=(Token)match(input,WHEN,FOLLOW_WHEN_in_windowStartCondition5921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN279_tree = (Object)adaptor.create(WHEN279);
            adaptor.addChild(root_0, WHEN279_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_windowStartCondition5923);
            exprSingle280=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle280.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "windowStartCondition"

    public static class windowEndCondition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowEndCondition"
    // org/brackit/xquery/compiler/parser/XQuery.g:744:1: windowEndCondition : ( ONLY )? END windowVars WHEN exprSingle ;
    public final XQueryParser.windowEndCondition_return windowEndCondition() throws RecognitionException {
        XQueryParser.windowEndCondition_return retval = new XQueryParser.windowEndCondition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ONLY281=null;
        Token END282=null;
        Token WHEN284=null;
        XQueryParser.windowVars_return windowVars283 = null;

        XQueryParser.exprSingle_return exprSingle285 = null;


        Object ONLY281_tree=null;
        Object END282_tree=null;
        Object WHEN284_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:745:5: ( ( ONLY )? END windowVars WHEN exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:745:7: ( ONLY )? END windowVars WHEN exprSingle
            {
            root_0 = (Object)adaptor.nil();

            // org/brackit/xquery/compiler/parser/XQuery.g:745:7: ( ONLY )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==ONLY) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:745:7: ONLY
                    {
                    ONLY281=(Token)match(input,ONLY,FOLLOW_ONLY_in_windowEndCondition5987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONLY281_tree = (Object)adaptor.create(ONLY281);
                    adaptor.addChild(root_0, ONLY281_tree);
                    }

                    }
                    break;

            }

            END282=(Token)match(input,END,FOLLOW_END_in_windowEndCondition5990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END282_tree = (Object)adaptor.create(END282);
            adaptor.addChild(root_0, END282_tree);
            }
            pushFollow(FOLLOW_windowVars_in_windowEndCondition5992);
            windowVars283=windowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowVars283.getTree());
            WHEN284=(Token)match(input,WHEN,FOLLOW_WHEN_in_windowEndCondition5994); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN284_tree = (Object)adaptor.create(WHEN284);
            adaptor.addChild(root_0, WHEN284_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_windowEndCondition5996);
            exprSingle285=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle285.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "windowEndCondition"

    public static class windowVars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowVars"
    // org/brackit/xquery/compiler/parser/XQuery.g:747:1: windowVars : ( '$' currentItem )? ( positionalVar )? ( PREVIOUS '$' previousItem )? ( NEXT '$' nextItem )? ;
    public final XQueryParser.windowVars_return windowVars() throws RecognitionException {
        XQueryParser.windowVars_return retval = new XQueryParser.windowVars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal286=null;
        Token PREVIOUS289=null;
        Token char_literal290=null;
        Token NEXT292=null;
        Token char_literal293=null;
        XQueryParser.currentItem_return currentItem287 = null;

        XQueryParser.positionalVar_return positionalVar288 = null;

        XQueryParser.previousItem_return previousItem291 = null;

        XQueryParser.nextItem_return nextItem294 = null;


        Object char_literal286_tree=null;
        Object PREVIOUS289_tree=null;
        Object char_literal290_tree=null;
        Object NEXT292_tree=null;
        Object char_literal293_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:748:5: ( ( '$' currentItem )? ( positionalVar )? ( PREVIOUS '$' previousItem )? ( NEXT '$' nextItem )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:748:7: ( '$' currentItem )? ( positionalVar )? ( PREVIOUS '$' previousItem )? ( NEXT '$' nextItem )?
            {
            root_0 = (Object)adaptor.nil();

            // org/brackit/xquery/compiler/parser/XQuery.g:748:7: ( '$' currentItem )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==411) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:748:8: '$' currentItem
                    {
                    char_literal286=(Token)match(input,411,FOLLOW_411_in_windowVars6069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal286_tree = (Object)adaptor.create(char_literal286);
                    adaptor.addChild(root_0, char_literal286_tree);
                    }
                    pushFollow(FOLLOW_currentItem_in_windowVars6071);
                    currentItem287=currentItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, currentItem287.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:748:26: ( positionalVar )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==AT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:748:26: positionalVar
                    {
                    pushFollow(FOLLOW_positionalVar_in_windowVars6075);
                    positionalVar288=positionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, positionalVar288.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:749:7: ( PREVIOUS '$' previousItem )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==PREVIOUS) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:749:8: PREVIOUS '$' previousItem
                    {
                    PREVIOUS289=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_windowVars6086); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS289_tree = (Object)adaptor.create(PREVIOUS289);
                    adaptor.addChild(root_0, PREVIOUS289_tree);
                    }
                    char_literal290=(Token)match(input,411,FOLLOW_411_in_windowVars6088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal290_tree = (Object)adaptor.create(char_literal290);
                    adaptor.addChild(root_0, char_literal290_tree);
                    }
                    pushFollow(FOLLOW_previousItem_in_windowVars6090);
                    previousItem291=previousItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, previousItem291.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:749:36: ( NEXT '$' nextItem )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==NEXT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:749:37: NEXT '$' nextItem
                    {
                    NEXT292=(Token)match(input,NEXT,FOLLOW_NEXT_in_windowVars6095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEXT292_tree = (Object)adaptor.create(NEXT292);
                    adaptor.addChild(root_0, NEXT292_tree);
                    }
                    char_literal293=(Token)match(input,411,FOLLOW_411_in_windowVars6097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal293_tree = (Object)adaptor.create(char_literal293);
                    adaptor.addChild(root_0, char_literal293_tree);
                    }
                    pushFollow(FOLLOW_nextItem_in_windowVars6099);
                    nextItem294=nextItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nextItem294.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "windowVars"

    public static class currentItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "currentItem"
    // org/brackit/xquery/compiler/parser/XQuery.g:751:1: currentItem : qName ;
    public final XQueryParser.currentItem_return currentItem() throws RecognitionException {
        XQueryParser.currentItem_return retval = new XQueryParser.currentItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName295 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:752:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:752:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_currentItem6172);
            qName295=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName295.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "currentItem"

    public static class previousItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "previousItem"
    // org/brackit/xquery/compiler/parser/XQuery.g:754:1: previousItem : qName ;
    public final XQueryParser.previousItem_return previousItem() throws RecognitionException {
        XQueryParser.previousItem_return retval = new XQueryParser.previousItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName296 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:755:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:755:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_previousItem6242);
            qName296=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName296.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "previousItem"

    public static class nextItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nextItem"
    // org/brackit/xquery/compiler/parser/XQuery.g:757:1: nextItem : qName ;
    public final XQueryParser.nextItem_return nextItem() throws RecognitionException {
        XQueryParser.nextItem_return retval = new XQueryParser.nextItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName297 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:758:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:758:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_nextItem6316);
            qName297=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName297.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nextItem"

    public static class countClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "countClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:760:1: countClause : COUNT '$' name= varName -> ^( CountClause Variable[variables.declare($name.text)] ) ;
    public final XQueryParser.countClause_return countClause() throws RecognitionException {
        XQueryParser.countClause_return retval = new XQueryParser.countClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COUNT298=null;
        Token char_literal299=null;
        XQueryParser.varName_return name = null;


        Object COUNT298_tree=null;
        Object char_literal299_tree=null;
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:761:5: ( COUNT '$' name= varName -> ^( CountClause Variable[variables.declare($name.text)] ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:761:7: COUNT '$' name= varName
            {
            COUNT298=(Token)match(input,COUNT,FOLLOW_COUNT_in_countClause6387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COUNT.add(COUNT298);

            char_literal299=(Token)match(input,411,FOLLOW_411_in_countClause6389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal299);

            pushFollow(FOLLOW_varName_in_countClause6393);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 761:30: -> ^( CountClause Variable[variables.declare($name.text)] )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:761:33: ^( CountClause Variable[variables.declare($name.text)] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CountClause, "CountClause"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "countClause"

    public static class whereClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:763:1: whereClause : WHERE exprSingle -> ^( WhereClause exprSingle ) ;
    public final XQueryParser.whereClause_return whereClause() throws RecognitionException {
        XQueryParser.whereClause_return retval = new XQueryParser.whereClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHERE300=null;
        XQueryParser.exprSingle_return exprSingle301 = null;


        Object WHERE300_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:764:5: ( WHERE exprSingle -> ^( WhereClause exprSingle ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:764:7: WHERE exprSingle
            {
            WHERE300=(Token)match(input,WHERE,FOLLOW_WHERE_in_whereClause6418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHERE.add(WHERE300);

            pushFollow(FOLLOW_exprSingle_in_whereClause6420);
            exprSingle301=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle301.getTree());


            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 765:5: -> ^( WhereClause exprSingle )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:765:8: ^( WhereClause exprSingle )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WhereClause, "WhereClause"), root_1);

                adaptor.addChild(root_1, stream_exprSingle.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class groupByClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:767:1: groupByClause : GROUP BY groupingSpecList -> ^( GroupByClause groupingSpecList ) ;
    public final XQueryParser.groupByClause_return groupByClause() throws RecognitionException {
        XQueryParser.groupByClause_return retval = new XQueryParser.groupByClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token GROUP302=null;
        Token BY303=null;
        XQueryParser.groupingSpecList_return groupingSpecList304 = null;


        Object GROUP302_tree=null;
        Object BY303_tree=null;
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_groupingSpecList=new RewriteRuleSubtreeStream(adaptor,"rule groupingSpecList");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:768:5: ( GROUP BY groupingSpecList -> ^( GroupByClause groupingSpecList ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:768:7: GROUP BY groupingSpecList
            {
            GROUP302=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupByClause6501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP302);

            BY303=(Token)match(input,BY,FOLLOW_BY_in_groupByClause6503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY303);

            pushFollow(FOLLOW_groupingSpecList_in_groupByClause6505);
            groupingSpecList304=groupingSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupingSpecList.add(groupingSpecList304.getTree());


            // AST REWRITE
            // elements: groupingSpecList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 768:33: -> ^( GroupByClause groupingSpecList )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:768:36: ^( GroupByClause groupingSpecList )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GroupByClause, "GroupByClause"), root_1);

                adaptor.addChild(root_1, stream_groupingSpecList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByClause"

    public static class groupingSpecList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupingSpecList"
    // org/brackit/xquery/compiler/parser/XQuery.g:770:1: groupingSpecList : groupingSpec ( ',' groupingSpec )* -> ( ^( GroupBySpec groupingSpec ) )+ ;
    public final XQueryParser.groupingSpecList_return groupingSpecList() throws RecognitionException {
        XQueryParser.groupingSpecList_return retval = new XQueryParser.groupingSpecList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal306=null;
        XQueryParser.groupingSpec_return groupingSpec305 = null;

        XQueryParser.groupingSpec_return groupingSpec307 = null;


        Object char_literal306_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleSubtreeStream stream_groupingSpec=new RewriteRuleSubtreeStream(adaptor,"rule groupingSpec");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:771:5: ( groupingSpec ( ',' groupingSpec )* -> ( ^( GroupBySpec groupingSpec ) )+ )
            // org/brackit/xquery/compiler/parser/XQuery.g:771:7: groupingSpec ( ',' groupingSpec )*
            {
            pushFollow(FOLLOW_groupingSpec_in_groupingSpecList6579);
            groupingSpec305=groupingSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupingSpec.add(groupingSpec305.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:771:20: ( ',' groupingSpec )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==409) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:771:21: ',' groupingSpec
            	    {
            	    char_literal306=(Token)match(input,409,FOLLOW_409_in_groupingSpecList6582); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_409.add(char_literal306);

            	    pushFollow(FOLLOW_groupingSpec_in_groupingSpecList6584);
            	    groupingSpec307=groupingSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupingSpec.add(groupingSpec307.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);



            // AST REWRITE
            // elements: groupingSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 771:40: -> ( ^( GroupBySpec groupingSpec ) )+
            {
                if ( !(stream_groupingSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupingSpec.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:771:43: ^( GroupBySpec groupingSpec )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GroupBySpec, "GroupBySpec"), root_1);

                    adaptor.addChild(root_1, stream_groupingSpec.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_groupingSpec.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupingSpecList"

    public static class groupingSpec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupingSpec"
    // org/brackit/xquery/compiler/parser/XQuery.g:773:1: groupingSpec : '$' name= varName ( COLLATION uriLiteral )? -> VariableRef[variables.resolve($name.text)] ( ^( Collation uriLiteral ) )? ;
    public final XQueryParser.groupingSpec_return groupingSpec() throws RecognitionException {
        XQueryParser.groupingSpec_return retval = new XQueryParser.groupingSpec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal308=null;
        Token COLLATION309=null;
        XQueryParser.varName_return name = null;

        XQueryParser.uriLiteral_return uriLiteral310 = null;


        Object char_literal308_tree=null;
        Object COLLATION309_tree=null;
        RewriteRuleTokenStream stream_COLLATION=new RewriteRuleTokenStream(adaptor,"token COLLATION");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:774:5: ( '$' name= varName ( COLLATION uriLiteral )? -> VariableRef[variables.resolve($name.text)] ( ^( Collation uriLiteral ) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:774:7: '$' name= varName ( COLLATION uriLiteral )?
            {
            char_literal308=(Token)match(input,411,FOLLOW_411_in_groupingSpec6665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal308);

            pushFollow(FOLLOW_varName_in_groupingSpec6669);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:774:24: ( COLLATION uriLiteral )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==COLLATION) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:774:25: COLLATION uriLiteral
                    {
                    COLLATION309=(Token)match(input,COLLATION,FOLLOW_COLLATION_in_groupingSpec6672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLLATION.add(COLLATION309);

                    pushFollow(FOLLOW_uriLiteral_in_groupingSpec6674);
                    uriLiteral310=uriLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_uriLiteral.add(uriLiteral310.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: uriLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 774:48: -> VariableRef[variables.resolve($name.text)] ( ^( Collation uriLiteral ) )?
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VariableRef, variables.resolve((name!=null?input.toString(name.start,name.stop):null))));
                // org/brackit/xquery/compiler/parser/XQuery.g:774:94: ( ^( Collation uriLiteral ) )?
                if ( stream_uriLiteral.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:774:94: ^( Collation uriLiteral )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Collation, "Collation"), root_1);

                    adaptor.addChild(root_1, stream_uriLiteral.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_uriLiteral.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupingSpec"

    public static class orderByClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:778:1: orderByClause : ( ( ORDER BY -> OrderByClause ) | ( STABLE ORDER BY -> OrderByClause ) ) orderSpecList -> ^( $orderByClause orderSpecList ) ;
    public final XQueryParser.orderByClause_return orderByClause() throws RecognitionException {
        XQueryParser.orderByClause_return retval = new XQueryParser.orderByClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ORDER311=null;
        Token BY312=null;
        Token STABLE313=null;
        Token ORDER314=null;
        Token BY315=null;
        XQueryParser.orderSpecList_return orderSpecList316 = null;


        Object ORDER311_tree=null;
        Object BY312_tree=null;
        Object STABLE313_tree=null;
        Object ORDER314_tree=null;
        Object BY315_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_STABLE=new RewriteRuleTokenStream(adaptor,"token STABLE");
        RewriteRuleSubtreeStream stream_orderSpecList=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecList");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:779:5: ( ( ( ORDER BY -> OrderByClause ) | ( STABLE ORDER BY -> OrderByClause ) ) orderSpecList -> ^( $orderByClause orderSpecList ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:779:7: ( ( ORDER BY -> OrderByClause ) | ( STABLE ORDER BY -> OrderByClause ) ) orderSpecList
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:779:7: ( ( ORDER BY -> OrderByClause ) | ( STABLE ORDER BY -> OrderByClause ) )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==ORDER) ) {
                alt82=1;
            }
            else if ( (LA82_0==STABLE) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:780:7: ( ORDER BY -> OrderByClause )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:780:7: ( ORDER BY -> OrderByClause )
                    // org/brackit/xquery/compiler/parser/XQuery.g:780:8: ORDER BY
                    {
                    ORDER311=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderByClause6719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER311);

                    BY312=(Token)match(input,BY,FOLLOW_BY_in_orderByClause6721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY312);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 780:17: -> OrderByClause
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(OrderByClause, "OrderByClause"));

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:781:7: ( STABLE ORDER BY -> OrderByClause )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:781:7: ( STABLE ORDER BY -> OrderByClause )
                    // org/brackit/xquery/compiler/parser/XQuery.g:781:8: STABLE ORDER BY
                    {
                    STABLE313=(Token)match(input,STABLE,FOLLOW_STABLE_in_orderByClause6738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STABLE.add(STABLE313);

                    ORDER314=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderByClause6740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER314);

                    BY315=(Token)match(input,BY,FOLLOW_BY_in_orderByClause6742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY315);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 781:24: -> OrderByClause
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(OrderByClause, "OrderByClause"));

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_orderSpecList_in_orderByClause6761);
            orderSpecList316=orderSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderSpecList.add(orderSpecList316.getTree());


            // AST REWRITE
            // elements: orderByClause, orderSpecList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 783:20: -> ^( $orderByClause orderSpecList )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:783:23: ^( $orderByClause orderSpecList )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_retval.nextNode(), root_1);

                adaptor.addChild(root_1, stream_orderSpecList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByClause"

    public static class orderSpecList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderSpecList"
    // org/brackit/xquery/compiler/parser/XQuery.g:786:1: orderSpecList : orderSpec ( ',' orderSpec )* -> ( ^( OrderBySpec orderSpec ) )+ ;
    public final XQueryParser.orderSpecList_return orderSpecList() throws RecognitionException {
        XQueryParser.orderSpecList_return retval = new XQueryParser.orderSpecList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal318=null;
        XQueryParser.orderSpec_return orderSpec317 = null;

        XQueryParser.orderSpec_return orderSpec319 = null;


        Object char_literal318_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleSubtreeStream stream_orderSpec=new RewriteRuleSubtreeStream(adaptor,"rule orderSpec");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:787:5: ( orderSpec ( ',' orderSpec )* -> ( ^( OrderBySpec orderSpec ) )+ )
            // org/brackit/xquery/compiler/parser/XQuery.g:787:7: orderSpec ( ',' orderSpec )*
            {
            pushFollow(FOLLOW_orderSpec_in_orderSpecList6791);
            orderSpec317=orderSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderSpec.add(orderSpec317.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:787:17: ( ',' orderSpec )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==409) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:787:18: ',' orderSpec
            	    {
            	    char_literal318=(Token)match(input,409,FOLLOW_409_in_orderSpecList6794); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_409.add(char_literal318);

            	    pushFollow(FOLLOW_orderSpec_in_orderSpecList6796);
            	    orderSpec319=orderSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderSpec.add(orderSpec319.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);



            // AST REWRITE
            // elements: orderSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 788:5: -> ( ^( OrderBySpec orderSpec ) )+
            {
                if ( !(stream_orderSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderSpec.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:788:8: ^( OrderBySpec orderSpec )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrderBySpec, "OrderBySpec"), root_1);

                    adaptor.addChild(root_1, stream_orderSpec.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_orderSpec.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderSpecList"

    public static class orderSpec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderSpec"
    // org/brackit/xquery/compiler/parser/XQuery.g:792:1: orderSpec : exprSingle orderModifier -> exprSingle ( orderModifier )? ;
    public final XQueryParser.orderSpec_return orderSpec() throws RecognitionException {
        XQueryParser.orderSpec_return retval = new XQueryParser.orderSpec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.exprSingle_return exprSingle320 = null;

        XQueryParser.orderModifier_return orderModifier321 = null;


        RewriteRuleSubtreeStream stream_orderModifier=new RewriteRuleSubtreeStream(adaptor,"rule orderModifier");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:793:5: ( exprSingle orderModifier -> exprSingle ( orderModifier )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:793:7: exprSingle orderModifier
            {
            pushFollow(FOLLOW_exprSingle_in_orderSpec6833);
            exprSingle320=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle320.getTree());
            pushFollow(FOLLOW_orderModifier_in_orderSpec6835);
            orderModifier321=orderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderModifier.add(orderModifier321.getTree());


            // AST REWRITE
            // elements: exprSingle, orderModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 794:5: -> exprSingle ( orderModifier )?
            {
                adaptor.addChild(root_0, stream_exprSingle.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:794:19: ( orderModifier )?
                if ( stream_orderModifier.hasNext() ) {
                    adaptor.addChild(root_0, stream_orderModifier.nextTree());

                }
                stream_orderModifier.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderSpec"

    public static class orderModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderModifier"
    // org/brackit/xquery/compiler/parser/XQuery.g:797:1: orderModifier : ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? -> ( ^( OrderByKind ( ASCENDING )? ( DESCENDING )? ) )? ( ^( OrderByEmptyMode ( GREATEST )? ( LEAST )? ) )? ( ^( Collation ( uriLiteral )? ) )? ;
    public final XQueryParser.orderModifier_return orderModifier() throws RecognitionException {
        XQueryParser.orderModifier_return retval = new XQueryParser.orderModifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ASCENDING322=null;
        Token DESCENDING323=null;
        Token EMPTY324=null;
        Token GREATEST325=null;
        Token LEAST326=null;
        Token COLLATION327=null;
        XQueryParser.uriLiteral_return uriLiteral328 = null;


        Object ASCENDING322_tree=null;
        Object DESCENDING323_tree=null;
        Object EMPTY324_tree=null;
        Object GREATEST325_tree=null;
        Object LEAST326_tree=null;
        Object COLLATION327_tree=null;
        RewriteRuleTokenStream stream_LEAST=new RewriteRuleTokenStream(adaptor,"token LEAST");
        RewriteRuleTokenStream stream_DESCENDING=new RewriteRuleTokenStream(adaptor,"token DESCENDING");
        RewriteRuleTokenStream stream_COLLATION=new RewriteRuleTokenStream(adaptor,"token COLLATION");
        RewriteRuleTokenStream stream_ASCENDING=new RewriteRuleTokenStream(adaptor,"token ASCENDING");
        RewriteRuleTokenStream stream_GREATEST=new RewriteRuleTokenStream(adaptor,"token GREATEST");
        RewriteRuleTokenStream stream_EMPTY=new RewriteRuleTokenStream(adaptor,"token EMPTY");
        RewriteRuleSubtreeStream stream_uriLiteral=new RewriteRuleSubtreeStream(adaptor,"rule uriLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:798:5: ( ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? -> ( ^( OrderByKind ( ASCENDING )? ( DESCENDING )? ) )? ( ^( OrderByEmptyMode ( GREATEST )? ( LEAST )? ) )? ( ^( Collation ( uriLiteral )? ) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:798:8: ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:798:8: ( ASCENDING | DESCENDING )?
            int alt84=3;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ASCENDING) ) {
                alt84=1;
            }
            else if ( (LA84_0==DESCENDING) ) {
                alt84=2;
            }
            switch (alt84) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:798:9: ASCENDING
                    {
                    ASCENDING322=(Token)match(input,ASCENDING,FOLLOW_ASCENDING_in_orderModifier6869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASCENDING.add(ASCENDING322);


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:798:21: DESCENDING
                    {
                    DESCENDING323=(Token)match(input,DESCENDING,FOLLOW_DESCENDING_in_orderModifier6873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESCENDING.add(DESCENDING323);


                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:799:6: ( EMPTY ( GREATEST | LEAST ) )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==EMPTY) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:799:7: EMPTY ( GREATEST | LEAST )
                    {
                    EMPTY324=(Token)match(input,EMPTY,FOLLOW_EMPTY_in_orderModifier6884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY.add(EMPTY324);

                    // org/brackit/xquery/compiler/parser/XQuery.g:799:13: ( GREATEST | LEAST )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==GREATEST) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==LEAST) ) {
                        alt85=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:799:14: GREATEST
                            {
                            GREATEST325=(Token)match(input,GREATEST,FOLLOW_GREATEST_in_orderModifier6887); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GREATEST.add(GREATEST325);


                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:799:25: LEAST
                            {
                            LEAST326=(Token)match(input,LEAST,FOLLOW_LEAST_in_orderModifier6891); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEAST.add(LEAST326);


                            }
                            break;

                    }


                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:800:6: ( COLLATION uriLiteral )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==COLLATION) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:800:7: COLLATION uriLiteral
                    {
                    COLLATION327=(Token)match(input,COLLATION,FOLLOW_COLLATION_in_orderModifier6903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLLATION.add(COLLATION327);

                    pushFollow(FOLLOW_uriLiteral_in_orderModifier6905);
                    uriLiteral328=uriLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_uriLiteral.add(uriLiteral328.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: DESCENDING, GREATEST, ASCENDING, uriLiteral, LEAST
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 801:5: -> ( ^( OrderByKind ( ASCENDING )? ( DESCENDING )? ) )? ( ^( OrderByEmptyMode ( GREATEST )? ( LEAST )? ) )? ( ^( Collation ( uriLiteral )? ) )?
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:801:8: ( ^( OrderByKind ( ASCENDING )? ( DESCENDING )? ) )?
                if ( stream_DESCENDING.hasNext()||stream_ASCENDING.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:801:8: ^( OrderByKind ( ASCENDING )? ( DESCENDING )? )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrderByKind, "OrderByKind"), root_1);

                    // org/brackit/xquery/compiler/parser/XQuery.g:801:22: ( ASCENDING )?
                    if ( stream_ASCENDING.hasNext() ) {
                        adaptor.addChild(root_1, stream_ASCENDING.nextNode());

                    }
                    stream_ASCENDING.reset();
                    // org/brackit/xquery/compiler/parser/XQuery.g:801:33: ( DESCENDING )?
                    if ( stream_DESCENDING.hasNext() ) {
                        adaptor.addChild(root_1, stream_DESCENDING.nextNode());

                    }
                    stream_DESCENDING.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_DESCENDING.reset();
                stream_ASCENDING.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:802:6: ( ^( OrderByEmptyMode ( GREATEST )? ( LEAST )? ) )?
                if ( stream_GREATEST.hasNext()||stream_LEAST.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:802:6: ^( OrderByEmptyMode ( GREATEST )? ( LEAST )? )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrderByEmptyMode, "OrderByEmptyMode"), root_1);

                    // org/brackit/xquery/compiler/parser/XQuery.g:802:25: ( GREATEST )?
                    if ( stream_GREATEST.hasNext() ) {
                        adaptor.addChild(root_1, stream_GREATEST.nextNode());

                    }
                    stream_GREATEST.reset();
                    // org/brackit/xquery/compiler/parser/XQuery.g:802:35: ( LEAST )?
                    if ( stream_LEAST.hasNext() ) {
                        adaptor.addChild(root_1, stream_LEAST.nextNode());

                    }
                    stream_LEAST.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_GREATEST.reset();
                stream_LEAST.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:803:6: ( ^( Collation ( uriLiteral )? ) )?
                if ( stream_uriLiteral.hasNext() ) {
                    // org/brackit/xquery/compiler/parser/XQuery.g:803:6: ^( Collation ( uriLiteral )? )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Collation, "Collation"), root_1);

                    // org/brackit/xquery/compiler/parser/XQuery.g:803:18: ( uriLiteral )?
                    if ( stream_uriLiteral.hasNext() ) {
                        adaptor.addChild(root_1, stream_uriLiteral.nextTree());

                    }
                    stream_uriLiteral.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_uriLiteral.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderModifier"

    public static class returnClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "returnClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:806:1: returnClause : RETURN exprSingle -> ^( ReturnClause exprSingle ) ;
    public final XQueryParser.returnClause_return returnClause() throws RecognitionException {
        XQueryParser.returnClause_return retval = new XQueryParser.returnClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token RETURN329=null;
        XQueryParser.exprSingle_return exprSingle330 = null;


        Object RETURN329_tree=null;
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:807:5: ( RETURN exprSingle -> ^( ReturnClause exprSingle ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:807:7: RETURN exprSingle
            {
            RETURN329=(Token)match(input,RETURN,FOLLOW_RETURN_in_returnClause7028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURN.add(RETURN329);

            pushFollow(FOLLOW_exprSingle_in_returnClause7030);
            exprSingle330=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle330.getTree());


            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 808:5: -> ^( ReturnClause exprSingle )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:808:8: ^( ReturnClause exprSingle )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ReturnClause, "ReturnClause"), root_1);

                adaptor.addChild(root_1, stream_exprSingle.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "returnClause"

    public static class quantifiedExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantifiedExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:816:1: quantifiedExpr : ( SOME ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ ) SATISFIES exprSingle -> ^( QuantifiedExpr SomeQuantifier quantifiedVarBinding exprSingle ) | EVERY ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ ) SATISFIES exprSingle -> ^( QuantifiedExpr EveryQuantifier ( quantifiedVarBinding )+ exprSingle ) );
    public final XQueryParser.quantifiedExpr_return quantifiedExpr() throws RecognitionException {
        XQueryParser.quantifiedExpr_return retval = new XQueryParser.quantifiedExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOME331=null;
        Token char_literal333=null;
        Token SATISFIES335=null;
        Token EVERY337=null;
        Token char_literal339=null;
        Token SATISFIES341=null;
        XQueryParser.quantifiedVarBinding_return quantifiedVarBinding332 = null;

        XQueryParser.quantifiedVarBinding_return quantifiedVarBinding334 = null;

        XQueryParser.exprSingle_return exprSingle336 = null;

        XQueryParser.quantifiedVarBinding_return quantifiedVarBinding338 = null;

        XQueryParser.quantifiedVarBinding_return quantifiedVarBinding340 = null;

        XQueryParser.exprSingle_return exprSingle342 = null;


        Object SOME331_tree=null;
        Object char_literal333_tree=null;
        Object SATISFIES335_tree=null;
        Object EVERY337_tree=null;
        Object char_literal339_tree=null;
        Object SATISFIES341_tree=null;
        RewriteRuleTokenStream stream_EVERY=new RewriteRuleTokenStream(adaptor,"token EVERY");
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_SATISFIES=new RewriteRuleTokenStream(adaptor,"token SATISFIES");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_quantifiedVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule quantifiedVarBinding");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:817:5: ( SOME ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ ) SATISFIES exprSingle -> ^( QuantifiedExpr SomeQuantifier quantifiedVarBinding exprSingle ) | EVERY ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ ) SATISFIES exprSingle -> ^( QuantifiedExpr EveryQuantifier ( quantifiedVarBinding )+ exprSingle ) )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==SOME) ) {
                alt90=1;
            }
            else if ( (LA90_0==EVERY) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:817:7: SOME ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ ) SATISFIES exprSingle
                    {
                    SOME331=(Token)match(input,SOME,FOLLOW_SOME_in_quantifiedExpr7082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SOME.add(SOME331);

                    // org/brackit/xquery/compiler/parser/XQuery.g:818:7: ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ )
                    // org/brackit/xquery/compiler/parser/XQuery.g:818:8: quantifiedVarBinding ( ',' quantifiedVarBinding )*
                    {
                    pushFollow(FOLLOW_quantifiedVarBinding_in_quantifiedExpr7091);
                    quantifiedVarBinding332=quantifiedVarBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantifiedVarBinding.add(quantifiedVarBinding332.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:818:29: ( ',' quantifiedVarBinding )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==409) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:818:30: ',' quantifiedVarBinding
                    	    {
                    	    char_literal333=(Token)match(input,409,FOLLOW_409_in_quantifiedExpr7094); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_409.add(char_literal333);

                    	    pushFollow(FOLLOW_quantifiedVarBinding_in_quantifiedExpr7096);
                    	    quantifiedVarBinding334=quantifiedVarBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_quantifiedVarBinding.add(quantifiedVarBinding334.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: quantifiedVarBinding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 818:57: -> ( quantifiedVarBinding )+
                    {
                        if ( !(stream_quantifiedVarBinding.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_quantifiedVarBinding.hasNext() ) {
                            adaptor.addChild(root_0, stream_quantifiedVarBinding.nextTree());

                        }
                        stream_quantifiedVarBinding.reset();

                    }

                    retval.tree = root_0;}
                    }

                    SATISFIES335=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_quantifiedExpr7112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SATISFIES.add(SATISFIES335);

                    pushFollow(FOLLOW_exprSingle_in_quantifiedExpr7114);
                    exprSingle336=exprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle336.getTree());


                    // AST REWRITE
                    // elements: quantifiedVarBinding, exprSingle
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 820:7: -> ^( QuantifiedExpr SomeQuantifier quantifiedVarBinding exprSingle )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:820:10: ^( QuantifiedExpr SomeQuantifier quantifiedVarBinding exprSingle )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QuantifiedExpr, "QuantifiedExpr"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(SomeQuantifier, "SomeQuantifier"));
                        adaptor.addChild(root_1, stream_quantifiedVarBinding.nextTree());
                        adaptor.addChild(root_1, stream_exprSingle.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:821:7: EVERY ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ ) SATISFIES exprSingle
                    {
                    EVERY337=(Token)match(input,EVERY,FOLLOW_EVERY_in_quantifiedExpr7140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY.add(EVERY337);

                    // org/brackit/xquery/compiler/parser/XQuery.g:822:7: ( quantifiedVarBinding ( ',' quantifiedVarBinding )* -> ( quantifiedVarBinding )+ )
                    // org/brackit/xquery/compiler/parser/XQuery.g:822:8: quantifiedVarBinding ( ',' quantifiedVarBinding )*
                    {
                    pushFollow(FOLLOW_quantifiedVarBinding_in_quantifiedExpr7149);
                    quantifiedVarBinding338=quantifiedVarBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantifiedVarBinding.add(quantifiedVarBinding338.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:822:29: ( ',' quantifiedVarBinding )*
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==409) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:822:30: ',' quantifiedVarBinding
                    	    {
                    	    char_literal339=(Token)match(input,409,FOLLOW_409_in_quantifiedExpr7152); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_409.add(char_literal339);

                    	    pushFollow(FOLLOW_quantifiedVarBinding_in_quantifiedExpr7154);
                    	    quantifiedVarBinding340=quantifiedVarBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_quantifiedVarBinding.add(quantifiedVarBinding340.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: quantifiedVarBinding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 822:57: -> ( quantifiedVarBinding )+
                    {
                        if ( !(stream_quantifiedVarBinding.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_quantifiedVarBinding.hasNext() ) {
                            adaptor.addChild(root_0, stream_quantifiedVarBinding.nextTree());

                        }
                        stream_quantifiedVarBinding.reset();

                    }

                    retval.tree = root_0;}
                    }

                    SATISFIES341=(Token)match(input,SATISFIES,FOLLOW_SATISFIES_in_quantifiedExpr7170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SATISFIES.add(SATISFIES341);

                    pushFollow(FOLLOW_exprSingle_in_quantifiedExpr7172);
                    exprSingle342=exprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle342.getTree());


                    // AST REWRITE
                    // elements: quantifiedVarBinding, exprSingle
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 824:7: -> ^( QuantifiedExpr EveryQuantifier ( quantifiedVarBinding )+ exprSingle )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:824:10: ^( QuantifiedExpr EveryQuantifier ( quantifiedVarBinding )+ exprSingle )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QuantifiedExpr, "QuantifiedExpr"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(EveryQuantifier, "EveryQuantifier"));
                        if ( !(stream_quantifiedVarBinding.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_quantifiedVarBinding.hasNext() ) {
                            adaptor.addChild(root_1, stream_quantifiedVarBinding.nextTree());

                        }
                        stream_quantifiedVarBinding.reset();
                        adaptor.addChild(root_1, stream_exprSingle.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantifiedExpr"

    public static class quantifiedVarBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantifiedVarBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:827:1: quantifiedVarBinding : '$' typedVarBinding IN exprSingle -> typedVarBinding exprSingle ;
    public final XQueryParser.quantifiedVarBinding_return quantifiedVarBinding() throws RecognitionException {
        XQueryParser.quantifiedVarBinding_return retval = new XQueryParser.quantifiedVarBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal343=null;
        Token IN345=null;
        XQueryParser.typedVarBinding_return typedVarBinding344 = null;

        XQueryParser.exprSingle_return exprSingle346 = null;


        Object char_literal343_tree=null;
        Object IN345_tree=null;
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_typedVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule typedVarBinding");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:828:5: ( '$' typedVarBinding IN exprSingle -> typedVarBinding exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:829:5: '$' typedVarBinding IN exprSingle
            {
            char_literal343=(Token)match(input,411,FOLLOW_411_in_quantifiedVarBinding7216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal343);

            pushFollow(FOLLOW_typedVarBinding_in_quantifiedVarBinding7218);
            typedVarBinding344=typedVarBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedVarBinding.add(typedVarBinding344.getTree());
            IN345=(Token)match(input,IN,FOLLOW_IN_in_quantifiedVarBinding7220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IN.add(IN345);

            pushFollow(FOLLOW_exprSingle_in_quantifiedVarBinding7222);
            exprSingle346=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle346.getTree());


            // AST REWRITE
            // elements: typedVarBinding, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 830:5: -> typedVarBinding exprSingle
            {
                adaptor.addChild(root_0, stream_typedVarBinding.nextTree());
                adaptor.addChild(root_0, stream_exprSingle.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantifiedVarBinding"

    public static class typeswitchExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeswitchExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:833:1: typeswitchExpr : TYPESWITCH '(' expr ')' ( caseClause )+ defaultCase -> ^( TypeSwitch expr ( caseClause )+ defaultCase ) ;
    public final XQueryParser.typeswitchExpr_return typeswitchExpr() throws RecognitionException {
        XQueryParser.typeswitchExpr_return retval = new XQueryParser.typeswitchExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TYPESWITCH347=null;
        Token char_literal348=null;
        Token char_literal350=null;
        XQueryParser.expr_return expr349 = null;

        XQueryParser.caseClause_return caseClause351 = null;

        XQueryParser.defaultCase_return defaultCase352 = null;


        Object TYPESWITCH347_tree=null;
        Object char_literal348_tree=null;
        Object char_literal350_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_TYPESWITCH=new RewriteRuleTokenStream(adaptor,"token TYPESWITCH");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_defaultCase=new RewriteRuleSubtreeStream(adaptor,"rule defaultCase");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_caseClause=new RewriteRuleSubtreeStream(adaptor,"rule caseClause");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:834:5: ( TYPESWITCH '(' expr ')' ( caseClause )+ defaultCase -> ^( TypeSwitch expr ( caseClause )+ defaultCase ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:834:7: TYPESWITCH '(' expr ')' ( caseClause )+ defaultCase
            {
            TYPESWITCH347=(Token)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_typeswitchExpr7253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TYPESWITCH.add(TYPESWITCH347);

            char_literal348=(Token)match(input,408,FOLLOW_408_in_typeswitchExpr7255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal348);

            pushFollow(FOLLOW_expr_in_typeswitchExpr7257);
            expr349=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr349.getTree());
            char_literal350=(Token)match(input,410,FOLLOW_410_in_typeswitchExpr7259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal350);

            // org/brackit/xquery/compiler/parser/XQuery.g:835:7: ( caseClause )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==CASE) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:835:7: caseClause
            	    {
            	    pushFollow(FOLLOW_caseClause_in_typeswitchExpr7268);
            	    caseClause351=caseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_caseClause.add(caseClause351.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);

            pushFollow(FOLLOW_defaultCase_in_typeswitchExpr7278);
            defaultCase352=defaultCase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defaultCase.add(defaultCase352.getTree());


            // AST REWRITE
            // elements: caseClause, expr, defaultCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 837:7: -> ^( TypeSwitch expr ( caseClause )+ defaultCase )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:837:10: ^( TypeSwitch expr ( caseClause )+ defaultCase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypeSwitch, "TypeSwitch"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());
                if ( !(stream_caseClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_caseClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_caseClause.nextTree());

                }
                stream_caseClause.reset();
                adaptor.addChild(root_1, stream_defaultCase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeswitchExpr"

    public static class caseClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:840:1: caseClause : CASE ( caseVarBinding )? sequenceType RETURN exprSingle -> ^( TypeSwitchCase ( caseVarBinding )? ^( SequenceType sequenceType ) exprSingle ) ;
    public final XQueryParser.caseClause_return caseClause() throws RecognitionException {
        XQueryParser.caseClause_return retval = new XQueryParser.caseClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CASE353=null;
        Token RETURN356=null;
        XQueryParser.caseVarBinding_return caseVarBinding354 = null;

        XQueryParser.sequenceType_return sequenceType355 = null;

        XQueryParser.exprSingle_return exprSingle357 = null;


        Object CASE353_tree=null;
        Object RETURN356_tree=null;
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_caseVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule caseVarBinding");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");

          variables.openScope();

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:847:5: ( CASE ( caseVarBinding )? sequenceType RETURN exprSingle -> ^( TypeSwitchCase ( caseVarBinding )? ^( SequenceType sequenceType ) exprSingle ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:847:7: CASE ( caseVarBinding )? sequenceType RETURN exprSingle
            {
            CASE353=(Token)match(input,CASE,FOLLOW_CASE_in_caseClause7328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE.add(CASE353);

            // org/brackit/xquery/compiler/parser/XQuery.g:847:12: ( caseVarBinding )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==411) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:847:12: caseVarBinding
                    {
                    pushFollow(FOLLOW_caseVarBinding_in_caseClause7330);
                    caseVarBinding354=caseVarBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_caseVarBinding.add(caseVarBinding354.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_sequenceType_in_caseClause7333);
            sequenceType355=sequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequenceType.add(sequenceType355.getTree());
            RETURN356=(Token)match(input,RETURN,FOLLOW_RETURN_in_caseClause7335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURN.add(RETURN356);

            pushFollow(FOLLOW_exprSingle_in_caseClause7337);
            exprSingle357=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle357.getTree());


            // AST REWRITE
            // elements: exprSingle, caseVarBinding, sequenceType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 848:5: -> ^( TypeSwitchCase ( caseVarBinding )? ^( SequenceType sequenceType ) exprSingle )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:848:8: ^( TypeSwitchCase ( caseVarBinding )? ^( SequenceType sequenceType ) exprSingle )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypeSwitchCase, "TypeSwitchCase"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:848:25: ( caseVarBinding )?
                if ( stream_caseVarBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_caseVarBinding.nextTree());

                }
                stream_caseVarBinding.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:848:41: ^( SequenceType sequenceType )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SequenceType, "SequenceType"), root_2);

                adaptor.addChild(root_2, stream_sequenceType.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exprSingle.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                variables.closeScope();

            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseClause"

    public static class caseVarBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseVarBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:851:1: caseVarBinding : '$' name= varName AS -> ^( Variable[variables.declare($name.text)] ) ;
    public final XQueryParser.caseVarBinding_return caseVarBinding() throws RecognitionException {
        XQueryParser.caseVarBinding_return retval = new XQueryParser.caseVarBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal358=null;
        Token AS359=null;
        XQueryParser.varName_return name = null;


        Object char_literal358_tree=null;
        Object AS359_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:852:3: ( '$' name= varName AS -> ^( Variable[variables.declare($name.text)] ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:853:3: '$' name= varName AS
            {
            char_literal358=(Token)match(input,411,FOLLOW_411_in_caseVarBinding7376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal358);

            pushFollow(FOLLOW_varName_in_caseVarBinding7380);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());
            AS359=(Token)match(input,AS,FOLLOW_AS_in_caseVarBinding7382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS359);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 854:3: -> ^( Variable[variables.declare($name.text)] )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:854:6: ^( Variable[variables.declare($name.text)] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseVarBinding"

    public static class defaultCase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultCase"
    // org/brackit/xquery/compiler/parser/XQuery.g:857:1: defaultCase : DEFAULT ( defaultVarBinding )? RETURN exprSingle -> ^( TypeSwitchDefault ( defaultVarBinding )? exprSingle ) ;
    public final XQueryParser.defaultCase_return defaultCase() throws RecognitionException {
        XQueryParser.defaultCase_return retval = new XQueryParser.defaultCase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DEFAULT360=null;
        Token RETURN362=null;
        XQueryParser.defaultVarBinding_return defaultVarBinding361 = null;

        XQueryParser.exprSingle_return exprSingle363 = null;


        Object DEFAULT360_tree=null;
        Object RETURN362_tree=null;
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_defaultVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule defaultVarBinding");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");

          variables.openScope();

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:864:5: ( DEFAULT ( defaultVarBinding )? RETURN exprSingle -> ^( TypeSwitchDefault ( defaultVarBinding )? exprSingle ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:864:7: DEFAULT ( defaultVarBinding )? RETURN exprSingle
            {
            DEFAULT360=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultCase7416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT360);

            // org/brackit/xquery/compiler/parser/XQuery.g:864:15: ( defaultVarBinding )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==411) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:864:15: defaultVarBinding
                    {
                    pushFollow(FOLLOW_defaultVarBinding_in_defaultCase7418);
                    defaultVarBinding361=defaultVarBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultVarBinding.add(defaultVarBinding361.getTree());

                    }
                    break;

            }

            RETURN362=(Token)match(input,RETURN,FOLLOW_RETURN_in_defaultCase7421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURN.add(RETURN362);

            pushFollow(FOLLOW_exprSingle_in_defaultCase7423);
            exprSingle363=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle363.getTree());


            // AST REWRITE
            // elements: defaultVarBinding, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 865:1: -> ^( TypeSwitchDefault ( defaultVarBinding )? exprSingle )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:865:4: ^( TypeSwitchDefault ( defaultVarBinding )? exprSingle )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypeSwitchDefault, "TypeSwitchDefault"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:865:24: ( defaultVarBinding )?
                if ( stream_defaultVarBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_defaultVarBinding.nextTree());

                }
                stream_defaultVarBinding.reset();
                adaptor.addChild(root_1, stream_exprSingle.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                variables.closeScope();

            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultCase"

    public static class defaultVarBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultVarBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:868:1: defaultVarBinding : '$' name= varName -> ^( Variable[variables.declare($name.text)] ) ;
    public final XQueryParser.defaultVarBinding_return defaultVarBinding() throws RecognitionException {
        XQueryParser.defaultVarBinding_return retval = new XQueryParser.defaultVarBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal364=null;
        XQueryParser.varName_return name = null;


        Object char_literal364_tree=null;
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:869:3: ( '$' name= varName -> ^( Variable[variables.declare($name.text)] ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:870:3: '$' name= varName
            {
            char_literal364=(Token)match(input,411,FOLLOW_411_in_defaultVarBinding7455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal364);

            pushFollow(FOLLOW_varName_in_defaultVarBinding7459);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 871:1: -> ^( Variable[variables.declare($name.text)] )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:871:4: ^( Variable[variables.declare($name.text)] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultVarBinding"

    public static class ifExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ifExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:874:1: ifExpr : IF '(' expr ')' THEN a= exprSingle ELSE b= exprSingle -> ^( IfExpr expr $a $b) ;
    public final XQueryParser.ifExpr_return ifExpr() throws RecognitionException {
        XQueryParser.ifExpr_return retval = new XQueryParser.ifExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IF365=null;
        Token char_literal366=null;
        Token char_literal368=null;
        Token THEN369=null;
        Token ELSE370=null;
        XQueryParser.exprSingle_return a = null;

        XQueryParser.exprSingle_return b = null;

        XQueryParser.expr_return expr367 = null;


        Object IF365_tree=null;
        Object char_literal366_tree=null;
        Object char_literal368_tree=null;
        Object THEN369_tree=null;
        Object ELSE370_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:875:5: ( IF '(' expr ')' THEN a= exprSingle ELSE b= exprSingle -> ^( IfExpr expr $a $b) )
            // org/brackit/xquery/compiler/parser/XQuery.g:875:7: IF '(' expr ')' THEN a= exprSingle ELSE b= exprSingle
            {
            IF365=(Token)match(input,IF,FOLLOW_IF_in_ifExpr7484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF365);

            char_literal366=(Token)match(input,408,FOLLOW_408_in_ifExpr7486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal366);

            pushFollow(FOLLOW_expr_in_ifExpr7488);
            expr367=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr367.getTree());
            char_literal368=(Token)match(input,410,FOLLOW_410_in_ifExpr7490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal368);

            THEN369=(Token)match(input,THEN,FOLLOW_THEN_in_ifExpr7492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN369);

            pushFollow(FOLLOW_exprSingle_in_ifExpr7496);
            a=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(a.getTree());
            ELSE370=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifExpr7498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELSE.add(ELSE370);

            pushFollow(FOLLOW_exprSingle_in_ifExpr7502);
            b=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(b.getTree());


            // AST REWRITE
            // elements: a, expr, b
            // token labels: 
            // rule labels: retval, b, a
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);

            root_0 = (Object)adaptor.nil();
            // 876:5: -> ^( IfExpr expr $a $b)
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:876:8: ^( IfExpr expr $a $b)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IfExpr, "IfExpr"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());
                adaptor.addChild(root_1, stream_a.nextTree());
                adaptor.addChild(root_1, stream_b.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ifExpr"

    public static class orExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:884:1: orExpr : ( andExpr -> andExpr ) ( OR operand= andExpr -> ^( OrExpr $orExpr $operand) )* ;
    public final XQueryParser.orExpr_return orExpr() throws RecognitionException {
        XQueryParser.orExpr_return retval = new XQueryParser.orExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OR372=null;
        XQueryParser.andExpr_return operand = null;

        XQueryParser.andExpr_return andExpr371 = null;


        Object OR372_tree=null;
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleSubtreeStream stream_andExpr=new RewriteRuleSubtreeStream(adaptor,"rule andExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:885:5: ( ( andExpr -> andExpr ) ( OR operand= andExpr -> ^( OrExpr $orExpr $operand) )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:885:7: ( andExpr -> andExpr ) ( OR operand= andExpr -> ^( OrExpr $orExpr $operand) )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:885:7: ( andExpr -> andExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:885:8: andExpr
            {
            pushFollow(FOLLOW_andExpr_in_orExpr7557);
            andExpr371=andExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpr.add(andExpr371.getTree());


            // AST REWRITE
            // elements: andExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 885:16: -> andExpr
            {
                adaptor.addChild(root_0, stream_andExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:886:6: ( OR operand= andExpr -> ^( OrExpr $orExpr $operand) )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==OR) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:886:7: OR operand= andExpr
            	    {
            	    OR372=(Token)match(input,OR,FOLLOW_OR_in_orExpr7570); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR.add(OR372);

            	    pushFollow(FOLLOW_andExpr_in_orExpr7574);
            	    operand=andExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpr.add(operand.getTree());


            	    // AST REWRITE
            	    // elements: operand, orExpr
            	    // token labels: 
            	    // rule labels: retval, operand
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 886:26: -> ^( OrExpr $orExpr $operand)
            	    {
            	        // org/brackit/xquery/compiler/parser/XQuery.g:886:29: ^( OrExpr $orExpr $operand)
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrExpr, "OrExpr"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_operand.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpr"

    public static class andExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:889:1: andExpr : ( comparisonExpr -> comparisonExpr ) ( AND operand= comparisonExpr -> ^( AndExpr $andExpr $operand) )* ;
    public final XQueryParser.andExpr_return andExpr() throws RecognitionException {
        XQueryParser.andExpr_return retval = new XQueryParser.andExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AND374=null;
        XQueryParser.comparisonExpr_return operand = null;

        XQueryParser.comparisonExpr_return comparisonExpr373 = null;


        Object AND374_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleSubtreeStream stream_comparisonExpr=new RewriteRuleSubtreeStream(adaptor,"rule comparisonExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:890:5: ( ( comparisonExpr -> comparisonExpr ) ( AND operand= comparisonExpr -> ^( AndExpr $andExpr $operand) )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:890:7: ( comparisonExpr -> comparisonExpr ) ( AND operand= comparisonExpr -> ^( AndExpr $andExpr $operand) )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:890:7: ( comparisonExpr -> comparisonExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:890:8: comparisonExpr
            {
            pushFollow(FOLLOW_comparisonExpr_in_andExpr7610);
            comparisonExpr373=comparisonExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_comparisonExpr.add(comparisonExpr373.getTree());


            // AST REWRITE
            // elements: comparisonExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 890:23: -> comparisonExpr
            {
                adaptor.addChild(root_0, stream_comparisonExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:891:6: ( AND operand= comparisonExpr -> ^( AndExpr $andExpr $operand) )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==AND) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:891:7: AND operand= comparisonExpr
            	    {
            	    AND374=(Token)match(input,AND,FOLLOW_AND_in_andExpr7623); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(AND374);

            	    pushFollow(FOLLOW_comparisonExpr_in_andExpr7627);
            	    operand=comparisonExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comparisonExpr.add(operand.getTree());


            	    // AST REWRITE
            	    // elements: operand, andExpr
            	    // token labels: 
            	    // rule labels: retval, operand
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 891:34: -> ^( AndExpr $andExpr $operand)
            	    {
            	        // org/brackit/xquery/compiler/parser/XQuery.g:891:37: ^( AndExpr $andExpr $operand)
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AndExpr, "AndExpr"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_operand.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpr"

    public static class comparisonExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comparisonExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:894:1: comparisonExpr : ( ftContainsExpr -> ftContainsExpr ) ( comparisonOperator operand= ftContainsExpr -> ^( ComparisonExpr comparisonOperator $comparisonExpr $operand) )? ;
    public final XQueryParser.comparisonExpr_return comparisonExpr() throws RecognitionException {
        XQueryParser.comparisonExpr_return retval = new XQueryParser.comparisonExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.ftContainsExpr_return operand = null;

        XQueryParser.ftContainsExpr_return ftContainsExpr375 = null;

        XQueryParser.comparisonOperator_return comparisonOperator376 = null;


        RewriteRuleSubtreeStream stream_ftContainsExpr=new RewriteRuleSubtreeStream(adaptor,"rule ftContainsExpr");
        RewriteRuleSubtreeStream stream_comparisonOperator=new RewriteRuleSubtreeStream(adaptor,"rule comparisonOperator");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:895:5: ( ( ftContainsExpr -> ftContainsExpr ) ( comparisonOperator operand= ftContainsExpr -> ^( ComparisonExpr comparisonOperator $comparisonExpr $operand) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:898:7: ( ftContainsExpr -> ftContainsExpr ) ( comparisonOperator operand= ftContainsExpr -> ^( ComparisonExpr comparisonOperator $comparisonExpr $operand) )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:898:7: ( ftContainsExpr -> ftContainsExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:898:8: ftContainsExpr
            {
            pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr7742);
            ftContainsExpr375=ftContainsExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ftContainsExpr.add(ftContainsExpr375.getTree());


            // AST REWRITE
            // elements: ftContainsExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 898:23: -> ftContainsExpr
            {
                adaptor.addChild(root_0, stream_ftContainsExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:899:7: ( comparisonOperator operand= ftContainsExpr -> ^( ComparisonExpr comparisonOperator $comparisonExpr $operand) )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( ((LA96_0>=LAngle && LA96_0<=RAngle)||LA96_0==SymEq||(LA96_0>=EQ && LA96_0<=IS)||(LA96_0>=417 && LA96_0<=421)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:900:8: comparisonOperator operand= ftContainsExpr
                    {
                    pushFollow(FOLLOW_comparisonOperator_in_comparisonExpr7764);
                    comparisonOperator376=comparisonOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comparisonOperator.add(comparisonOperator376.getTree());
                    pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr7768);
                    operand=ftContainsExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ftContainsExpr.add(operand.getTree());


                    // AST REWRITE
                    // elements: operand, comparisonOperator, comparisonExpr
                    // token labels: 
                    // rule labels: retval, operand
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 901:7: -> ^( ComparisonExpr comparisonOperator $comparisonExpr $operand)
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:901:10: ^( ComparisonExpr comparisonOperator $comparisonExpr $operand)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ComparisonExpr, "ComparisonExpr"), root_1);

                        adaptor.addChild(root_1, stream_comparisonOperator.nextTree());
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_operand.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comparisonExpr"

    public static class comparisonOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comparisonOperator"
    // org/brackit/xquery/compiler/parser/XQuery.g:905:1: comparisonOperator : ( valueComp | generalComp | nodeComp ) ;
    public final XQueryParser.comparisonOperator_return comparisonOperator() throws RecognitionException {
        XQueryParser.comparisonOperator_return retval = new XQueryParser.comparisonOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.valueComp_return valueComp377 = null;

        XQueryParser.generalComp_return generalComp378 = null;

        XQueryParser.nodeComp_return nodeComp379 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:906:2: ( ( valueComp | generalComp | nodeComp ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:906:4: ( valueComp | generalComp | nodeComp )
            {
            root_0 = (Object)adaptor.nil();

            // org/brackit/xquery/compiler/parser/XQuery.g:906:4: ( valueComp | generalComp | nodeComp )
            int alt97=3;
            switch ( input.LA(1) ) {
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
                {
                alt97=1;
                }
                break;
            case LAngle:
            case RAngle:
            case SymEq:
            case 417:
            case 418:
            case 419:
                {
                alt97=2;
                }
                break;
            case IS:
            case 420:
            case 421:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:906:5: valueComp
                    {
                    pushFollow(FOLLOW_valueComp_in_comparisonOperator7813);
                    valueComp377=valueComp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, valueComp377.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:906:17: generalComp
                    {
                    pushFollow(FOLLOW_generalComp_in_comparisonOperator7817);
                    generalComp378=generalComp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generalComp378.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:906:31: nodeComp
                    {
                    pushFollow(FOLLOW_nodeComp_in_comparisonOperator7821);
                    nodeComp379=nodeComp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nodeComp379.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comparisonOperator"

    public static class ftContainsExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftContainsExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:910:1: ftContainsExpr : rangeExpr ( ftContainsClause )? ;
    public final XQueryParser.ftContainsExpr_return ftContainsExpr() throws RecognitionException {
        XQueryParser.ftContainsExpr_return retval = new XQueryParser.ftContainsExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.rangeExpr_return rangeExpr380 = null;

        XQueryParser.ftContainsClause_return ftContainsClause381 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:911:5: ( rangeExpr ( ftContainsClause )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:911:7: rangeExpr ( ftContainsClause )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_rangeExpr_in_ftContainsExpr7895);
            rangeExpr380=rangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeExpr380.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:911:17: ( ftContainsClause )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==CONTAINS) && ((fullText))) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:911:17: ftContainsClause
                    {
                    pushFollow(FOLLOW_ftContainsClause_in_ftContainsExpr7897);
                    ftContainsClause381=ftContainsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftContainsClause381.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftContainsExpr"

    public static class ftContainsClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftContainsClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:914:1: ftContainsClause : {...}? => CONTAINS TEXT ftSelection ( ftIgnoreOption )? ;
    public final XQueryParser.ftContainsClause_return ftContainsClause() throws RecognitionException {
        XQueryParser.ftContainsClause_return retval = new XQueryParser.ftContainsClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CONTAINS382=null;
        Token TEXT383=null;
        XQueryParser.ftSelection_return ftSelection384 = null;

        XQueryParser.ftIgnoreOption_return ftIgnoreOption385 = null;


        Object CONTAINS382_tree=null;
        Object TEXT383_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:915:5: ({...}? => CONTAINS TEXT ftSelection ( ftIgnoreOption )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:915:8: {...}? => CONTAINS TEXT ftSelection ( ftIgnoreOption )?
            {
            root_0 = (Object)adaptor.nil();

            if ( !((fullText)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ftContainsClause", "fullText");
            }
            CONTAINS382=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_ftContainsClause7924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTAINS382_tree = (Object)adaptor.create(CONTAINS382);
            adaptor.addChild(root_0, CONTAINS382_tree);
            }
            TEXT383=(Token)match(input,TEXT,FOLLOW_TEXT_in_ftContainsClause7926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT383_tree = (Object)adaptor.create(TEXT383);
            adaptor.addChild(root_0, TEXT383_tree);
            }
            pushFollow(FOLLOW_ftSelection_in_ftContainsClause7928);
            ftSelection384=ftSelection();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftSelection384.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:915:49: ( ftIgnoreOption )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==WITHOUT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:915:49: ftIgnoreOption
                    {
                    pushFollow(FOLLOW_ftIgnoreOption_in_ftContainsClause7930);
                    ftIgnoreOption385=ftIgnoreOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftIgnoreOption385.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftContainsClause"

    public static class rangeExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:918:1: rangeExpr : ( additiveExpr -> additiveExpr ) ( TO operand= additiveExpr -> ^( RangeExpr $rangeExpr $operand) )? ;
    public final XQueryParser.rangeExpr_return rangeExpr() throws RecognitionException {
        XQueryParser.rangeExpr_return retval = new XQueryParser.rangeExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TO387=null;
        XQueryParser.additiveExpr_return operand = null;

        XQueryParser.additiveExpr_return additiveExpr386 = null;


        Object TO387_tree=null;
        RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
        RewriteRuleSubtreeStream stream_additiveExpr=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:919:5: ( ( additiveExpr -> additiveExpr ) ( TO operand= additiveExpr -> ^( RangeExpr $rangeExpr $operand) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:919:7: ( additiveExpr -> additiveExpr ) ( TO operand= additiveExpr -> ^( RangeExpr $rangeExpr $operand) )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:919:7: ( additiveExpr -> additiveExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:919:8: additiveExpr
            {
            pushFollow(FOLLOW_additiveExpr_in_rangeExpr7954);
            additiveExpr386=additiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpr.add(additiveExpr386.getTree());


            // AST REWRITE
            // elements: additiveExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 919:21: -> additiveExpr
            {
                adaptor.addChild(root_0, stream_additiveExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:920:6: ( TO operand= additiveExpr -> ^( RangeExpr $rangeExpr $operand) )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==TO) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:920:7: TO operand= additiveExpr
                    {
                    TO387=(Token)match(input,TO,FOLLOW_TO_in_rangeExpr7967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TO.add(TO387);

                    pushFollow(FOLLOW_additiveExpr_in_rangeExpr7971);
                    operand=additiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpr.add(operand.getTree());


                    // AST REWRITE
                    // elements: operand, rangeExpr
                    // token labels: 
                    // rule labels: retval, operand
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 920:31: -> ^( RangeExpr $rangeExpr $operand)
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:920:34: ^( RangeExpr $rangeExpr $operand)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RangeExpr, "RangeExpr"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_operand.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeExpr"

    public static class additiveExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:923:1: additiveExpr : ( multiplicativeExpr -> multiplicativeExpr ) (operator= additiveExprOperator operand= multiplicativeExpr -> ^( ArithmeticExpr $operator $additiveExpr $operand) )* ;
    public final XQueryParser.additiveExpr_return additiveExpr() throws RecognitionException {
        XQueryParser.additiveExpr_return retval = new XQueryParser.additiveExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.additiveExprOperator_return operator = null;

        XQueryParser.multiplicativeExpr_return operand = null;

        XQueryParser.multiplicativeExpr_return multiplicativeExpr388 = null;


        RewriteRuleSubtreeStream stream_additiveExprOperator=new RewriteRuleSubtreeStream(adaptor,"rule additiveExprOperator");
        RewriteRuleSubtreeStream stream_multiplicativeExpr=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:924:5: ( ( multiplicativeExpr -> multiplicativeExpr ) (operator= additiveExprOperator operand= multiplicativeExpr -> ^( ArithmeticExpr $operator $additiveExpr $operand) )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:924:7: ( multiplicativeExpr -> multiplicativeExpr ) (operator= additiveExprOperator operand= multiplicativeExpr -> ^( ArithmeticExpr $operator $additiveExpr $operand) )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:924:7: ( multiplicativeExpr -> multiplicativeExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:924:8: multiplicativeExpr
            {
            pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr8007);
            multiplicativeExpr388=multiplicativeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpr.add(multiplicativeExpr388.getTree());


            // AST REWRITE
            // elements: multiplicativeExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 924:27: -> multiplicativeExpr
            {
                adaptor.addChild(root_0, stream_multiplicativeExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:925:6: (operator= additiveExprOperator operand= multiplicativeExpr -> ^( ArithmeticExpr $operator $additiveExpr $operand) )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( ((LA101_0>=413 && LA101_0<=414)) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:926:7: operator= additiveExprOperator operand= multiplicativeExpr
            	    {
            	    pushFollow(FOLLOW_additiveExprOperator_in_additiveExpr8029);
            	    operator=additiveExprOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_additiveExprOperator.add(operator.getTree());
            	    pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr8039);
            	    operand=multiplicativeExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpr.add(operand.getTree());


            	    // AST REWRITE
            	    // elements: additiveExpr, operator, operand
            	    // token labels: 
            	    // rule labels: retval, operand, operator
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);
            	    RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator",operator!=null?operator.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 928:7: -> ^( ArithmeticExpr $operator $additiveExpr $operand)
            	    {
            	        // org/brackit/xquery/compiler/parser/XQuery.g:928:10: ^( ArithmeticExpr $operator $additiveExpr $operand)
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArithmeticExpr, "ArithmeticExpr"), root_1);

            	        adaptor.addChild(root_1, stream_operator.nextTree());
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_operand.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpr"

    public static class additiveExprOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExprOperator"
    // org/brackit/xquery/compiler/parser/XQuery.g:932:1: additiveExprOperator : ( '+' -> AddOp | '-' -> SubtractOp );
    public final XQueryParser.additiveExprOperator_return additiveExprOperator() throws RecognitionException {
        XQueryParser.additiveExprOperator_return retval = new XQueryParser.additiveExprOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal389=null;
        Token char_literal390=null;

        Object char_literal389_tree=null;
        Object char_literal390_tree=null;
        RewriteRuleTokenStream stream_414=new RewriteRuleTokenStream(adaptor,"token 414");
        RewriteRuleTokenStream stream_413=new RewriteRuleTokenStream(adaptor,"token 413");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:933:2: ( '+' -> AddOp | '-' -> SubtractOp )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==413) ) {
                alt102=1;
            }
            else if ( (LA102_0==414) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:933:4: '+'
                    {
                    char_literal389=(Token)match(input,413,FOLLOW_413_in_additiveExprOperator8086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_413.add(char_literal389);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 933:8: -> AddOp
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(AddOp, "AddOp"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:933:19: '-'
                    {
                    char_literal390=(Token)match(input,414,FOLLOW_414_in_additiveExprOperator8094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_414.add(char_literal390);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 933:23: -> SubtractOp
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(SubtractOp, "SubtractOp"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExprOperator"

    public static class multiplicativeExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:936:1: multiplicativeExpr : ( unionExpr -> unionExpr ) (operator= multiplicativeExprOperator operand= unionExpr -> ^( ArithmeticExpr $operator $multiplicativeExpr $operand) )* ;
    public final XQueryParser.multiplicativeExpr_return multiplicativeExpr() throws RecognitionException {
        XQueryParser.multiplicativeExpr_return retval = new XQueryParser.multiplicativeExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.multiplicativeExprOperator_return operator = null;

        XQueryParser.unionExpr_return operand = null;

        XQueryParser.unionExpr_return unionExpr391 = null;


        RewriteRuleSubtreeStream stream_multiplicativeExprOperator=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExprOperator");
        RewriteRuleSubtreeStream stream_unionExpr=new RewriteRuleSubtreeStream(adaptor,"rule unionExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:937:5: ( ( unionExpr -> unionExpr ) (operator= multiplicativeExprOperator operand= unionExpr -> ^( ArithmeticExpr $operator $multiplicativeExpr $operand) )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:937:7: ( unionExpr -> unionExpr ) (operator= multiplicativeExprOperator operand= unionExpr -> ^( ArithmeticExpr $operator $multiplicativeExpr $operand) )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:937:7: ( unionExpr -> unionExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:937:8: unionExpr
            {
            pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr8117);
            unionExpr391=unionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unionExpr.add(unionExpr391.getTree());


            // AST REWRITE
            // elements: unionExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 937:18: -> unionExpr
            {
                adaptor.addChild(root_0, stream_unionExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:938:6: (operator= multiplicativeExprOperator operand= unionExpr -> ^( ArithmeticExpr $operator $multiplicativeExpr $operand) )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( ((LA103_0>=DIV && LA103_0<=MOD)||LA103_0==415) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:939:7: operator= multiplicativeExprOperator operand= unionExpr
            	    {
            	    pushFollow(FOLLOW_multiplicativeExprOperator_in_multiplicativeExpr8139);
            	    operator=multiplicativeExprOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExprOperator.add(operator.getTree());
            	    pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr8149);
            	    operand=unionExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unionExpr.add(operand.getTree());


            	    // AST REWRITE
            	    // elements: operand, operator, multiplicativeExpr
            	    // token labels: 
            	    // rule labels: retval, operand, operator
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);
            	    RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator",operator!=null?operator.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 941:7: -> ^( ArithmeticExpr $operator $multiplicativeExpr $operand)
            	    {
            	        // org/brackit/xquery/compiler/parser/XQuery.g:941:10: ^( ArithmeticExpr $operator $multiplicativeExpr $operand)
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArithmeticExpr, "ArithmeticExpr"), root_1);

            	        adaptor.addChild(root_1, stream_operator.nextTree());
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_operand.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpr"

    public static class multiplicativeExprOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExprOperator"
    // org/brackit/xquery/compiler/parser/XQuery.g:945:1: multiplicativeExprOperator : ( '*' -> MultiplyOp | DIV -> DivideOp | IDIV -> IDivideOp | MOD -> ModulusOp );
    public final XQueryParser.multiplicativeExprOperator_return multiplicativeExprOperator() throws RecognitionException {
        XQueryParser.multiplicativeExprOperator_return retval = new XQueryParser.multiplicativeExprOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal392=null;
        Token DIV393=null;
        Token IDIV394=null;
        Token MOD395=null;

        Object char_literal392_tree=null;
        Object DIV393_tree=null;
        Object IDIV394_tree=null;
        Object MOD395_tree=null;
        RewriteRuleTokenStream stream_415=new RewriteRuleTokenStream(adaptor,"token 415");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleTokenStream stream_IDIV=new RewriteRuleTokenStream(adaptor,"token IDIV");
        RewriteRuleTokenStream stream_MOD=new RewriteRuleTokenStream(adaptor,"token MOD");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:946:2: ( '*' -> MultiplyOp | DIV -> DivideOp | IDIV -> IDivideOp | MOD -> ModulusOp )
            int alt104=4;
            switch ( input.LA(1) ) {
            case 415:
                {
                alt104=1;
                }
                break;
            case DIV:
                {
                alt104=2;
                }
                break;
            case IDIV:
                {
                alt104=3;
                }
                break;
            case MOD:
                {
                alt104=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:946:5: '*'
                    {
                    char_literal392=(Token)match(input,415,FOLLOW_415_in_multiplicativeExprOperator8199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_415.add(char_literal392);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 946:9: -> MultiplyOp
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(MultiplyOp, "MultiplyOp"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:947:11: DIV
                    {
                    DIV393=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeExprOperator8215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIV.add(DIV393);

                    if ( state.backtracking==0 ) {
                      needSpaceBetween(IntegerLiteral);
                    }
                    if ( state.backtracking==0 ) {
                      needSpaceBetween(DecimalLiteral);
                    }
                    if ( state.backtracking==0 ) {
                      needSpaceBetween(DoubleLiteral );
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 950:3: -> DivideOp
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(DivideOp, "DivideOp"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:951:11: IDIV
                    {
                    IDIV394=(Token)match(input,IDIV,FOLLOW_IDIV_in_multiplicativeExprOperator8270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDIV.add(IDIV394);

                    if ( state.backtracking==0 ) {
                      needSpaceBetween(IntegerLiteral);
                    }
                    if ( state.backtracking==0 ) {
                      needSpaceBetween(DecimalLiteral);
                    }
                    if ( state.backtracking==0 ) {
                      needSpaceBetween(DoubleLiteral );
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 954:9: -> IDivideOp
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(IDivideOp, "IDivideOp"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:955:11: MOD
                    {
                    MOD395=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeExprOperator8330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOD.add(MOD395);

                    if ( state.backtracking==0 ) {
                      needSpaceBetween(IntegerLiteral);
                    }
                    if ( state.backtracking==0 ) {
                      needSpaceBetween(DecimalLiteral);
                    }
                    if ( state.backtracking==0 ) {
                      needSpaceBetween(DoubleLiteral );
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 958:9: -> ModulusOp
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ModulusOp, "ModulusOp"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExprOperator"

    public static class unionExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unionExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:961:1: unionExpr : ( intersectExceptExpr -> intersectExceptExpr ) ( ( UNION | '|' ) operand= intersectExceptExpr -> ^( UnionExpr $unionExpr $operand) )* ;
    public final XQueryParser.unionExpr_return unionExpr() throws RecognitionException {
        XQueryParser.unionExpr_return retval = new XQueryParser.unionExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token UNION397=null;
        Token char_literal398=null;
        XQueryParser.intersectExceptExpr_return operand = null;

        XQueryParser.intersectExceptExpr_return intersectExceptExpr396 = null;


        Object UNION397_tree=null;
        Object char_literal398_tree=null;
        RewriteRuleTokenStream stream_416=new RewriteRuleTokenStream(adaptor,"token 416");
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleSubtreeStream stream_intersectExceptExpr=new RewriteRuleSubtreeStream(adaptor,"rule intersectExceptExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:962:5: ( ( intersectExceptExpr -> intersectExceptExpr ) ( ( UNION | '|' ) operand= intersectExceptExpr -> ^( UnionExpr $unionExpr $operand) )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:962:7: ( intersectExceptExpr -> intersectExceptExpr ) ( ( UNION | '|' ) operand= intersectExceptExpr -> ^( UnionExpr $unionExpr $operand) )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:962:7: ( intersectExceptExpr -> intersectExceptExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:962:8: intersectExceptExpr
            {
            pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr8397);
            intersectExceptExpr396=intersectExceptExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intersectExceptExpr.add(intersectExceptExpr396.getTree());


            // AST REWRITE
            // elements: intersectExceptExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 962:28: -> intersectExceptExpr
            {
                adaptor.addChild(root_0, stream_intersectExceptExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:963:6: ( ( UNION | '|' ) operand= intersectExceptExpr -> ^( UnionExpr $unionExpr $operand) )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==UNION||LA106_0==416) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:964:7: ( UNION | '|' ) operand= intersectExceptExpr
            	    {
            	    // org/brackit/xquery/compiler/parser/XQuery.g:964:7: ( UNION | '|' )
            	    int alt105=2;
            	    int LA105_0 = input.LA(1);

            	    if ( (LA105_0==UNION) ) {
            	        alt105=1;
            	    }
            	    else if ( (LA105_0==416) ) {
            	        alt105=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 105, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt105) {
            	        case 1 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:964:8: UNION
            	            {
            	            UNION397=(Token)match(input,UNION,FOLLOW_UNION_in_unionExpr8418); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_UNION.add(UNION397);


            	            }
            	            break;
            	        case 2 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:964:16: '|'
            	            {
            	            char_literal398=(Token)match(input,416,FOLLOW_416_in_unionExpr8422); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_416.add(char_literal398);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr8427);
            	    operand=intersectExceptExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_intersectExceptExpr.add(operand.getTree());


            	    // AST REWRITE
            	    // elements: unionExpr, operand
            	    // token labels: 
            	    // rule labels: retval, operand
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 965:7: -> ^( UnionExpr $unionExpr $operand)
            	    {
            	        // org/brackit/xquery/compiler/parser/XQuery.g:965:10: ^( UnionExpr $unionExpr $operand)
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnionExpr, "UnionExpr"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_operand.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unionExpr"

    public static class intersectExceptExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "intersectExceptExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:969:1: intersectExceptExpr : ( instanceofExpr -> instanceofExpr ) (operator= intersectExceptExprOperator operand= instanceofExpr -> ^( $operator $intersectExceptExpr $operand) )* ;
    public final XQueryParser.intersectExceptExpr_return intersectExceptExpr() throws RecognitionException {
        XQueryParser.intersectExceptExpr_return retval = new XQueryParser.intersectExceptExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.intersectExceptExprOperator_return operator = null;

        XQueryParser.instanceofExpr_return operand = null;

        XQueryParser.instanceofExpr_return instanceofExpr399 = null;


        RewriteRuleSubtreeStream stream_intersectExceptExprOperator=new RewriteRuleSubtreeStream(adaptor,"rule intersectExceptExprOperator");
        RewriteRuleSubtreeStream stream_instanceofExpr=new RewriteRuleSubtreeStream(adaptor,"rule instanceofExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:970:5: ( ( instanceofExpr -> instanceofExpr ) (operator= intersectExceptExprOperator operand= instanceofExpr -> ^( $operator $intersectExceptExpr $operand) )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:970:7: ( instanceofExpr -> instanceofExpr ) (operator= intersectExceptExprOperator operand= instanceofExpr -> ^( $operator $intersectExceptExpr $operand) )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:970:7: ( instanceofExpr -> instanceofExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:970:8: instanceofExpr
            {
            pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr8475);
            instanceofExpr399=instanceofExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceofExpr.add(instanceofExpr399.getTree());


            // AST REWRITE
            // elements: instanceofExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 970:23: -> instanceofExpr
            {
                adaptor.addChild(root_0, stream_instanceofExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:971:6: (operator= intersectExceptExprOperator operand= instanceofExpr -> ^( $operator $intersectExceptExpr $operand) )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( ((LA107_0>=INTERSECT && LA107_0<=EXCEPT)) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:972:7: operator= intersectExceptExprOperator operand= instanceofExpr
            	    {
            	    pushFollow(FOLLOW_intersectExceptExprOperator_in_intersectExceptExpr8497);
            	    operator=intersectExceptExprOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_intersectExceptExprOperator.add(operator.getTree());
            	    pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr8507);
            	    operand=instanceofExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_instanceofExpr.add(operand.getTree());


            	    // AST REWRITE
            	    // elements: intersectExceptExpr, operator, operand
            	    // token labels: 
            	    // rule labels: retval, operand, operator
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);
            	    RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator",operator!=null?operator.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 974:7: -> ^( $operator $intersectExceptExpr $operand)
            	    {
            	        // org/brackit/xquery/compiler/parser/XQuery.g:974:10: ^( $operator $intersectExceptExpr $operand)
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot(stream_operator.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_operand.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "intersectExceptExpr"

    public static class intersectExceptExprOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "intersectExceptExprOperator"
    // org/brackit/xquery/compiler/parser/XQuery.g:978:1: intersectExceptExprOperator : ( INTERSECT -> IntersectExpr | EXCEPT -> ExceptExpr );
    public final XQueryParser.intersectExceptExprOperator_return intersectExceptExprOperator() throws RecognitionException {
        XQueryParser.intersectExceptExprOperator_return retval = new XQueryParser.intersectExceptExprOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INTERSECT400=null;
        Token EXCEPT401=null;

        Object INTERSECT400_tree=null;
        Object EXCEPT401_tree=null;
        RewriteRuleTokenStream stream_INTERSECT=new RewriteRuleTokenStream(adaptor,"token INTERSECT");
        RewriteRuleTokenStream stream_EXCEPT=new RewriteRuleTokenStream(adaptor,"token EXCEPT");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:979:2: ( INTERSECT -> IntersectExpr | EXCEPT -> ExceptExpr )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==INTERSECT) ) {
                alt108=1;
            }
            else if ( (LA108_0==EXCEPT) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:979:4: INTERSECT
                    {
                    INTERSECT400=(Token)match(input,INTERSECT,FOLLOW_INTERSECT_in_intersectExceptExprOperator8552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTERSECT.add(INTERSECT400);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 979:14: -> IntersectExpr
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(IntersectExpr, "IntersectExpr"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:980:5: EXCEPT
                    {
                    EXCEPT401=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_intersectExceptExprOperator8562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCEPT.add(EXCEPT401);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 980:12: -> ExceptExpr
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ExceptExpr, "ExceptExpr"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "intersectExceptExprOperator"

    public static class instanceofExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceofExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:983:1: instanceofExpr : ( treatExpr -> treatExpr ) ( INSTANCE OF operand= sequenceType -> ^( InstanceofExpr $instanceofExpr ^( SequenceType $operand) ) )? ;
    public final XQueryParser.instanceofExpr_return instanceofExpr() throws RecognitionException {
        XQueryParser.instanceofExpr_return retval = new XQueryParser.instanceofExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INSTANCE403=null;
        Token OF404=null;
        XQueryParser.sequenceType_return operand = null;

        XQueryParser.treatExpr_return treatExpr402 = null;


        Object INSTANCE403_tree=null;
        Object OF404_tree=null;
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
        RewriteRuleTokenStream stream_INSTANCE=new RewriteRuleTokenStream(adaptor,"token INSTANCE");
        RewriteRuleSubtreeStream stream_treatExpr=new RewriteRuleSubtreeStream(adaptor,"rule treatExpr");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:984:5: ( ( treatExpr -> treatExpr ) ( INSTANCE OF operand= sequenceType -> ^( InstanceofExpr $instanceofExpr ^( SequenceType $operand) ) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:984:7: ( treatExpr -> treatExpr ) ( INSTANCE OF operand= sequenceType -> ^( InstanceofExpr $instanceofExpr ^( SequenceType $operand) ) )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:984:7: ( treatExpr -> treatExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:984:8: treatExpr
            {
            pushFollow(FOLLOW_treatExpr_in_instanceofExpr8585);
            treatExpr402=treatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_treatExpr.add(treatExpr402.getTree());


            // AST REWRITE
            // elements: treatExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 984:18: -> treatExpr
            {
                adaptor.addChild(root_0, stream_treatExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:985:6: ( INSTANCE OF operand= sequenceType -> ^( InstanceofExpr $instanceofExpr ^( SequenceType $operand) ) )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==INSTANCE) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:985:7: INSTANCE OF operand= sequenceType
                    {
                    INSTANCE403=(Token)match(input,INSTANCE,FOLLOW_INSTANCE_in_instanceofExpr8598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSTANCE.add(INSTANCE403);

                    OF404=(Token)match(input,OF,FOLLOW_OF_in_instanceofExpr8600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OF.add(OF404);

                    pushFollow(FOLLOW_sequenceType_in_instanceofExpr8604);
                    operand=sequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sequenceType.add(operand.getTree());


                    // AST REWRITE
                    // elements: instanceofExpr, operand
                    // token labels: 
                    // rule labels: retval, operand
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 985:40: -> ^( InstanceofExpr $instanceofExpr ^( SequenceType $operand) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:985:43: ^( InstanceofExpr $instanceofExpr ^( SequenceType $operand) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(InstanceofExpr, "InstanceofExpr"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        // org/brackit/xquery/compiler/parser/XQuery.g:985:76: ^( SequenceType $operand)
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SequenceType, "SequenceType"), root_2);

                        adaptor.addChild(root_2, stream_operand.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceofExpr"

    public static class treatExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "treatExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:988:1: treatExpr : ( castableExpr -> castableExpr ) ( TREAT AS operand= sequenceType -> ^( TreatExpr $treatExpr ^( SequenceType $operand) ) )? ;
    public final XQueryParser.treatExpr_return treatExpr() throws RecognitionException {
        XQueryParser.treatExpr_return retval = new XQueryParser.treatExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TREAT406=null;
        Token AS407=null;
        XQueryParser.sequenceType_return operand = null;

        XQueryParser.castableExpr_return castableExpr405 = null;


        Object TREAT406_tree=null;
        Object AS407_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_TREAT=new RewriteRuleTokenStream(adaptor,"token TREAT");
        RewriteRuleSubtreeStream stream_castableExpr=new RewriteRuleSubtreeStream(adaptor,"rule castableExpr");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:989:5: ( ( castableExpr -> castableExpr ) ( TREAT AS operand= sequenceType -> ^( TreatExpr $treatExpr ^( SequenceType $operand) ) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:989:7: ( castableExpr -> castableExpr ) ( TREAT AS operand= sequenceType -> ^( TreatExpr $treatExpr ^( SequenceType $operand) ) )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:989:7: ( castableExpr -> castableExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:989:8: castableExpr
            {
            pushFollow(FOLLOW_castableExpr_in_treatExpr8644);
            castableExpr405=castableExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_castableExpr.add(castableExpr405.getTree());


            // AST REWRITE
            // elements: castableExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 989:21: -> castableExpr
            {
                adaptor.addChild(root_0, stream_castableExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:990:6: ( TREAT AS operand= sequenceType -> ^( TreatExpr $treatExpr ^( SequenceType $operand) ) )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==TREAT) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:990:7: TREAT AS operand= sequenceType
                    {
                    TREAT406=(Token)match(input,TREAT,FOLLOW_TREAT_in_treatExpr8657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TREAT.add(TREAT406);

                    AS407=(Token)match(input,AS,FOLLOW_AS_in_treatExpr8659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS407);

                    pushFollow(FOLLOW_sequenceType_in_treatExpr8663);
                    operand=sequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sequenceType.add(operand.getTree());


                    // AST REWRITE
                    // elements: operand, treatExpr
                    // token labels: 
                    // rule labels: retval, operand
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 990:37: -> ^( TreatExpr $treatExpr ^( SequenceType $operand) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:990:40: ^( TreatExpr $treatExpr ^( SequenceType $operand) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TreatExpr, "TreatExpr"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        // org/brackit/xquery/compiler/parser/XQuery.g:990:63: ^( SequenceType $operand)
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SequenceType, "SequenceType"), root_2);

                        adaptor.addChild(root_2, stream_operand.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "treatExpr"

    public static class castableExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castableExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:993:1: castableExpr : ( castExpr -> castExpr ) ( CASTABLE AS operand= singleType -> ^( CastableExpr $castableExpr $operand) )? ;
    public final XQueryParser.castableExpr_return castableExpr() throws RecognitionException {
        XQueryParser.castableExpr_return retval = new XQueryParser.castableExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CASTABLE409=null;
        Token AS410=null;
        XQueryParser.singleType_return operand = null;

        XQueryParser.castExpr_return castExpr408 = null;


        Object CASTABLE409_tree=null;
        Object AS410_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CASTABLE=new RewriteRuleTokenStream(adaptor,"token CASTABLE");
        RewriteRuleSubtreeStream stream_singleType=new RewriteRuleSubtreeStream(adaptor,"rule singleType");
        RewriteRuleSubtreeStream stream_castExpr=new RewriteRuleSubtreeStream(adaptor,"rule castExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:994:5: ( ( castExpr -> castExpr ) ( CASTABLE AS operand= singleType -> ^( CastableExpr $castableExpr $operand) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:994:7: ( castExpr -> castExpr ) ( CASTABLE AS operand= singleType -> ^( CastableExpr $castableExpr $operand) )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:994:7: ( castExpr -> castExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:994:8: castExpr
            {
            pushFollow(FOLLOW_castExpr_in_castableExpr8703);
            castExpr408=castExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_castExpr.add(castExpr408.getTree());


            // AST REWRITE
            // elements: castExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 994:17: -> castExpr
            {
                adaptor.addChild(root_0, stream_castExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:995:6: ( CASTABLE AS operand= singleType -> ^( CastableExpr $castableExpr $operand) )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==CASTABLE) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:995:7: CASTABLE AS operand= singleType
                    {
                    CASTABLE409=(Token)match(input,CASTABLE,FOLLOW_CASTABLE_in_castableExpr8716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASTABLE.add(CASTABLE409);

                    AS410=(Token)match(input,AS,FOLLOW_AS_in_castableExpr8718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS410);

                    pushFollow(FOLLOW_singleType_in_castableExpr8722);
                    operand=singleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_singleType.add(operand.getTree());


                    // AST REWRITE
                    // elements: operand, castableExpr
                    // token labels: 
                    // rule labels: retval, operand
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 995:38: -> ^( CastableExpr $castableExpr $operand)
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:995:41: ^( CastableExpr $castableExpr $operand)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CastableExpr, "CastableExpr"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_operand.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "castableExpr"

    public static class castExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:998:1: castExpr : ( unaryExpr -> unaryExpr ) ( CAST AS operand= singleType -> ^( CastExpr $castExpr $operand) )? ;
    public final XQueryParser.castExpr_return castExpr() throws RecognitionException {
        XQueryParser.castExpr_return retval = new XQueryParser.castExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CAST412=null;
        Token AS413=null;
        XQueryParser.singleType_return operand = null;

        XQueryParser.unaryExpr_return unaryExpr411 = null;


        Object CAST412_tree=null;
        Object AS413_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_singleType=new RewriteRuleSubtreeStream(adaptor,"rule singleType");
        RewriteRuleSubtreeStream stream_unaryExpr=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:999:5: ( ( unaryExpr -> unaryExpr ) ( CAST AS operand= singleType -> ^( CastExpr $castExpr $operand) )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:999:7: ( unaryExpr -> unaryExpr ) ( CAST AS operand= singleType -> ^( CastExpr $castExpr $operand) )?
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:999:7: ( unaryExpr -> unaryExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:999:8: unaryExpr
            {
            pushFollow(FOLLOW_unaryExpr_in_castExpr8758);
            unaryExpr411=unaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpr.add(unaryExpr411.getTree());


            // AST REWRITE
            // elements: unaryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 999:18: -> unaryExpr
            {
                adaptor.addChild(root_0, stream_unaryExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            // org/brackit/xquery/compiler/parser/XQuery.g:1000:6: ( CAST AS operand= singleType -> ^( CastExpr $castExpr $operand) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==CAST) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1000:7: CAST AS operand= singleType
                    {
                    CAST412=(Token)match(input,CAST,FOLLOW_CAST_in_castExpr8771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST412);

                    AS413=(Token)match(input,AS,FOLLOW_AS_in_castExpr8773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS413);

                    pushFollow(FOLLOW_singleType_in_castExpr8777);
                    operand=singleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_singleType.add(operand.getTree());


                    // AST REWRITE
                    // elements: castExpr, operand
                    // token labels: 
                    // rule labels: retval, operand
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_operand=new RewriteRuleSubtreeStream(adaptor,"rule operand",operand!=null?operand.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1000:34: -> ^( CastExpr $castExpr $operand)
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1000:37: ^( CastExpr $castExpr $operand)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CastExpr, "CastExpr"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_operand.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "castExpr"

    public static class unaryExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1004:1: unaryExpr : ( ( ( '+' | '-' )+ valueExpr )=> ( ( '+' | '-' )+ valueExpr ) -> { (minusCount & 1) == 1}? ^( ArithmeticExpr MultiplyOp ^( Literal ^( Int[\"-1\"] ) ) valueExpr ) -> valueExpr | valueExpr -> valueExpr );
    public final XQueryParser.unaryExpr_return unaryExpr() throws RecognitionException {
        XQueryParser.unaryExpr_return retval = new XQueryParser.unaryExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal414=null;
        Token char_literal415=null;
        XQueryParser.valueExpr_return valueExpr416 = null;

        XQueryParser.valueExpr_return valueExpr417 = null;


        Object char_literal414_tree=null;
        Object char_literal415_tree=null;
        RewriteRuleTokenStream stream_414=new RewriteRuleTokenStream(adaptor,"token 414");
        RewriteRuleTokenStream stream_413=new RewriteRuleTokenStream(adaptor,"token 413");
        RewriteRuleSubtreeStream stream_valueExpr=new RewriteRuleSubtreeStream(adaptor,"rule valueExpr");

        int minusCount = 0;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1008:5: ( ( ( '+' | '-' )+ valueExpr )=> ( ( '+' | '-' )+ valueExpr ) -> { (minusCount & 1) == 1}? ^( ArithmeticExpr MultiplyOp ^( Literal ^( Int[\"-1\"] ) ) valueExpr ) -> valueExpr | valueExpr -> valueExpr )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==413) && (synpred1_XQuery())) {
                alt114=1;
            }
            else if ( (LA114_0==414) && (synpred1_XQuery())) {
                alt114=1;
            }
            else if ( (LA114_0==LAngle||LA114_0==Pragma||(LA114_0>=XQUERY && LA114_0<=AposedStringLiteral)||(LA114_0>=DirCommentConstructor && LA114_0<=DirPIConstructor)||(LA114_0>=DOCUMENT && LA114_0<=WHILE)||(LA114_0>=NOT && LA114_0<=NCName)||LA114_0==408||LA114_0==411||LA114_0==415||(LA114_0>=422 && LA114_0<=423)||(LA114_0>=425 && LA114_0<=426)||LA114_0==429) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1008:7: ( ( '+' | '-' )+ valueExpr )=> ( ( '+' | '-' )+ valueExpr )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1009:10: ( ( '+' | '-' )+ valueExpr )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1009:11: ( '+' | '-' )+ valueExpr
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1009:11: ( '+' | '-' )+
                    int cnt113=0;
                    loop113:
                    do {
                        int alt113=3;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==413) ) {
                            alt113=1;
                        }
                        else if ( (LA113_0==414) ) {
                            alt113=2;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1009:12: '+'
                    	    {
                    	    char_literal414=(Token)match(input,413,FOLLOW_413_in_unaryExpr8843); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_413.add(char_literal414);


                    	    }
                    	    break;
                    	case 2 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1009:16: '-'
                    	    {
                    	    char_literal415=(Token)match(input,414,FOLLOW_414_in_unaryExpr8845); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_414.add(char_literal415);

                    	    if ( state.backtracking==0 ) {
                    	      minusCount++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt113 >= 1 ) break loop113;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(113, input);
                                throw eee;
                        }
                        cnt113++;
                    } while (true);

                    pushFollow(FOLLOW_valueExpr_in_unaryExpr8851);
                    valueExpr416=valueExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_valueExpr.add(valueExpr416.getTree());

                    }



                    // AST REWRITE
                    // elements: valueExpr, valueExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1009:49: -> { (minusCount & 1) == 1}? ^( ArithmeticExpr MultiplyOp ^( Literal ^( Int[\"-1\"] ) ) valueExpr )
                    if ( (minusCount & 1) == 1) {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1009:78: ^( ArithmeticExpr MultiplyOp ^( Literal ^( Int[\"-1\"] ) ) valueExpr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArithmeticExpr, "ArithmeticExpr"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(MultiplyOp, "MultiplyOp"));
                        // org/brackit/xquery/compiler/parser/XQuery.g:1009:106: ^( Literal ^( Int[\"-1\"] ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        // org/brackit/xquery/compiler/parser/XQuery.g:1009:116: ^( Int[\"-1\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(Int, "-1"), root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_valueExpr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1010:77: -> valueExpr
                    {
                        adaptor.addChild(root_0, stream_valueExpr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1011:4: valueExpr
                    {
                    pushFollow(FOLLOW_valueExpr_in_unaryExpr8958);
                    valueExpr417=valueExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_valueExpr.add(valueExpr417.getTree());


                    // AST REWRITE
                    // elements: valueExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1011:14: -> valueExpr
                    {
                        adaptor.addChild(root_0, stream_valueExpr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpr"

    public static class valueExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "valueExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1015:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );
    public final XQueryParser.valueExpr_return valueExpr() throws RecognitionException {
        XQueryParser.valueExpr_return retval = new XQueryParser.valueExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.validateExpr_return validateExpr418 = null;

        XQueryParser.pathExpr_return pathExpr419 = null;

        XQueryParser.extensionExpr_return extensionExpr420 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1016:5: ( validateExpr | pathExpr | extensionExpr )
            int alt115=3;
            switch ( input.LA(1) ) {
            case VALIDATE:
                {
                int LA115_1 = input.LA(2);

                if ( (LA115_1==EOF||(LA115_1>=LAngle && LA115_1<=RAngle)||LA115_1==RCurly||(LA115_1>=SymEq && LA115_1<=Colon)||LA115_1==DEFAULT||LA115_1==ORDERED||(LA115_1>=ORDER && LA115_1<=EMPTY)||LA115_1==COLLATION||LA115_1==AT||LA115_1==FOR||LA115_1==LET||LA115_1==WINDOW||LA115_1==START||(LA115_1>=ONLY && LA115_1<=END)||(LA115_1>=COUNT && LA115_1<=GROUP)||(LA115_1>=STABLE && LA115_1<=RETURN)||LA115_1==SATISFIES||(LA115_1>=CASE && LA115_1<=AS)||(LA115_1>=ELSE && LA115_1<=CONTAINS)||(LA115_1>=TO && LA115_1<=INSTANCE)||(LA115_1>=TREAT && LA115_1<=IS)||(LA115_1>=INTO && LA115_1<=BEFORE)||LA115_1==WITH||LA115_1==MODIFY||(LA115_1>=FTOR && LA115_1<=NOT)||LA115_1==WORDS||LA115_1==TIMES||(LA115_1>=DISTANCE && LA115_1<=DIFFERENT)||LA115_1==ENTIRE||LA115_1==LEVELS||LA115_1==WITHOUT||LA115_1==406||(LA115_1>=408 && LA115_1<=410)||(LA115_1>=413 && LA115_1<=423)||(LA115_1>=427 && LA115_1<=428)) ) {
                    alt115=2;
                }
                else if ( (LA115_1==LCurly||(LA115_1>=LAX && LA115_1<=STRICT)) ) {
                    alt115=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 1, input);

                    throw nvae;
                }
                }
                break;
            case LAngle:
            case XQUERY:
            case ENCODING:
            case VERSION:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case BOUNDARY_SPACE:
            case PRESERVE:
            case STRIP:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case OPTION:
            case FT_OPTION:
            case USING:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case COPY_NAMESPACES:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAN:
            case PERCENT:
            case PER_MILLE:
            case ZERO_DIGIT:
            case DIGIT:
            case PATTERN_SEPARATOR:
            case NO_PRESERVE:
            case INHERIT:
            case NO_INHERIT:
            case COLLATION:
            case BASE_URI:
            case IMPORT:
            case SCHEMA:
            case AT:
            case EXTERNAL:
            case VARIABLE:
            case CONSTANT:
            case CONSTRUCTION:
            case SEQUENTIAL:
            case UPDATING:
            case SIMPLE:
            case DETERMINISTIC:
            case NONDETERMINISTIC:
            case FOR:
            case IN:
            case ALLOWING:
            case SCORE:
            case LET:
            case TUMBLING:
            case WINDOW:
            case SLIDING:
            case START:
            case WHEN:
            case ONLY:
            case END:
            case PREVIOUS:
            case NEXT:
            case COUNT:
            case WHERE:
            case GROUP:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case RETURN:
            case SOME:
            case SATISFIES:
            case EVERY:
            case TYPESWITCH:
            case CASE:
            case AS:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case CONTAINS:
            case TEXT:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case LAX:
            case STRICT:
            case CHILD:
            case DESCENDANT:
            case ATTRIBUTE:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case QuotedStringLiteral:
            case AposedStringLiteral:
            case DirCommentConstructor:
            case DirPIConstructor:
            case DOCUMENT:
            case COMMENT:
            case PROCESSING_INSTRUCTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case ANYKIND:
            case DOCUMENT_NODE:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case REVALIDATION:
            case SKIP:
            case FIRST:
            case LAST:
            case INTO:
            case AFTER:
            case BEFORE:
            case INSERT:
            case NODE:
            case NODES:
            case DELETE:
            case REPLACE:
            case WITH:
            case VALUE:
            case RENAME:
            case COPY:
            case MODIFY:
            case SET:
            case BLOCK:
            case EXIT:
            case RETURNING:
            case WHILE:
            case NOT:
            case FTNOT:
            case WEIGHT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case DISTANCE:
            case SENTENCES:
            case PARAGRAPHS:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case ENTIRE:
            case CONTENT:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case STEMMING:
            case NO:
            case THESAURUS:
            case RELATIONSHIP:
            case LEVELS:
            case STOP:
            case LANGUAGE:
            case WILDCARDS:
            case WITHOUT:
            case CONTEXT:
            case TRY:
            case CATCH:
            case NAMESPACE_NODE:
            case NCName:
            case 408:
            case 411:
            case 415:
            case 422:
            case 423:
            case 425:
            case 426:
            case 429:
                {
                alt115=2;
                }
                break;
            case Pragma:
                {
                alt115=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1016:7: validateExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_validateExpr_in_valueExpr8986);
                    validateExpr418=validateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, validateExpr418.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1017:7: pathExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pathExpr_in_valueExpr8994);
                    pathExpr419=pathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathExpr419.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1018:7: extensionExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_extensionExpr_in_valueExpr9002);
                    extensionExpr420=extensionExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extensionExpr420.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "valueExpr"

    public static class generalComp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "generalComp"
    // org/brackit/xquery/compiler/parser/XQuery.g:1021:1: generalComp : ( SymEq -> GeneralCompEQ | '!=' -> GeneralCompNE | LAngle -> GeneralCompLT | '<=' -> GeneralCompLE | RAngle -> GeneralCompGT | '>=' -> GeneralCompGE );
    public final XQueryParser.generalComp_return generalComp() throws RecognitionException {
        XQueryParser.generalComp_return retval = new XQueryParser.generalComp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SymEq421=null;
        Token string_literal422=null;
        Token LAngle423=null;
        Token string_literal424=null;
        Token RAngle425=null;
        Token string_literal426=null;

        Object SymEq421_tree=null;
        Object string_literal422_tree=null;
        Object LAngle423_tree=null;
        Object string_literal424_tree=null;
        Object RAngle425_tree=null;
        Object string_literal426_tree=null;
        RewriteRuleTokenStream stream_418=new RewriteRuleTokenStream(adaptor,"token 418");
        RewriteRuleTokenStream stream_LAngle=new RewriteRuleTokenStream(adaptor,"token LAngle");
        RewriteRuleTokenStream stream_417=new RewriteRuleTokenStream(adaptor,"token 417");
        RewriteRuleTokenStream stream_SymEq=new RewriteRuleTokenStream(adaptor,"token SymEq");
        RewriteRuleTokenStream stream_RAngle=new RewriteRuleTokenStream(adaptor,"token RAngle");
        RewriteRuleTokenStream stream_419=new RewriteRuleTokenStream(adaptor,"token 419");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1022:5: ( SymEq -> GeneralCompEQ | '!=' -> GeneralCompNE | LAngle -> GeneralCompLT | '<=' -> GeneralCompLE | RAngle -> GeneralCompGT | '>=' -> GeneralCompGE )
            int alt116=6;
            switch ( input.LA(1) ) {
            case SymEq:
                {
                alt116=1;
                }
                break;
            case 417:
                {
                alt116=2;
                }
                break;
            case LAngle:
                {
                alt116=3;
                }
                break;
            case 418:
                {
                alt116=4;
                }
                break;
            case RAngle:
                {
                alt116=5;
                }
                break;
            case 419:
                {
                alt116=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1022:7: SymEq
                    {
                    SymEq421=(Token)match(input,SymEq,FOLLOW_SymEq_in_generalComp9023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SymEq.add(SymEq421);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1022:14: -> GeneralCompEQ
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(GeneralCompEQ, "GeneralCompEQ"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1023:8: '!='
                    {
                    string_literal422=(Token)match(input,417,FOLLOW_417_in_generalComp9037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_417.add(string_literal422);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1023:14: -> GeneralCompNE
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(GeneralCompNE, "GeneralCompNE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1024:8: LAngle
                    {
                    LAngle423=(Token)match(input,LAngle,FOLLOW_LAngle_in_generalComp9051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAngle.add(LAngle423);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1024:15: -> GeneralCompLT
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(GeneralCompLT, "GeneralCompLT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1025:8: '<='
                    {
                    string_literal424=(Token)match(input,418,FOLLOW_418_in_generalComp9064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_418.add(string_literal424);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1025:14: -> GeneralCompLE
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(GeneralCompLE, "GeneralCompLE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1026:8: RAngle
                    {
                    RAngle425=(Token)match(input,RAngle,FOLLOW_RAngle_in_generalComp9078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAngle.add(RAngle425);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1026:15: -> GeneralCompGT
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(GeneralCompGT, "GeneralCompGT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1027:8: '>='
                    {
                    string_literal426=(Token)match(input,419,FOLLOW_419_in_generalComp9091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_419.add(string_literal426);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1027:14: -> GeneralCompGE
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(GeneralCompGE, "GeneralCompGE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "generalComp"

    public static class valueComp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "valueComp"
    // org/brackit/xquery/compiler/parser/XQuery.g:1030:1: valueComp : ( EQ -> ValueCompEQ | NE -> ValueCompNE | LT -> ValueCompLT | LE -> ValueCompLE | GT -> ValueCompGT | GE -> ValueCompGE );
    public final XQueryParser.valueComp_return valueComp() throws RecognitionException {
        XQueryParser.valueComp_return retval = new XQueryParser.valueComp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQ427=null;
        Token NE428=null;
        Token LT429=null;
        Token LE430=null;
        Token GT431=null;
        Token GE432=null;

        Object EQ427_tree=null;
        Object NE428_tree=null;
        Object LT429_tree=null;
        Object LE430_tree=null;
        Object GT431_tree=null;
        Object GE432_tree=null;
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_NE=new RewriteRuleTokenStream(adaptor,"token NE");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1031:5: ( EQ -> ValueCompEQ | NE -> ValueCompNE | LT -> ValueCompLT | LE -> ValueCompLE | GT -> ValueCompGT | GE -> ValueCompGE )
            int alt117=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt117=1;
                }
                break;
            case NE:
                {
                alt117=2;
                }
                break;
            case LT:
                {
                alt117=3;
                }
                break;
            case LE:
                {
                alt117=4;
                }
                break;
            case GT:
                {
                alt117=5;
                }
                break;
            case GE:
                {
                alt117=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }

            switch (alt117) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1032:6: EQ
                    {
                    EQ427=(Token)match(input,EQ,FOLLOW_EQ_in_valueComp9122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQ.add(EQ427);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1032:10: -> ValueCompEQ
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValueCompEQ, "ValueCompEQ"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1033:8: NE
                    {
                    NE428=(Token)match(input,NE,FOLLOW_NE_in_valueComp9136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NE.add(NE428);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1033:11: -> ValueCompNE
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValueCompNE, "ValueCompNE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1034:8: LT
                    {
                    LT429=(Token)match(input,LT,FOLLOW_LT_in_valueComp9149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT.add(LT429);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1034:11: -> ValueCompLT
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValueCompLT, "ValueCompLT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1035:8: LE
                    {
                    LE430=(Token)match(input,LE,FOLLOW_LE_in_valueComp9162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LE.add(LE430);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1035:11: -> ValueCompLE
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValueCompLE, "ValueCompLE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1036:8: GT
                    {
                    GT431=(Token)match(input,GT,FOLLOW_GT_in_valueComp9175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(GT431);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1036:11: -> ValueCompGT
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValueCompGT, "ValueCompGT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1037:8: GE
                    {
                    GE432=(Token)match(input,GE,FOLLOW_GE_in_valueComp9188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GE.add(GE432);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1037:11: -> ValueCompGE
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValueCompGE, "ValueCompGE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "valueComp"

    public static class nodeComp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nodeComp"
    // org/brackit/xquery/compiler/parser/XQuery.g:1040:1: nodeComp : ( IS -> NodeCompIs | '<<' -> NodeCompPrecedes | '>>' -> NodeCompFollows );
    public final XQueryParser.nodeComp_return nodeComp() throws RecognitionException {
        XQueryParser.nodeComp_return retval = new XQueryParser.nodeComp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IS433=null;
        Token string_literal434=null;
        Token string_literal435=null;

        Object IS433_tree=null;
        Object string_literal434_tree=null;
        Object string_literal435_tree=null;
        RewriteRuleTokenStream stream_421=new RewriteRuleTokenStream(adaptor,"token 421");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_420=new RewriteRuleTokenStream(adaptor,"token 420");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1041:5: ( IS -> NodeCompIs | '<<' -> NodeCompPrecedes | '>>' -> NodeCompFollows )
            int alt118=3;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt118=1;
                }
                break;
            case 420:
                {
                alt118=2;
                }
                break;
            case 421:
                {
                alt118=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1041:7: IS
                    {
                    IS433=(Token)match(input,IS,FOLLOW_IS_in_nodeComp9213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IS.add(IS433);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1041:11: -> NodeCompIs
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(NodeCompIs, "NodeCompIs"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1042:8: '<<'
                    {
                    string_literal434=(Token)match(input,420,FOLLOW_420_in_nodeComp9227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_420.add(string_literal434);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1042:13: -> NodeCompPrecedes
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(NodeCompPrecedes, "NodeCompPrecedes"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1043:8: '>>'
                    {
                    string_literal435=(Token)match(input,421,FOLLOW_421_in_nodeComp9240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_421.add(string_literal435);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1043:13: -> NodeCompFollows
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(NodeCompFollows, "NodeCompFollows"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nodeComp"

    public static class validateExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "validateExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1046:1: validateExpr : VALIDATE ( validationMode )? LCurly expr RCurly -> ^( ValidateExpr ( validationMode )? expr ) ;
    public final XQueryParser.validateExpr_return validateExpr() throws RecognitionException {
        XQueryParser.validateExpr_return retval = new XQueryParser.validateExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token VALIDATE436=null;
        Token LCurly438=null;
        Token RCurly440=null;
        XQueryParser.validationMode_return validationMode437 = null;

        XQueryParser.expr_return expr439 = null;


        Object VALIDATE436_tree=null;
        Object LCurly438_tree=null;
        Object RCurly440_tree=null;
        RewriteRuleTokenStream stream_VALIDATE=new RewriteRuleTokenStream(adaptor,"token VALIDATE");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_validationMode=new RewriteRuleSubtreeStream(adaptor,"rule validationMode");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1047:5: ( VALIDATE ( validationMode )? LCurly expr RCurly -> ^( ValidateExpr ( validationMode )? expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1047:7: VALIDATE ( validationMode )? LCurly expr RCurly
            {
            VALIDATE436=(Token)match(input,VALIDATE,FOLLOW_VALIDATE_in_validateExpr9265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VALIDATE.add(VALIDATE436);

            // org/brackit/xquery/compiler/parser/XQuery.g:1047:16: ( validationMode )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=LAX && LA119_0<=STRICT)) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1047:16: validationMode
                    {
                    pushFollow(FOLLOW_validationMode_in_validateExpr9267);
                    validationMode437=validationMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_validationMode.add(validationMode437.getTree());

                    }
                    break;

            }

            LCurly438=(Token)match(input,LCurly,FOLLOW_LCurly_in_validateExpr9270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly438);

            pushFollow(FOLLOW_expr_in_validateExpr9272);
            expr439=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr439.getTree());
            RCurly440=(Token)match(input,RCurly,FOLLOW_RCurly_in_validateExpr9274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly440);



            // AST REWRITE
            // elements: validationMode, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1047:51: -> ^( ValidateExpr ( validationMode )? expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1047:54: ^( ValidateExpr ( validationMode )? expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ValidateExpr, "ValidateExpr"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1047:69: ( validationMode )?
                if ( stream_validationMode.hasNext() ) {
                    adaptor.addChild(root_1, stream_validationMode.nextTree());

                }
                stream_validationMode.reset();
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "validateExpr"

    public static class validationMode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "validationMode"
    // org/brackit/xquery/compiler/parser/XQuery.g:1049:1: validationMode : ( LAX -> ValidateLax | STRICT -> ValidateStrict );
    public final XQueryParser.validationMode_return validationMode() throws RecognitionException {
        XQueryParser.validationMode_return retval = new XQueryParser.validationMode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LAX441=null;
        Token STRICT442=null;

        Object LAX441_tree=null;
        Object STRICT442_tree=null;
        RewriteRuleTokenStream stream_LAX=new RewriteRuleTokenStream(adaptor,"token LAX");
        RewriteRuleTokenStream stream_STRICT=new RewriteRuleTokenStream(adaptor,"token STRICT");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1050:3: ( LAX -> ValidateLax | STRICT -> ValidateStrict )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==LAX) ) {
                alt120=1;
            }
            else if ( (LA120_0==STRICT) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1050:5: LAX
                    {
                    LAX441=(Token)match(input,LAX,FOLLOW_LAX_in_validationMode9299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAX.add(LAX441);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1050:9: -> ValidateLax
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValidateLax, "ValidateLax"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1050:25: STRICT
                    {
                    STRICT442=(Token)match(input,STRICT,FOLLOW_STRICT_in_validationMode9306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRICT.add(STRICT442);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1050:32: -> ValidateStrict
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ValidateStrict, "ValidateStrict"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "validationMode"

    public static class extensionExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extensionExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1052:1: extensionExpr : ( Pragma )+ LCurly ( expr )? RCurly -> ^( Pragma ( expr )? ) ;
    public final XQueryParser.extensionExpr_return extensionExpr() throws RecognitionException {
        XQueryParser.extensionExpr_return retval = new XQueryParser.extensionExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token Pragma443=null;
        Token LCurly444=null;
        Token RCurly446=null;
        XQueryParser.expr_return expr445 = null;


        Object Pragma443_tree=null;
        Object LCurly444_tree=null;
        Object RCurly446_tree=null;
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleTokenStream stream_Pragma=new RewriteRuleTokenStream(adaptor,"token Pragma");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1053:5: ( ( Pragma )+ LCurly ( expr )? RCurly -> ^( Pragma ( expr )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1053:7: ( Pragma )+ LCurly ( expr )? RCurly
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:1053:7: ( Pragma )+
            int cnt121=0;
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==Pragma) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1053:8: Pragma
            	    {
            	    if ( state.backtracking==0 ) {
            	       parsePragma(); 
            	    }
            	    Pragma443=(Token)match(input,Pragma,FOLLOW_Pragma_in_extensionExpr9327); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Pragma.add(Pragma443);


            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);

            LCurly444=(Token)match(input,LCurly,FOLLOW_LCurly_in_extensionExpr9331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly444);

            // org/brackit/xquery/compiler/parser/XQuery.g:1053:43: ( expr )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==LAngle||LA122_0==Pragma||(LA122_0>=XQUERY && LA122_0<=AposedStringLiteral)||(LA122_0>=DirCommentConstructor && LA122_0<=DirPIConstructor)||(LA122_0>=DOCUMENT && LA122_0<=WHILE)||(LA122_0>=NOT && LA122_0<=NCName)||LA122_0==408||LA122_0==411||(LA122_0>=413 && LA122_0<=415)||(LA122_0>=422 && LA122_0<=423)||(LA122_0>=425 && LA122_0<=426)||LA122_0==429) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1053:43: expr
                    {
                    pushFollow(FOLLOW_expr_in_extensionExpr9333);
                    expr445=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr445.getTree());

                    }
                    break;

            }

            RCurly446=(Token)match(input,RCurly,FOLLOW_RCurly_in_extensionExpr9336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly446);



            // AST REWRITE
            // elements: expr, Pragma
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1053:56: -> ^( Pragma ( expr )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1053:59: ^( Pragma ( expr )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Pragma.nextNode(), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1053:68: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extensionExpr"

    protected static class pathExpr_scope {
        int stepAlternative;
    }
    protected Stack pathExpr_stack = new Stack();

    public static class pathExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1061:1: pathExpr : ( ( '/' relativePathExpr )=> '/' relativePathExpr | ( '//' relativePathExpr )=> '//' relativePathExpr | ( '/' '*' )=> '/' '*' | '/' -> ^( TreatExpr ^( FunctionCall[\"fn:root\"] ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind ) ) ^( SequenceType KindTestDocument ) ) | relativePathExpr );
    public final XQueryParser.pathExpr_return pathExpr() throws RecognitionException {
        pathExpr_stack.push(new pathExpr_scope());
        XQueryParser.pathExpr_return retval = new XQueryParser.pathExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal447=null;
        Token string_literal449=null;
        Token char_literal451=null;
        Token char_literal452=null;
        Token char_literal453=null;
        XQueryParser.relativePathExpr_return relativePathExpr448 = null;

        XQueryParser.relativePathExpr_return relativePathExpr450 = null;

        XQueryParser.relativePathExpr_return relativePathExpr454 = null;


        Object char_literal447_tree=null;
        Object string_literal449_tree=null;
        Object char_literal451_tree=null;
        Object char_literal452_tree=null;
        Object char_literal453_tree=null;
        RewriteRuleTokenStream stream_422=new RewriteRuleTokenStream(adaptor,"token 422");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1067:5: ( ( '/' relativePathExpr )=> '/' relativePathExpr | ( '//' relativePathExpr )=> '//' relativePathExpr | ( '/' '*' )=> '/' '*' | '/' -> ^( TreatExpr ^( FunctionCall[\"fn:root\"] ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind ) ) ^( SequenceType KindTestDocument ) ) | relativePathExpr )
            int alt123=5;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1067:7: ( '/' relativePathExpr )=> '/' relativePathExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal447=(Token)match(input,422,FOLLOW_422_in_pathExpr9426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                        ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative = 1; 
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr9431);
                    relativePathExpr448=relativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relativePathExpr448.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1068:7: ( '//' relativePathExpr )=> '//' relativePathExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal449=(Token)match(input,423,FOLLOW_423_in_pathExpr9447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                        ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative = 2; 
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr9452);
                    relativePathExpr450=relativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relativePathExpr450.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1069:7: ( '/' '*' )=> '/' '*'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal451=(Token)match(input,422,FOLLOW_422_in_pathExpr9482); if (state.failed) return retval;
                    char_literal452=(Token)match(input,415,FOLLOW_415_in_pathExpr9485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal452_tree = (Object)adaptor.create(char_literal452);
                    adaptor.addChild(root_0, char_literal452_tree);
                    }

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1070:7: '/'
                    {
                    char_literal453=(Token)match(input,422,FOLLOW_422_in_pathExpr9493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_422.add(char_literal453);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1070:11: -> ^( TreatExpr ^( FunctionCall[\"fn:root\"] ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind ) ) ^( SequenceType KindTestDocument ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1070:14: ^( TreatExpr ^( FunctionCall[\"fn:root\"] ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind ) ) ^( SequenceType KindTestDocument ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TreatExpr, "TreatExpr"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:1070:26: ^( FunctionCall[\"fn:root\"] ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FunctionCall, "fn:root"), root_2);

                        // org/brackit/xquery/compiler/parser/XQuery.g:1070:52: ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(StepExpr, "StepExpr"), root_3);

                        // org/brackit/xquery/compiler/parser/XQuery.g:1070:63: ^( AxisSpec SELF[\"self\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_4);

                        adaptor.addChild(root_4, (Object)adaptor.create(SELF, "self"));

                        adaptor.addChild(root_3, root_4);
                        }
                        adaptor.addChild(root_3, (Object)adaptor.create(KindTestAnyKind, "KindTestAnyKind"));

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        // org/brackit/xquery/compiler/parser/XQuery.g:1070:106: ^( SequenceType KindTestDocument )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SequenceType, "SequenceType"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(KindTestDocument, "KindTestDocument"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1071:7: relativePathExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( state.backtracking==0 ) {
                        ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative = 0; 
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr9533);
                    relativePathExpr454=relativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relativePathExpr454.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
            pathExpr_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "pathExpr"

    public static class relativePathExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relativePathExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1074:1: relativePathExpr : firstStep= stepExpr ( ( '/' | '//' ) furtherSteps+= stepExpr )* -> { furtherSteps != null }? ^( PathExpr $firstStep ( $furtherSteps)+ ) -> ^( $firstStep) ;
    public final XQueryParser.relativePathExpr_return relativePathExpr() throws RecognitionException {
        XQueryParser.relativePathExpr_return retval = new XQueryParser.relativePathExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal455=null;
        Token string_literal456=null;
        List list_furtherSteps=null;
        XQueryParser.stepExpr_return firstStep = null;

        RuleReturnScope furtherSteps = null;
        Object char_literal455_tree=null;
        Object string_literal456_tree=null;
        RewriteRuleTokenStream stream_423=new RewriteRuleTokenStream(adaptor,"token 423");
        RewriteRuleTokenStream stream_422=new RewriteRuleTokenStream(adaptor,"token 422");
        RewriteRuleSubtreeStream stream_stepExpr=new RewriteRuleSubtreeStream(adaptor,"rule stepExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1075:5: (firstStep= stepExpr ( ( '/' | '//' ) furtherSteps+= stepExpr )* -> { furtherSteps != null }? ^( PathExpr $firstStep ( $furtherSteps)+ ) -> ^( $firstStep) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1075:7: firstStep= stepExpr ( ( '/' | '//' ) furtherSteps+= stepExpr )*
            {
            pushFollow(FOLLOW_stepExpr_in_relativePathExpr9556);
            firstStep=stepExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stepExpr.add(firstStep.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1076:6: ( ( '/' | '//' ) furtherSteps+= stepExpr )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( ((LA125_0>=422 && LA125_0<=423)) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1077:7: ( '/' | '//' ) furtherSteps+= stepExpr
            	    {
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1077:7: ( '/' | '//' )
            	    int alt124=2;
            	    int LA124_0 = input.LA(1);

            	    if ( (LA124_0==422) ) {
            	        alt124=1;
            	    }
            	    else if ( (LA124_0==423) ) {
            	        alt124=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 124, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt124) {
            	        case 1 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:1078:8: '/'
            	            {
            	            char_literal455=(Token)match(input,422,FOLLOW_422_in_relativePathExpr9580); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_422.add(char_literal455);

            	            if ( state.backtracking==0 ) {
            	               ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative = 1; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:1079:10: '//'
            	            {
            	            string_literal456=(Token)match(input,423,FOLLOW_423_in_relativePathExpr9593); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_423.add(string_literal456);

            	            if ( state.backtracking==0 ) {
            	                ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative = 2; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_stepExpr_in_relativePathExpr9613);
            	    furtherSteps=stepExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stepExpr.add(furtherSteps.getTree());
            	    if (list_furtherSteps==null) list_furtherSteps=new ArrayList();
            	    list_furtherSteps.add(furtherSteps.getTree());


            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);



            // AST REWRITE
            // elements: furtherSteps, firstStep, firstStep
            // token labels: 
            // rule labels: firstStep, retval
            // token list labels: 
            // rule list labels: furtherSteps
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_firstStep=new RewriteRuleSubtreeStream(adaptor,"rule firstStep",firstStep!=null?firstStep.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_furtherSteps=new RewriteRuleSubtreeStream(adaptor,"token furtherSteps",list_furtherSteps);
            root_0 = (Object)adaptor.nil();
            // 1083:6: -> { furtherSteps != null }? ^( PathExpr $firstStep ( $furtherSteps)+ )
            if ( furtherSteps != null ) {
                // org/brackit/xquery/compiler/parser/XQuery.g:1083:35: ^( PathExpr $firstStep ( $furtherSteps)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PathExpr, "PathExpr"), root_1);

                adaptor.addChild(root_1, stream_firstStep.nextTree());
                if ( !(stream_furtherSteps.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_furtherSteps.hasNext() ) {
                    adaptor.addChild(root_1, stream_furtherSteps.nextTree());

                }
                stream_furtherSteps.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1084:6: -> ^( $firstStep)
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1084:9: ^( $firstStep)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_firstStep.nextNode(), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relativePathExpr"

    public static class stepExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stepExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1088:1: stepExpr : ( axisStep | filterExpr );
    public final XQueryParser.stepExpr_return stepExpr() throws RecognitionException {
        XQueryParser.stepExpr_return retval = new XQueryParser.stepExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.axisStep_return axisStep457 = null;

        XQueryParser.filterExpr_return filterExpr458 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1089:5: ( axisStep | filterExpr )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1089:7: axisStep
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_axisStep_in_stepExpr9675);
                    axisStep457=axisStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, axisStep457.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1089:18: filterExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_filterExpr_in_stepExpr9679);
                    filterExpr458=filterExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filterExpr458.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stepExpr"

    public static class axisStep_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "axisStep"
    // org/brackit/xquery/compiler/parser/XQuery.g:1092:1: axisStep : ( forwardStep | reverseStep ) predicateList -> { $pathExpr::stepAlternative == 2 }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? ) -> ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? ) ;
    public final XQueryParser.axisStep_return axisStep() throws RecognitionException {
        XQueryParser.axisStep_return retval = new XQueryParser.axisStep_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.forwardStep_return forwardStep459 = null;

        XQueryParser.reverseStep_return reverseStep460 = null;

        XQueryParser.predicateList_return predicateList461 = null;


        RewriteRuleSubtreeStream stream_reverseStep=new RewriteRuleSubtreeStream(adaptor,"rule reverseStep");
        RewriteRuleSubtreeStream stream_predicateList=new RewriteRuleSubtreeStream(adaptor,"rule predicateList");
        RewriteRuleSubtreeStream stream_forwardStep=new RewriteRuleSubtreeStream(adaptor,"rule forwardStep");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1093:5: ( ( forwardStep | reverseStep ) predicateList -> { $pathExpr::stepAlternative == 2 }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? ) -> ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1093:8: ( forwardStep | reverseStep ) predicateList
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:1093:8: ( forwardStep | reverseStep )
            int alt127=2;
            switch ( input.LA(1) ) {
            case XQUERY:
            case ENCODING:
            case VERSION:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case BOUNDARY_SPACE:
            case PRESERVE:
            case STRIP:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case OPTION:
            case FT_OPTION:
            case USING:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case COPY_NAMESPACES:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAN:
            case PERCENT:
            case PER_MILLE:
            case ZERO_DIGIT:
            case DIGIT:
            case PATTERN_SEPARATOR:
            case NO_PRESERVE:
            case INHERIT:
            case NO_INHERIT:
            case COLLATION:
            case BASE_URI:
            case IMPORT:
            case SCHEMA:
            case AT:
            case EXTERNAL:
            case VARIABLE:
            case CONSTANT:
            case CONSTRUCTION:
            case SEQUENTIAL:
            case UPDATING:
            case SIMPLE:
            case DETERMINISTIC:
            case NONDETERMINISTIC:
            case FOR:
            case IN:
            case ALLOWING:
            case SCORE:
            case LET:
            case TUMBLING:
            case WINDOW:
            case SLIDING:
            case START:
            case WHEN:
            case ONLY:
            case END:
            case PREVIOUS:
            case NEXT:
            case COUNT:
            case WHERE:
            case GROUP:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case RETURN:
            case SOME:
            case SATISFIES:
            case EVERY:
            case TYPESWITCH:
            case CASE:
            case AS:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case CONTAINS:
            case TEXT:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case CHILD:
            case DESCENDANT:
            case ATTRIBUTE:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case DOCUMENT:
            case COMMENT:
            case PROCESSING_INSTRUCTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case ANYKIND:
            case DOCUMENT_NODE:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case REVALIDATION:
            case SKIP:
            case FIRST:
            case LAST:
            case INTO:
            case AFTER:
            case BEFORE:
            case INSERT:
            case NODE:
            case NODES:
            case DELETE:
            case REPLACE:
            case WITH:
            case VALUE:
            case RENAME:
            case COPY:
            case MODIFY:
            case SET:
            case BLOCK:
            case EXIT:
            case RETURNING:
            case WHILE:
            case NOT:
            case FTNOT:
            case WEIGHT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case DISTANCE:
            case SENTENCES:
            case PARAGRAPHS:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case ENTIRE:
            case CONTENT:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case STEMMING:
            case NO:
            case THESAURUS:
            case RELATIONSHIP:
            case LEVELS:
            case STOP:
            case LANGUAGE:
            case WILDCARDS:
            case WITHOUT:
            case CONTEXT:
            case TRY:
            case CATCH:
            case NAMESPACE_NODE:
            case NCName:
            case 415:
            case 425:
                {
                alt127=1;
                }
                break;
            case PARENT:
                {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==424) ) {
                    alt127=2;
                }
                else if ( (LA127_2==EOF||(LA127_2>=LAngle && LA127_2<=RAngle)||LA127_2==RCurly||(LA127_2>=SymEq && LA127_2<=Colon)||LA127_2==DEFAULT||LA127_2==ORDERED||(LA127_2>=ORDER && LA127_2<=EMPTY)||LA127_2==COLLATION||LA127_2==AT||LA127_2==FOR||LA127_2==LET||LA127_2==WINDOW||LA127_2==START||(LA127_2>=ONLY && LA127_2<=END)||(LA127_2>=COUNT && LA127_2<=GROUP)||(LA127_2>=STABLE && LA127_2<=RETURN)||LA127_2==SATISFIES||(LA127_2>=CASE && LA127_2<=AS)||(LA127_2>=ELSE && LA127_2<=CONTAINS)||(LA127_2>=TO && LA127_2<=INSTANCE)||(LA127_2>=TREAT && LA127_2<=IS)||(LA127_2>=INTO && LA127_2<=BEFORE)||LA127_2==WITH||LA127_2==MODIFY||(LA127_2>=FTOR && LA127_2<=NOT)||LA127_2==WORDS||LA127_2==TIMES||(LA127_2>=DISTANCE && LA127_2<=DIFFERENT)||LA127_2==ENTIRE||LA127_2==LEVELS||LA127_2==WITHOUT||LA127_2==406||(LA127_2>=409 && LA127_2<=410)||(LA127_2>=413 && LA127_2<=423)||(LA127_2>=427 && LA127_2<=428)) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 2, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA127_3 = input.LA(2);

                if ( (LA127_3==424) ) {
                    alt127=2;
                }
                else if ( (LA127_3==EOF||(LA127_3>=LAngle && LA127_3<=RAngle)||LA127_3==RCurly||(LA127_3>=SymEq && LA127_3<=Colon)||LA127_3==DEFAULT||LA127_3==ORDERED||(LA127_3>=ORDER && LA127_3<=EMPTY)||LA127_3==COLLATION||LA127_3==AT||LA127_3==FOR||LA127_3==LET||LA127_3==WINDOW||LA127_3==START||(LA127_3>=ONLY && LA127_3<=END)||(LA127_3>=COUNT && LA127_3<=GROUP)||(LA127_3>=STABLE && LA127_3<=RETURN)||LA127_3==SATISFIES||(LA127_3>=CASE && LA127_3<=AS)||(LA127_3>=ELSE && LA127_3<=CONTAINS)||(LA127_3>=TO && LA127_3<=INSTANCE)||(LA127_3>=TREAT && LA127_3<=IS)||(LA127_3>=INTO && LA127_3<=BEFORE)||LA127_3==WITH||LA127_3==MODIFY||(LA127_3>=FTOR && LA127_3<=NOT)||LA127_3==WORDS||LA127_3==TIMES||(LA127_3>=DISTANCE && LA127_3<=DIFFERENT)||LA127_3==ENTIRE||LA127_3==LEVELS||LA127_3==WITHOUT||LA127_3==406||(LA127_3>=409 && LA127_3<=410)||(LA127_3>=413 && LA127_3<=423)||(LA127_3>=427 && LA127_3<=428)) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 3, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA127_4 = input.LA(2);

                if ( (LA127_4==424) ) {
                    alt127=2;
                }
                else if ( (LA127_4==EOF||(LA127_4>=LAngle && LA127_4<=RAngle)||LA127_4==RCurly||(LA127_4>=SymEq && LA127_4<=Colon)||LA127_4==DEFAULT||LA127_4==ORDERED||(LA127_4>=ORDER && LA127_4<=EMPTY)||LA127_4==COLLATION||LA127_4==AT||LA127_4==FOR||LA127_4==LET||LA127_4==WINDOW||LA127_4==START||(LA127_4>=ONLY && LA127_4<=END)||(LA127_4>=COUNT && LA127_4<=GROUP)||(LA127_4>=STABLE && LA127_4<=RETURN)||LA127_4==SATISFIES||(LA127_4>=CASE && LA127_4<=AS)||(LA127_4>=ELSE && LA127_4<=CONTAINS)||(LA127_4>=TO && LA127_4<=INSTANCE)||(LA127_4>=TREAT && LA127_4<=IS)||(LA127_4>=INTO && LA127_4<=BEFORE)||LA127_4==WITH||LA127_4==MODIFY||(LA127_4>=FTOR && LA127_4<=NOT)||LA127_4==WORDS||LA127_4==TIMES||(LA127_4>=DISTANCE && LA127_4<=DIFFERENT)||LA127_4==ENTIRE||LA127_4==LEVELS||LA127_4==WITHOUT||LA127_4==406||(LA127_4>=409 && LA127_4<=410)||(LA127_4>=413 && LA127_4<=423)||(LA127_4>=427 && LA127_4<=428)) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 4, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA127_5 = input.LA(2);

                if ( (LA127_5==424) ) {
                    alt127=2;
                }
                else if ( (LA127_5==EOF||(LA127_5>=LAngle && LA127_5<=RAngle)||LA127_5==RCurly||(LA127_5>=SymEq && LA127_5<=Colon)||LA127_5==DEFAULT||LA127_5==ORDERED||(LA127_5>=ORDER && LA127_5<=EMPTY)||LA127_5==COLLATION||LA127_5==AT||LA127_5==FOR||LA127_5==LET||LA127_5==WINDOW||LA127_5==START||(LA127_5>=ONLY && LA127_5<=END)||(LA127_5>=COUNT && LA127_5<=GROUP)||(LA127_5>=STABLE && LA127_5<=RETURN)||LA127_5==SATISFIES||(LA127_5>=CASE && LA127_5<=AS)||(LA127_5>=ELSE && LA127_5<=CONTAINS)||(LA127_5>=TO && LA127_5<=INSTANCE)||(LA127_5>=TREAT && LA127_5<=IS)||(LA127_5>=INTO && LA127_5<=BEFORE)||LA127_5==WITH||LA127_5==MODIFY||(LA127_5>=FTOR && LA127_5<=NOT)||LA127_5==WORDS||LA127_5==TIMES||(LA127_5>=DISTANCE && LA127_5<=DIFFERENT)||LA127_5==ENTIRE||LA127_5==LEVELS||LA127_5==WITHOUT||LA127_5==406||(LA127_5>=409 && LA127_5<=410)||(LA127_5>=413 && LA127_5<=423)||(LA127_5>=427 && LA127_5<=428)) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 5, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA127_6 = input.LA(2);

                if ( (LA127_6==424) ) {
                    alt127=2;
                }
                else if ( (LA127_6==EOF||(LA127_6>=LAngle && LA127_6<=RAngle)||LA127_6==RCurly||(LA127_6>=SymEq && LA127_6<=Colon)||LA127_6==DEFAULT||LA127_6==ORDERED||(LA127_6>=ORDER && LA127_6<=EMPTY)||LA127_6==COLLATION||LA127_6==AT||LA127_6==FOR||LA127_6==LET||LA127_6==WINDOW||LA127_6==START||(LA127_6>=ONLY && LA127_6<=END)||(LA127_6>=COUNT && LA127_6<=GROUP)||(LA127_6>=STABLE && LA127_6<=RETURN)||LA127_6==SATISFIES||(LA127_6>=CASE && LA127_6<=AS)||(LA127_6>=ELSE && LA127_6<=CONTAINS)||(LA127_6>=TO && LA127_6<=INSTANCE)||(LA127_6>=TREAT && LA127_6<=IS)||(LA127_6>=INTO && LA127_6<=BEFORE)||LA127_6==WITH||LA127_6==MODIFY||(LA127_6>=FTOR && LA127_6<=NOT)||LA127_6==WORDS||LA127_6==TIMES||(LA127_6>=DISTANCE && LA127_6<=DIFFERENT)||LA127_6==ENTIRE||LA127_6==LEVELS||LA127_6==WITHOUT||LA127_6==406||(LA127_6>=409 && LA127_6<=410)||(LA127_6>=413 && LA127_6<=423)||(LA127_6>=427 && LA127_6<=428)) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 6, input);

                    throw nvae;
                }
                }
                break;
            case 426:
                {
                alt127=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1093:9: forwardStep
                    {
                    pushFollow(FOLLOW_forwardStep_in_axisStep9701);
                    forwardStep459=forwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forwardStep.add(forwardStep459.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1093:23: reverseStep
                    {
                    pushFollow(FOLLOW_reverseStep_in_axisStep9705);
                    reverseStep460=reverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverseStep.add(reverseStep460.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_predicateList_in_axisStep9708);
            predicateList461=predicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_predicateList.add(predicateList461.getTree());


            // AST REWRITE
            // elements: reverseStep, predicateList, forwardStep, reverseStep, predicateList, forwardStep
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1094:2: -> { $pathExpr::stepAlternative == 2 }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? )
            if ( ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative == 2 ) {
                // org/brackit/xquery/compiler/parser/XQuery.g:1095:3: ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(StepExpr, "StepExpr"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1095:14: ^( AxisSpec DESCENDANT_OR_SELF )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_2);

                adaptor.addChild(root_2, (Object)adaptor.create(DESCENDANT_OR_SELF, "DESCENDANT_OR_SELF"));

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, (Object)adaptor.create(KindTestAnyKind, "KindTestAnyKind"));

                adaptor.addChild(root_0, root_1);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:1095:62: ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(StepExpr, "StepExpr"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1095:73: ( forwardStep )?
                if ( stream_forwardStep.hasNext() ) {
                    adaptor.addChild(root_1, stream_forwardStep.nextTree());

                }
                stream_forwardStep.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1095:86: ( reverseStep )?
                if ( stream_reverseStep.hasNext() ) {
                    adaptor.addChild(root_1, stream_reverseStep.nextTree());

                }
                stream_reverseStep.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1095:99: ( predicateList )?
                if ( stream_predicateList.hasNext() ) {
                    adaptor.addChild(root_1, stream_predicateList.nextTree());

                }
                stream_predicateList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1096:2: -> ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1096:7: ^( StepExpr ( forwardStep )? ( reverseStep )? ( predicateList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(StepExpr, "StepExpr"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1096:18: ( forwardStep )?
                if ( stream_forwardStep.hasNext() ) {
                    adaptor.addChild(root_1, stream_forwardStep.nextTree());

                }
                stream_forwardStep.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1096:31: ( reverseStep )?
                if ( stream_reverseStep.hasNext() ) {
                    adaptor.addChild(root_1, stream_reverseStep.nextTree());

                }
                stream_reverseStep.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1096:44: ( predicateList )?
                if ( stream_predicateList.hasNext() ) {
                    adaptor.addChild(root_1, stream_predicateList.nextTree());

                }
                stream_predicateList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "axisStep"

    public static class forwardStep_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forwardStep"
    // org/brackit/xquery/compiler/parser/XQuery.g:1099:1: forwardStep : ( ( forwardAxis nodeTest ) -> ^( AxisSpec forwardAxis ) nodeTest | abbrevForwardStep -> abbrevForwardStep );
    public final XQueryParser.forwardStep_return forwardStep() throws RecognitionException {
        XQueryParser.forwardStep_return retval = new XQueryParser.forwardStep_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.forwardAxis_return forwardAxis462 = null;

        XQueryParser.nodeTest_return nodeTest463 = null;

        XQueryParser.abbrevForwardStep_return abbrevForwardStep464 = null;


        RewriteRuleSubtreeStream stream_abbrevForwardStep=new RewriteRuleSubtreeStream(adaptor,"rule abbrevForwardStep");
        RewriteRuleSubtreeStream stream_nodeTest=new RewriteRuleSubtreeStream(adaptor,"rule nodeTest");
        RewriteRuleSubtreeStream stream_forwardAxis=new RewriteRuleSubtreeStream(adaptor,"rule forwardAxis");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1100:5: ( ( forwardAxis nodeTest ) -> ^( AxisSpec forwardAxis ) nodeTest | abbrevForwardStep -> abbrevForwardStep )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1100:7: ( forwardAxis nodeTest )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1100:7: ( forwardAxis nodeTest )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1100:8: forwardAxis nodeTest
                    {
                    pushFollow(FOLLOW_forwardAxis_in_forwardStep9780);
                    forwardAxis462=forwardAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forwardAxis.add(forwardAxis462.getTree());
                    pushFollow(FOLLOW_nodeTest_in_forwardStep9782);
                    nodeTest463=nodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nodeTest.add(nodeTest463.getTree());

                    }



                    // AST REWRITE
                    // elements: forwardAxis, nodeTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1100:30: -> ^( AxisSpec forwardAxis ) nodeTest
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1100:33: ^( AxisSpec forwardAxis )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_1);

                        adaptor.addChild(root_1, stream_forwardAxis.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_nodeTest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1101:8: abbrevForwardStep
                    {
                    pushFollow(FOLLOW_abbrevForwardStep_in_forwardStep9802);
                    abbrevForwardStep464=abbrevForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_abbrevForwardStep.add(abbrevForwardStep464.getTree());


                    // AST REWRITE
                    // elements: abbrevForwardStep
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1101:27: -> abbrevForwardStep
                    {
                        adaptor.addChild(root_0, stream_abbrevForwardStep.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forwardStep"

    public static class forwardAxis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forwardAxis"
    // org/brackit/xquery/compiler/parser/XQuery.g:1104:1: forwardAxis : ( CHILD '::' | DESCENDANT '::' | ATTRIBUTE '::' | SELF '::' | DESCENDANT_OR_SELF '::' | FOLLOWING_SIBLING '::' | FOLLOWING '::' );
    public final XQueryParser.forwardAxis_return forwardAxis() throws RecognitionException {
        XQueryParser.forwardAxis_return retval = new XQueryParser.forwardAxis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CHILD465=null;
        Token string_literal466=null;
        Token DESCENDANT467=null;
        Token string_literal468=null;
        Token ATTRIBUTE469=null;
        Token string_literal470=null;
        Token SELF471=null;
        Token string_literal472=null;
        Token DESCENDANT_OR_SELF473=null;
        Token string_literal474=null;
        Token FOLLOWING_SIBLING475=null;
        Token string_literal476=null;
        Token FOLLOWING477=null;
        Token string_literal478=null;

        Object CHILD465_tree=null;
        Object string_literal466_tree=null;
        Object DESCENDANT467_tree=null;
        Object string_literal468_tree=null;
        Object ATTRIBUTE469_tree=null;
        Object string_literal470_tree=null;
        Object SELF471_tree=null;
        Object string_literal472_tree=null;
        Object DESCENDANT_OR_SELF473_tree=null;
        Object string_literal474_tree=null;
        Object FOLLOWING_SIBLING475_tree=null;
        Object string_literal476_tree=null;
        Object FOLLOWING477_tree=null;
        Object string_literal478_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1105:5: ( CHILD '::' | DESCENDANT '::' | ATTRIBUTE '::' | SELF '::' | DESCENDANT_OR_SELF '::' | FOLLOWING_SIBLING '::' | FOLLOWING '::' )
            int alt129=7;
            switch ( input.LA(1) ) {
            case CHILD:
                {
                alt129=1;
                }
                break;
            case DESCENDANT:
                {
                alt129=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt129=3;
                }
                break;
            case SELF:
                {
                alt129=4;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt129=5;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt129=6;
                }
                break;
            case FOLLOWING:
                {
                alt129=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1105:7: CHILD '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    CHILD465=(Token)match(input,CHILD,FOLLOW_CHILD_in_forwardAxis9828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHILD465_tree = (Object)adaptor.create(CHILD465);
                    adaptor.addChild(root_0, CHILD465_tree);
                    }
                    string_literal466=(Token)match(input,424,FOLLOW_424_in_forwardAxis9830); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1106:7: DESCENDANT '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    DESCENDANT467=(Token)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_forwardAxis9839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT467_tree = (Object)adaptor.create(DESCENDANT467);
                    adaptor.addChild(root_0, DESCENDANT467_tree);
                    }
                    string_literal468=(Token)match(input,424,FOLLOW_424_in_forwardAxis9841); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1107:7: ATTRIBUTE '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    ATTRIBUTE469=(Token)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_forwardAxis9850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE469_tree = (Object)adaptor.create(ATTRIBUTE469);
                    adaptor.addChild(root_0, ATTRIBUTE469_tree);
                    }
                    string_literal470=(Token)match(input,424,FOLLOW_424_in_forwardAxis9852); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1108:7: SELF '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    SELF471=(Token)match(input,SELF,FOLLOW_SELF_in_forwardAxis9861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF471_tree = (Object)adaptor.create(SELF471);
                    adaptor.addChild(root_0, SELF471_tree);
                    }
                    string_literal472=(Token)match(input,424,FOLLOW_424_in_forwardAxis9863); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1109:7: DESCENDANT_OR_SELF '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    DESCENDANT_OR_SELF473=(Token)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_forwardAxis9872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT_OR_SELF473_tree = (Object)adaptor.create(DESCENDANT_OR_SELF473);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF473_tree);
                    }
                    string_literal474=(Token)match(input,424,FOLLOW_424_in_forwardAxis9874); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1110:7: FOLLOWING_SIBLING '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    FOLLOWING_SIBLING475=(Token)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_forwardAxis9883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING_SIBLING475_tree = (Object)adaptor.create(FOLLOWING_SIBLING475);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING475_tree);
                    }
                    string_literal476=(Token)match(input,424,FOLLOW_424_in_forwardAxis9885); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1111:7: FOLLOWING '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    FOLLOWING477=(Token)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_forwardAxis9894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING477_tree = (Object)adaptor.create(FOLLOWING477);
                    adaptor.addChild(root_0, FOLLOWING477_tree);
                    }
                    string_literal478=(Token)match(input,424,FOLLOW_424_in_forwardAxis9896); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forwardAxis"

    public static class abbrevForwardStep_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abbrevForwardStep"
    // org/brackit/xquery/compiler/parser/XQuery.g:1114:1: abbrevForwardStep : ( ( '@' )=> '@' nodeTest -> ^( AxisSpec ATTRIBUTE ) nodeTest | ( ( ATTRIBUTE | SCHEMA_ATTRIBUTE ) '(' )=> kindTest -> ^( AxisSpec ATTRIBUTE ) kindTest | nodeTest -> ^( AxisSpec CHILD ) nodeTest );
    public final XQueryParser.abbrevForwardStep_return abbrevForwardStep() throws RecognitionException {
        XQueryParser.abbrevForwardStep_return retval = new XQueryParser.abbrevForwardStep_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal479=null;
        XQueryParser.nodeTest_return nodeTest480 = null;

        XQueryParser.kindTest_return kindTest481 = null;

        XQueryParser.nodeTest_return nodeTest482 = null;


        Object char_literal479_tree=null;
        RewriteRuleTokenStream stream_425=new RewriteRuleTokenStream(adaptor,"token 425");
        RewriteRuleSubtreeStream stream_nodeTest=new RewriteRuleSubtreeStream(adaptor,"rule nodeTest");
        RewriteRuleSubtreeStream stream_kindTest=new RewriteRuleSubtreeStream(adaptor,"rule kindTest");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1116:5: ( ( '@' )=> '@' nodeTest -> ^( AxisSpec ATTRIBUTE ) nodeTest | ( ( ATTRIBUTE | SCHEMA_ATTRIBUTE ) '(' )=> kindTest -> ^( AxisSpec ATTRIBUTE ) kindTest | nodeTest -> ^( AxisSpec CHILD ) nodeTest )
            int alt130=3;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1116:7: ( '@' )=> '@' nodeTest
                    {
                    char_literal479=(Token)match(input,425,FOLLOW_425_in_abbrevForwardStep9925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_425.add(char_literal479);

                    pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep9927);
                    nodeTest480=nodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nodeTest.add(nodeTest480.getTree());


                    // AST REWRITE
                    // elements: nodeTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1116:29: -> ^( AxisSpec ATTRIBUTE ) nodeTest
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1116:32: ^( AxisSpec ATTRIBUTE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(ATTRIBUTE, "ATTRIBUTE"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_nodeTest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1117:8: ( ( ATTRIBUTE | SCHEMA_ATTRIBUTE ) '(' )=> kindTest
                    {
                    pushFollow(FOLLOW_kindTest_in_abbrevForwardStep9960);
                    kindTest481=kindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_kindTest.add(kindTest481.getTree());


                    // AST REWRITE
                    // elements: kindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1117:57: -> ^( AxisSpec ATTRIBUTE ) kindTest
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1117:60: ^( AxisSpec ATTRIBUTE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(ATTRIBUTE, "ATTRIBUTE"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_kindTest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1118:8: nodeTest
                    {
                    pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep9979);
                    nodeTest482=nodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nodeTest.add(nodeTest482.getTree());


                    // AST REWRITE
                    // elements: nodeTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1118:17: -> ^( AxisSpec CHILD ) nodeTest
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1118:20: ^( AxisSpec CHILD )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(CHILD, "CHILD"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_nodeTest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abbrevForwardStep"

    public static class reverseStep_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverseStep"
    // org/brackit/xquery/compiler/parser/XQuery.g:1121:1: reverseStep : ( ( reverseAxis nodeTest ) -> ^( AxisSpec reverseAxis ) nodeTest | abbrevReverseStep -> abbrevReverseStep );
    public final XQueryParser.reverseStep_return reverseStep() throws RecognitionException {
        XQueryParser.reverseStep_return retval = new XQueryParser.reverseStep_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.reverseAxis_return reverseAxis483 = null;

        XQueryParser.nodeTest_return nodeTest484 = null;

        XQueryParser.abbrevReverseStep_return abbrevReverseStep485 = null;


        RewriteRuleSubtreeStream stream_abbrevReverseStep=new RewriteRuleSubtreeStream(adaptor,"rule abbrevReverseStep");
        RewriteRuleSubtreeStream stream_nodeTest=new RewriteRuleSubtreeStream(adaptor,"rule nodeTest");
        RewriteRuleSubtreeStream stream_reverseAxis=new RewriteRuleSubtreeStream(adaptor,"rule reverseAxis");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1122:5: ( ( reverseAxis nodeTest ) -> ^( AxisSpec reverseAxis ) nodeTest | abbrevReverseStep -> abbrevReverseStep )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=PARENT && LA131_0<=ANCESTOR_OR_SELF)) ) {
                alt131=1;
            }
            else if ( (LA131_0==426) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1122:7: ( reverseAxis nodeTest )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1122:7: ( reverseAxis nodeTest )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1122:8: reverseAxis nodeTest
                    {
                    pushFollow(FOLLOW_reverseAxis_in_reverseStep10011);
                    reverseAxis483=reverseAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverseAxis.add(reverseAxis483.getTree());
                    pushFollow(FOLLOW_nodeTest_in_reverseStep10013);
                    nodeTest484=nodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nodeTest.add(nodeTest484.getTree());

                    }



                    // AST REWRITE
                    // elements: nodeTest, reverseAxis
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1122:30: -> ^( AxisSpec reverseAxis ) nodeTest
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1122:33: ^( AxisSpec reverseAxis )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_1);

                        adaptor.addChild(root_1, stream_reverseAxis.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_nodeTest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1123:8: abbrevReverseStep
                    {
                    pushFollow(FOLLOW_abbrevReverseStep_in_reverseStep10033);
                    abbrevReverseStep485=abbrevReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_abbrevReverseStep.add(abbrevReverseStep485.getTree());


                    // AST REWRITE
                    // elements: abbrevReverseStep
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1123:27: -> abbrevReverseStep
                    {
                        adaptor.addChild(root_0, stream_abbrevReverseStep.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverseStep"

    public static class reverseAxis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverseAxis"
    // org/brackit/xquery/compiler/parser/XQuery.g:1126:1: reverseAxis : ( PARENT '::' | ANCESTOR '::' | PRECEDING_SIBLING '::' | PRECEDING '::' | ANCESTOR_OR_SELF '::' );
    public final XQueryParser.reverseAxis_return reverseAxis() throws RecognitionException {
        XQueryParser.reverseAxis_return retval = new XQueryParser.reverseAxis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PARENT486=null;
        Token string_literal487=null;
        Token ANCESTOR488=null;
        Token string_literal489=null;
        Token PRECEDING_SIBLING490=null;
        Token string_literal491=null;
        Token PRECEDING492=null;
        Token string_literal493=null;
        Token ANCESTOR_OR_SELF494=null;
        Token string_literal495=null;

        Object PARENT486_tree=null;
        Object string_literal487_tree=null;
        Object ANCESTOR488_tree=null;
        Object string_literal489_tree=null;
        Object PRECEDING_SIBLING490_tree=null;
        Object string_literal491_tree=null;
        Object PRECEDING492_tree=null;
        Object string_literal493_tree=null;
        Object ANCESTOR_OR_SELF494_tree=null;
        Object string_literal495_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1127:5: ( PARENT '::' | ANCESTOR '::' | PRECEDING_SIBLING '::' | PRECEDING '::' | ANCESTOR_OR_SELF '::' )
            int alt132=5;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                alt132=1;
                }
                break;
            case ANCESTOR:
                {
                alt132=2;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt132=3;
                }
                break;
            case PRECEDING:
                {
                alt132=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt132=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1127:7: PARENT '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    PARENT486=(Token)match(input,PARENT,FOLLOW_PARENT_in_reverseAxis10059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARENT486_tree = (Object)adaptor.create(PARENT486);
                    adaptor.addChild(root_0, PARENT486_tree);
                    }
                    string_literal487=(Token)match(input,424,FOLLOW_424_in_reverseAxis10061); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1128:7: ANCESTOR '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    ANCESTOR488=(Token)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_reverseAxis10070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR488_tree = (Object)adaptor.create(ANCESTOR488);
                    adaptor.addChild(root_0, ANCESTOR488_tree);
                    }
                    string_literal489=(Token)match(input,424,FOLLOW_424_in_reverseAxis10072); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1129:7: PRECEDING_SIBLING '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    PRECEDING_SIBLING490=(Token)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_reverseAxis10081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING_SIBLING490_tree = (Object)adaptor.create(PRECEDING_SIBLING490);
                    adaptor.addChild(root_0, PRECEDING_SIBLING490_tree);
                    }
                    string_literal491=(Token)match(input,424,FOLLOW_424_in_reverseAxis10083); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1130:7: PRECEDING '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    PRECEDING492=(Token)match(input,PRECEDING,FOLLOW_PRECEDING_in_reverseAxis10092); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING492_tree = (Object)adaptor.create(PRECEDING492);
                    adaptor.addChild(root_0, PRECEDING492_tree);
                    }
                    string_literal493=(Token)match(input,424,FOLLOW_424_in_reverseAxis10094); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1131:7: ANCESTOR_OR_SELF '::'
                    {
                    root_0 = (Object)adaptor.nil();

                    ANCESTOR_OR_SELF494=(Token)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_reverseAxis10103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR_OR_SELF494_tree = (Object)adaptor.create(ANCESTOR_OR_SELF494);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF494_tree);
                    }
                    string_literal495=(Token)match(input,424,FOLLOW_424_in_reverseAxis10105); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverseAxis"

    public static class abbrevReverseStep_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abbrevReverseStep"
    // org/brackit/xquery/compiler/parser/XQuery.g:1134:1: abbrevReverseStep : '..' -> ^( AxisSpec PARENT ) ^( NameTest Wildcard ) ;
    public final XQueryParser.abbrevReverseStep_return abbrevReverseStep() throws RecognitionException {
        XQueryParser.abbrevReverseStep_return retval = new XQueryParser.abbrevReverseStep_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal496=null;

        Object string_literal496_tree=null;
        RewriteRuleTokenStream stream_426=new RewriteRuleTokenStream(adaptor,"token 426");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1135:5: ( '..' -> ^( AxisSpec PARENT ) ^( NameTest Wildcard ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1135:7: '..'
            {
            string_literal496=(Token)match(input,426,FOLLOW_426_in_abbrevReverseStep10127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_426.add(string_literal496);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1135:12: -> ^( AxisSpec PARENT ) ^( NameTest Wildcard )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1135:15: ^( AxisSpec PARENT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(PARENT, "PARENT"));

                adaptor.addChild(root_0, root_1);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:1135:34: ^( NameTest Wildcard )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NameTest, "NameTest"), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(Wildcard, "Wildcard"));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abbrevReverseStep"

    public static class nodeTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nodeTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1138:1: nodeTest : ( kindTest -> kindTest | nameTest -> ^( NameTest nameTest ) );
    public final XQueryParser.nodeTest_return nodeTest() throws RecognitionException {
        XQueryParser.nodeTest_return retval = new XQueryParser.nodeTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.kindTest_return kindTest497 = null;

        XQueryParser.nameTest_return nameTest498 = null;


        RewriteRuleSubtreeStream stream_kindTest=new RewriteRuleSubtreeStream(adaptor,"rule kindTest");
        RewriteRuleSubtreeStream stream_nameTest=new RewriteRuleSubtreeStream(adaptor,"rule nameTest");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1139:5: ( kindTest -> kindTest | nameTest -> ^( NameTest nameTest ) )
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1139:7: kindTest
                    {
                    pushFollow(FOLLOW_kindTest_in_nodeTest10162);
                    kindTest497=kindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_kindTest.add(kindTest497.getTree());


                    // AST REWRITE
                    // elements: kindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1139:16: -> kindTest
                    {
                        adaptor.addChild(root_0, stream_kindTest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1140:7: nameTest
                    {
                    pushFollow(FOLLOW_nameTest_in_nodeTest10174);
                    nameTest498=nameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nameTest.add(nameTest498.getTree());


                    // AST REWRITE
                    // elements: nameTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1140:16: -> ^( NameTest nameTest )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1140:19: ^( NameTest nameTest )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NameTest, "NameTest"), root_1);

                        adaptor.addChild(root_1, stream_nameTest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nodeTest"

    public static class nameTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1143:1: nameTest : ( qName | wildcard );
    public final XQueryParser.nameTest_return nameTest() throws RecognitionException {
        XQueryParser.nameTest_return retval = new XQueryParser.nameTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName499 = null;

        XQueryParser.wildcard_return wildcard500 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1144:5: ( qName | wildcard )
            int alt134=2;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1144:7: qName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_qName_in_nameTest10203);
                    qName499=qName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qName499.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1145:7: wildcard
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wildcard_in_nameTest10211);
                    wildcard500=wildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wildcard500.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nameTest"

    public static class wildcard_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wildcard"
    // org/brackit/xquery/compiler/parser/XQuery.g:1148:1: wildcard : ( '*' -> Wildcard | ncName Colon '*' -> ^( WildcardAfterColon ncName ) | '*' Colon ncName -> ^( WildcardBeforeColon ncName ) );
    public final XQueryParser.wildcard_return wildcard() throws RecognitionException {
        XQueryParser.wildcard_return retval = new XQueryParser.wildcard_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal501=null;
        Token Colon503=null;
        Token char_literal504=null;
        Token char_literal505=null;
        Token Colon506=null;
        XQueryParser.ncName_return ncName502 = null;

        XQueryParser.ncName_return ncName507 = null;


        Object char_literal501_tree=null;
        Object Colon503_tree=null;
        Object char_literal504_tree=null;
        Object char_literal505_tree=null;
        Object Colon506_tree=null;
        RewriteRuleTokenStream stream_415=new RewriteRuleTokenStream(adaptor,"token 415");
        RewriteRuleTokenStream stream_Colon=new RewriteRuleTokenStream(adaptor,"token Colon");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1149:5: ( '*' -> Wildcard | ncName Colon '*' -> ^( WildcardAfterColon ncName ) | '*' Colon ncName -> ^( WildcardBeforeColon ncName ) )
            int alt135=3;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==415) ) {
                int LA135_1 = input.LA(2);

                if ( (LA135_1==Colon) ) {
                    alt135=3;
                }
                else if ( (LA135_1==EOF||(LA135_1>=LAngle && LA135_1<=RCurly)||LA135_1==SymEq||LA135_1==DEFAULT||LA135_1==ORDERED||(LA135_1>=ORDER && LA135_1<=EMPTY)||LA135_1==COLLATION||LA135_1==AT||LA135_1==FOR||LA135_1==LET||LA135_1==WINDOW||LA135_1==START||(LA135_1>=ONLY && LA135_1<=END)||(LA135_1>=COUNT && LA135_1<=GROUP)||(LA135_1>=STABLE && LA135_1<=RETURN)||LA135_1==SATISFIES||(LA135_1>=CASE && LA135_1<=AS)||(LA135_1>=ELSE && LA135_1<=CONTAINS)||(LA135_1>=TO && LA135_1<=INSTANCE)||(LA135_1>=TREAT && LA135_1<=IS)||(LA135_1>=INTO && LA135_1<=BEFORE)||LA135_1==WITH||LA135_1==MODIFY||(LA135_1>=FTOR && LA135_1<=NOT)||LA135_1==WORDS||LA135_1==TIMES||(LA135_1>=DISTANCE && LA135_1<=DIFFERENT)||LA135_1==ENTIRE||LA135_1==LEVELS||LA135_1==WITHOUT||LA135_1==406||(LA135_1>=408 && LA135_1<=410)||(LA135_1>=413 && LA135_1<=423)||(LA135_1>=427 && LA135_1<=428)) ) {
                    alt135=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA135_0>=XQUERY && LA135_0<=ANCESTOR_OR_SELF)||(LA135_0>=DOCUMENT && LA135_0<=ITEM)||(LA135_0>=DOCUMENT_NODE && LA135_0<=WHILE)||(LA135_0>=NOT && LA135_0<=NCName)) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1149:7: '*'
                    {
                    char_literal501=(Token)match(input,415,FOLLOW_415_in_wildcard10289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_415.add(char_literal501);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1149:11: -> Wildcard
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(Wildcard, "Wildcard"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1150:7: ncName Colon '*'
                    {
                    pushFollow(FOLLOW_ncName_in_wildcard10301);
                    ncName502=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncName502.getTree());
                    Colon503=(Token)match(input,Colon,FOLLOW_Colon_in_wildcard10303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Colon.add(Colon503);

                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }
                    char_literal504=(Token)match(input,415,FOLLOW_415_in_wildcard10307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_415.add(char_literal504);

                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }


                    // AST REWRITE
                    // elements: ncName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1150:65: -> ^( WildcardAfterColon ncName )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1150:68: ^( WildcardAfterColon ncName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WildcardAfterColon, "WildcardAfterColon"), root_1);

                        adaptor.addChild(root_1, stream_ncName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1151:7: '*' Colon ncName
                    {
                    char_literal505=(Token)match(input,415,FOLLOW_415_in_wildcard10328); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_415.add(char_literal505);

                    Colon506=(Token)match(input,Colon,FOLLOW_Colon_in_wildcard10333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Colon.add(Colon506);

                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }
                    pushFollow(FOLLOW_ncName_in_wildcard10337);
                    ncName507=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncName507.getTree());
                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }


                    // AST REWRITE
                    // elements: ncName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1151:65: -> ^( WildcardBeforeColon ncName )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1151:68: ^( WildcardBeforeColon ncName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WildcardBeforeColon, "WildcardBeforeColon"), root_1);

                        adaptor.addChild(root_1, stream_ncName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wildcard"

    public static class filterExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "filterExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1154:1: filterExpr : primExpr= primaryExpr (pred= predicate )* -> { $pathExpr::stepAlternative == 2 && pred != null }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) ^( FilterExpr primaryExpr ( $pred)* ) -> { $pathExpr::stepAlternative == 2 }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) primaryExpr -> { pred != null }? ^( FilterExpr[$primExpr.start, \"FilterExpr\"] $primExpr ( $pred)? ) -> $primExpr;
    public final XQueryParser.filterExpr_return filterExpr() throws RecognitionException {
        XQueryParser.filterExpr_return retval = new XQueryParser.filterExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.primaryExpr_return primExpr = null;

        XQueryParser.predicate_return pred = null;


        RewriteRuleSubtreeStream stream_predicate=new RewriteRuleSubtreeStream(adaptor,"rule predicate");
        RewriteRuleSubtreeStream stream_primaryExpr=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1155:5: (primExpr= primaryExpr (pred= predicate )* -> { $pathExpr::stepAlternative == 2 && pred != null }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) ^( FilterExpr primaryExpr ( $pred)* ) -> { $pathExpr::stepAlternative == 2 }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) primaryExpr -> { pred != null }? ^( FilterExpr[$primExpr.start, \"FilterExpr\"] $primExpr ( $pred)? ) -> $primExpr)
            // org/brackit/xquery/compiler/parser/XQuery.g:1155:7: primExpr= primaryExpr (pred= predicate )*
            {
            pushFollow(FOLLOW_primaryExpr_in_filterExpr10370);
            primExpr=primaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpr.add(primExpr.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1155:32: (pred= predicate )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==427) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1155:32: pred= predicate
            	    {
            	    pushFollow(FOLLOW_predicate_in_filterExpr10374);
            	    pred=predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_predicate.add(pred.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);



            // AST REWRITE
            // elements: pred, primaryExpr, primExpr, pred, primaryExpr, primExpr
            // token labels: 
            // rule labels: primExpr, retval, pred
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_primExpr=new RewriteRuleSubtreeStream(adaptor,"rule primExpr",primExpr!=null?primExpr.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_pred=new RewriteRuleSubtreeStream(adaptor,"rule pred",pred!=null?pred.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1156:2: -> { $pathExpr::stepAlternative == 2 && pred != null }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) ^( FilterExpr primaryExpr ( $pred)* )
            if ( ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative == 2 && pred != null ) {
                // org/brackit/xquery/compiler/parser/XQuery.g:1157:7: ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(StepExpr, "StepExpr"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1157:18: ^( AxisSpec DESCENDANT_OR_SELF )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_2);

                adaptor.addChild(root_2, (Object)adaptor.create(DESCENDANT_OR_SELF, "DESCENDANT_OR_SELF"));

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, (Object)adaptor.create(KindTestAnyKind, "KindTestAnyKind"));

                adaptor.addChild(root_0, root_1);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:1157:66: ^( FilterExpr primaryExpr ( $pred)* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FilterExpr, "FilterExpr"), root_1);

                adaptor.addChild(root_1, stream_primaryExpr.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1157:91: ( $pred)*
                while ( stream_pred.hasNext() ) {
                    adaptor.addChild(root_1, stream_pred.nextTree());

                }
                stream_pred.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1158:2: -> { $pathExpr::stepAlternative == 2 }? ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind ) primaryExpr
            if ( ((pathExpr_scope)pathExpr_stack.peek()).stepAlternative == 2 ) {
                // org/brackit/xquery/compiler/parser/XQuery.g:1159:7: ^( StepExpr ^( AxisSpec DESCENDANT_OR_SELF ) KindTestAnyKind )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(StepExpr, "StepExpr"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1159:18: ^( AxisSpec DESCENDANT_OR_SELF )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AxisSpec, "AxisSpec"), root_2);

                adaptor.addChild(root_2, (Object)adaptor.create(DESCENDANT_OR_SELF, "DESCENDANT_OR_SELF"));

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, (Object)adaptor.create(KindTestAnyKind, "KindTestAnyKind"));

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_primaryExpr.nextTree());

            }
            else // 1160:2: -> { pred != null }? ^( FilterExpr[$primExpr.start, \"FilterExpr\"] $primExpr ( $pred)? )
            if ( pred != null ) {
                // org/brackit/xquery/compiler/parser/XQuery.g:1161:6: ^( FilterExpr[$primExpr.start, \"FilterExpr\"] $primExpr ( $pred)? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FilterExpr, (primExpr!=null?((Token)primExpr.start):null), "FilterExpr"), root_1);

                adaptor.addChild(root_1, stream_primExpr.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1161:60: ( $pred)?
                if ( stream_pred.hasNext() ) {
                    adaptor.addChild(root_1, stream_pred.nextTree());

                }
                stream_pred.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1162:5: -> $primExpr
            {
                adaptor.addChild(root_0, stream_primExpr.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "filterExpr"

    public static class predicateList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "predicateList"
    // org/brackit/xquery/compiler/parser/XQuery.g:1165:1: predicateList : ( predicate )* -> ( predicate )* ;
    public final XQueryParser.predicateList_return predicateList() throws RecognitionException {
        XQueryParser.predicateList_return retval = new XQueryParser.predicateList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.predicate_return predicate508 = null;


        RewriteRuleSubtreeStream stream_predicate=new RewriteRuleSubtreeStream(adaptor,"rule predicate");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1166:5: ( ( predicate )* -> ( predicate )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1166:7: ( predicate )*
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:1166:7: ( predicate )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==427) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1166:7: predicate
            	    {
            	    pushFollow(FOLLOW_predicate_in_predicateList10488);
            	    predicate508=predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_predicate.add(predicate508.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);



            // AST REWRITE
            // elements: predicate
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1167:5: -> ( predicate )*
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1167:8: ( predicate )*
                while ( stream_predicate.hasNext() ) {
                    adaptor.addChild(root_0, stream_predicate.nextTree());

                }
                stream_predicate.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "predicateList"

    public static class predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "predicate"
    // org/brackit/xquery/compiler/parser/XQuery.g:1170:1: predicate : '[' expr ']' -> ^( Predicate expr ) ;
    public final XQueryParser.predicate_return predicate() throws RecognitionException {
        XQueryParser.predicate_return retval = new XQueryParser.predicate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal509=null;
        Token char_literal511=null;
        XQueryParser.expr_return expr510 = null;


        Object char_literal509_tree=null;
        Object char_literal511_tree=null;
        RewriteRuleTokenStream stream_427=new RewriteRuleTokenStream(adaptor,"token 427");
        RewriteRuleTokenStream stream_428=new RewriteRuleTokenStream(adaptor,"token 428");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1171:5: ( '[' expr ']' -> ^( Predicate expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1171:7: '[' expr ']'
            {
            char_literal509=(Token)match(input,427,FOLLOW_427_in_predicate10519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_427.add(char_literal509);

            pushFollow(FOLLOW_expr_in_predicate10521);
            expr510=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr510.getTree());
            char_literal511=(Token)match(input,428,FOLLOW_428_in_predicate10523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_428.add(char_literal511);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1172:5: -> ^( Predicate expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1172:8: ^( Predicate expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Predicate, "Predicate"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "predicate"

    public static class primaryExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1179:1: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );
    public final XQueryParser.primaryExpr_return primaryExpr() throws RecognitionException {
        XQueryParser.primaryExpr_return retval = new XQueryParser.primaryExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.literal_return literal512 = null;

        XQueryParser.varRef_return varRef513 = null;

        XQueryParser.parenthesizedExpr_return parenthesizedExpr514 = null;

        XQueryParser.contextItemExpr_return contextItemExpr515 = null;

        XQueryParser.functionCall_return functionCall516 = null;

        XQueryParser.orderedExpr_return orderedExpr517 = null;

        XQueryParser.unorderedExpr_return unorderedExpr518 = null;

        XQueryParser.constructor_return constructor519 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1180:5: ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor )
            int alt138=8;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1180:7: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpr10558);
                    literal512=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal512.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1181:7: varRef
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_varRef_in_primaryExpr10566);
                    varRef513=varRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varRef513.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1182:7: parenthesizedExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpr_in_primaryExpr10574);
                    parenthesizedExpr514=parenthesizedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpr514.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1183:7: contextItemExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_contextItemExpr_in_primaryExpr10582);
                    contextItemExpr515=contextItemExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextItemExpr515.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1184:7: functionCall
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_primaryExpr10591);
                    functionCall516=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall516.getTree());

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1185:7: orderedExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_orderedExpr_in_primaryExpr10599);
                    orderedExpr517=orderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderedExpr517.getTree());

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1186:7: unorderedExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unorderedExpr_in_primaryExpr10607);
                    unorderedExpr518=unorderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unorderedExpr518.getTree());

                    }
                    break;
                case 8 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1187:7: constructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constructor_in_primaryExpr10615);
                    constructor519=constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor519.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primaryExpr"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // org/brackit/xquery/compiler/parser/XQuery.g:1190:1: literal : ( numericLiteral -> ^( Literal numericLiteral ) | slit= stringLiteral -> ^( Literal stringLiteral ) );
    public final XQueryParser.literal_return literal() throws RecognitionException {
        XQueryParser.literal_return retval = new XQueryParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.stringLiteral_return slit = null;

        XQueryParser.numericLiteral_return numericLiteral520 = null;


        RewriteRuleSubtreeStream stream_stringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule stringLiteral");
        RewriteRuleSubtreeStream stream_numericLiteral=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1191:5: ( numericLiteral -> ^( Literal numericLiteral ) | slit= stringLiteral -> ^( Literal stringLiteral ) )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( ((LA139_0>=IntegerLiteral && LA139_0<=DoubleLiteral)) ) {
                alt139=1;
            }
            else if ( ((LA139_0>=QuotedStringLiteral && LA139_0<=AposedStringLiteral)) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1191:7: numericLiteral
                    {
                    pushFollow(FOLLOW_numericLiteral_in_literal10636);
                    numericLiteral520=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericLiteral.add(numericLiteral520.getTree());


                    // AST REWRITE
                    // elements: numericLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1191:22: -> ^( Literal numericLiteral )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1191:25: ^( Literal numericLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, stream_numericLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1192:7: slit= stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_literal10654);
                    slit=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringLiteral.add(slit.getTree());


                    // AST REWRITE
                    // elements: stringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1192:26: -> ^( Literal stringLiteral )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1192:29: ^( Literal stringLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, stream_stringLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class numericLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteral"
    // org/brackit/xquery/compiler/parser/XQuery.g:1195:1: numericLiteral : (inte= IntegerLiteral -> ^( Int[$inte.text] ) | dec= DecimalLiteral -> ^( Dec[$dec.text] ) | dbl= DoubleLiteral -> ^( Dbl[$dbl.text] ) );
    public final XQueryParser.numericLiteral_return numericLiteral() throws RecognitionException {
        XQueryParser.numericLiteral_return retval = new XQueryParser.numericLiteral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token inte=null;
        Token dec=null;
        Token dbl=null;

        Object inte_tree=null;
        Object dec_tree=null;
        Object dbl_tree=null;
        RewriteRuleTokenStream stream_IntegerLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerLiteral");
        RewriteRuleTokenStream stream_DecimalLiteral=new RewriteRuleTokenStream(adaptor,"token DecimalLiteral");
        RewriteRuleTokenStream stream_DoubleLiteral=new RewriteRuleTokenStream(adaptor,"token DoubleLiteral");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1196:5: (inte= IntegerLiteral -> ^( Int[$inte.text] ) | dec= DecimalLiteral -> ^( Dec[$dec.text] ) | dbl= DoubleLiteral -> ^( Dbl[$dbl.text] ) )
            int alt140=3;
            switch ( input.LA(1) ) {
            case IntegerLiteral:
                {
                alt140=1;
                }
                break;
            case DecimalLiteral:
                {
                alt140=2;
                }
                break;
            case DoubleLiteral:
                {
                alt140=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1196:7: inte= IntegerLiteral
                    {
                    inte=(Token)match(input,IntegerLiteral,FOLLOW_IntegerLiteral_in_numericLiteral10685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IntegerLiteral.add(inte);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1196:27: -> ^( Int[$inte.text] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1196:30: ^( Int[$inte.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Int, (inte!=null?inte.getText():null)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1197:7: dec= DecimalLiteral
                    {
                    dec=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_numericLiteral10702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DecimalLiteral.add(dec);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1197:26: -> ^( Dec[$dec.text] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1197:29: ^( Dec[$dec.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Dec, (dec!=null?dec.getText():null)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1198:7: dbl= DoubleLiteral
                    {
                    dbl=(Token)match(input,DoubleLiteral,FOLLOW_DoubleLiteral_in_numericLiteral10719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DoubleLiteral.add(dbl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1198:25: -> ^( Dbl[$dbl.text] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1198:28: ^( Dbl[$dbl.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Dbl, (dbl!=null?dbl.getText():null)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteral"

    public static class stringLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringLiteral"
    // org/brackit/xquery/compiler/parser/XQuery.g:1201:1: stringLiteral : (qs= QuotedStringLiteral -> ^( Str[$qs.getText().substring(1, $qs.getText().length() - 1)] ) | as= AposedStringLiteral -> ^( Str[$as.getText().substring(1, $as.getText().length() - 1)] ) );
    public final XQueryParser.stringLiteral_return stringLiteral() throws RecognitionException {
        XQueryParser.stringLiteral_return retval = new XQueryParser.stringLiteral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token qs=null;
        Token as=null;

        Object qs_tree=null;
        Object as_tree=null;
        RewriteRuleTokenStream stream_QuotedStringLiteral=new RewriteRuleTokenStream(adaptor,"token QuotedStringLiteral");
        RewriteRuleTokenStream stream_AposedStringLiteral=new RewriteRuleTokenStream(adaptor,"token AposedStringLiteral");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1202:5: (qs= QuotedStringLiteral -> ^( Str[$qs.getText().substring(1, $qs.getText().length() - 1)] ) | as= AposedStringLiteral -> ^( Str[$as.getText().substring(1, $as.getText().length() - 1)] ) )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==QuotedStringLiteral) ) {
                alt141=1;
            }
            else if ( (LA141_0==AposedStringLiteral) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1202:7: qs= QuotedStringLiteral
                    {
                    qs=(Token)match(input,QuotedStringLiteral,FOLLOW_QuotedStringLiteral_in_stringLiteral10749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QuotedStringLiteral.add(qs);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1202:30: -> ^( Str[$qs.getText().substring(1, $qs.getText().length() - 1)] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1202:33: ^( Str[$qs.getText().substring(1, $qs.getText().length() - 1)] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Str, qs.getText().substring(1, qs.getText().length() - 1)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1203:7: as= AposedStringLiteral
                    {
                    as=(Token)match(input,AposedStringLiteral,FOLLOW_AposedStringLiteral_in_stringLiteral10766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AposedStringLiteral.add(as);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1203:30: -> ^( Str[$as.getText().substring(1, $as.getText().length() - 1)] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1203:33: ^( Str[$as.getText().substring(1, $as.getText().length() - 1)] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Str, as.getText().substring(1, as.getText().length() - 1)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringLiteral"

    public static class varRef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varRef"
    // org/brackit/xquery/compiler/parser/XQuery.g:1206:1: varRef : '$' v= varName -> VariableRef[variables.resolve($v.text)] ;
    public final XQueryParser.varRef_return varRef() throws RecognitionException {
        XQueryParser.varRef_return retval = new XQueryParser.varRef_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal521=null;
        XQueryParser.varName_return v = null;


        Object char_literal521_tree=null;
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1207:5: ( '$' v= varName -> VariableRef[variables.resolve($v.text)] )
            // org/brackit/xquery/compiler/parser/XQuery.g:1207:7: '$' v= varName
            {
            char_literal521=(Token)match(input,411,FOLLOW_411_in_varRef10797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal521);

            pushFollow(FOLLOW_varName_in_varRef10801);
            v=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(v.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1209:3: -> VariableRef[variables.resolve($v.text)]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VariableRef, variables.resolve((v!=null?input.toString(v.start,v.stop):null))));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varRef"

    public static class varName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1212:1: varName : qName ;
    public final XQueryParser.varName_return varName() throws RecognitionException {
        XQueryParser.varName_return retval = new XQueryParser.varName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName522 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1213:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1213:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_varName10830);
            qName522=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName522.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varName"

    public static class parenthesizedExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1216:1: parenthesizedExpr : ( '(' ')' -> EmptySequence | '(' expr ')' -> expr );
    public final XQueryParser.parenthesizedExpr_return parenthesizedExpr() throws RecognitionException {
        XQueryParser.parenthesizedExpr_return retval = new XQueryParser.parenthesizedExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal523=null;
        Token char_literal524=null;
        Token char_literal525=null;
        Token char_literal527=null;
        XQueryParser.expr_return expr526 = null;


        Object char_literal523_tree=null;
        Object char_literal524_tree=null;
        Object char_literal525_tree=null;
        Object char_literal527_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1217:5: ( '(' ')' -> EmptySequence | '(' expr ')' -> expr )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==408) ) {
                int LA142_1 = input.LA(2);

                if ( (LA142_1==410) ) {
                    alt142=1;
                }
                else if ( (LA142_1==LAngle||LA142_1==Pragma||(LA142_1>=XQUERY && LA142_1<=AposedStringLiteral)||(LA142_1>=DirCommentConstructor && LA142_1<=DirPIConstructor)||(LA142_1>=DOCUMENT && LA142_1<=WHILE)||(LA142_1>=NOT && LA142_1<=NCName)||LA142_1==408||LA142_1==411||(LA142_1>=413 && LA142_1<=415)||(LA142_1>=422 && LA142_1<=423)||(LA142_1>=425 && LA142_1<=426)||LA142_1==429) ) {
                    alt142=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1217:7: '(' ')'
                    {
                    char_literal523=(Token)match(input,408,FOLLOW_408_in_parenthesizedExpr10851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_408.add(char_literal523);

                    char_literal524=(Token)match(input,410,FOLLOW_410_in_parenthesizedExpr10853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_410.add(char_literal524);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1217:17: -> EmptySequence
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(EmptySequence, "EmptySequence"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1218:8: '(' expr ')'
                    {
                    char_literal525=(Token)match(input,408,FOLLOW_408_in_parenthesizedExpr10868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_408.add(char_literal525);

                    pushFollow(FOLLOW_expr_in_parenthesizedExpr10870);
                    expr526=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr526.getTree());
                    char_literal527=(Token)match(input,410,FOLLOW_410_in_parenthesizedExpr10872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_410.add(char_literal527);



                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1218:21: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpr"

    public static class contextItemExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "contextItemExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1221:1: contextItemExpr : '.' -> ContextItemExpr ;
    public final XQueryParser.contextItemExpr_return contextItemExpr() throws RecognitionException {
        XQueryParser.contextItemExpr_return retval = new XQueryParser.contextItemExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal528=null;

        Object char_literal528_tree=null;
        RewriteRuleTokenStream stream_429=new RewriteRuleTokenStream(adaptor,"token 429");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1222:5: ( '.' -> ContextItemExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1222:7: '.'
            {
            char_literal528=(Token)match(input,429,FOLLOW_429_in_contextItemExpr10897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_429.add(char_literal528);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1222:11: -> ContextItemExpr
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ContextItemExpr, "ContextItemExpr"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "contextItemExpr"

    public static class orderedExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderedExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1225:1: orderedExpr : ORDERED LCurly expr RCurly -> ^( OrderedExpr expr ) ;
    public final XQueryParser.orderedExpr_return orderedExpr() throws RecognitionException {
        XQueryParser.orderedExpr_return retval = new XQueryParser.orderedExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ORDERED529=null;
        Token LCurly530=null;
        Token RCurly532=null;
        XQueryParser.expr_return expr531 = null;


        Object ORDERED529_tree=null;
        Object LCurly530_tree=null;
        Object RCurly532_tree=null;
        RewriteRuleTokenStream stream_ORDERED=new RewriteRuleTokenStream(adaptor,"token ORDERED");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1226:5: ( ORDERED LCurly expr RCurly -> ^( OrderedExpr expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1226:7: ORDERED LCurly expr RCurly
            {
            ORDERED529=(Token)match(input,ORDERED,FOLLOW_ORDERED_in_orderedExpr10922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDERED.add(ORDERED529);

            LCurly530=(Token)match(input,LCurly,FOLLOW_LCurly_in_orderedExpr10924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly530);

            pushFollow(FOLLOW_expr_in_orderedExpr10926);
            expr531=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr531.getTree());
            RCurly532=(Token)match(input,RCurly,FOLLOW_RCurly_in_orderedExpr10928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly532);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1227:5: -> ^( OrderedExpr expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1227:8: ^( OrderedExpr expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OrderedExpr, "OrderedExpr"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderedExpr"

    public static class unorderedExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unorderedExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1230:1: unorderedExpr : UNORDERED LCurly expr RCurly -> ^( UnorderedExpr expr ) ;
    public final XQueryParser.unorderedExpr_return unorderedExpr() throws RecognitionException {
        XQueryParser.unorderedExpr_return retval = new XQueryParser.unorderedExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token UNORDERED533=null;
        Token LCurly534=null;
        Token RCurly536=null;
        XQueryParser.expr_return expr535 = null;


        Object UNORDERED533_tree=null;
        Object LCurly534_tree=null;
        Object RCurly536_tree=null;
        RewriteRuleTokenStream stream_UNORDERED=new RewriteRuleTokenStream(adaptor,"token UNORDERED");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1231:5: ( UNORDERED LCurly expr RCurly -> ^( UnorderedExpr expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1231:7: UNORDERED LCurly expr RCurly
            {
            UNORDERED533=(Token)match(input,UNORDERED,FOLLOW_UNORDERED_in_unorderedExpr10961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNORDERED.add(UNORDERED533);

            LCurly534=(Token)match(input,LCurly,FOLLOW_LCurly_in_unorderedExpr10963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly534);

            pushFollow(FOLLOW_expr_in_unorderedExpr10965);
            expr535=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr535.getTree());
            RCurly536=(Token)match(input,RCurly,FOLLOW_RCurly_in_unorderedExpr10967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly536);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1232:5: -> ^( UnorderedExpr expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1232:8: ^( UnorderedExpr expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnorderedExpr, "UnorderedExpr"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unorderedExpr"

    public static class functionCall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCall"
    // org/brackit/xquery/compiler/parser/XQuery.g:1235:1: functionCall : fqn= fqName '(' ( exprSingle ( ',' exprSingle )* -> ( exprSingle )+ )? ')' -> ^( FunctionCall[$fqn.text] ( exprSingle )* ) ;
    public final XQueryParser.functionCall_return functionCall() throws RecognitionException {
        XQueryParser.functionCall_return retval = new XQueryParser.functionCall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal537=null;
        Token char_literal539=null;
        Token char_literal541=null;
        XQueryParser.fqName_return fqn = null;

        XQueryParser.exprSingle_return exprSingle538 = null;

        XQueryParser.exprSingle_return exprSingle540 = null;


        Object char_literal537_tree=null;
        Object char_literal539_tree=null;
        Object char_literal541_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_fqName=new RewriteRuleSubtreeStream(adaptor,"rule fqName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1236:5: (fqn= fqName '(' ( exprSingle ( ',' exprSingle )* -> ( exprSingle )+ )? ')' -> ^( FunctionCall[$fqn.text] ( exprSingle )* ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1236:7: fqn= fqName '(' ( exprSingle ( ',' exprSingle )* -> ( exprSingle )+ )? ')'
            {
            pushFollow(FOLLOW_fqName_in_functionCall11026);
            fqn=fqName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fqName.add(fqn.getTree());
            char_literal537=(Token)match(input,408,FOLLOW_408_in_functionCall11028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal537);

            // org/brackit/xquery/compiler/parser/XQuery.g:1236:22: ( exprSingle ( ',' exprSingle )* -> ( exprSingle )+ )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LAngle||LA144_0==Pragma||(LA144_0>=XQUERY && LA144_0<=AposedStringLiteral)||(LA144_0>=DirCommentConstructor && LA144_0<=DirPIConstructor)||(LA144_0>=DOCUMENT && LA144_0<=WHILE)||(LA144_0>=NOT && LA144_0<=NCName)||LA144_0==408||LA144_0==411||(LA144_0>=413 && LA144_0<=415)||(LA144_0>=422 && LA144_0<=423)||(LA144_0>=425 && LA144_0<=426)||LA144_0==429) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1236:23: exprSingle ( ',' exprSingle )*
                    {
                    pushFollow(FOLLOW_exprSingle_in_functionCall11031);
                    exprSingle538=exprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle538.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1236:34: ( ',' exprSingle )*
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==409) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1236:35: ',' exprSingle
                    	    {
                    	    char_literal539=(Token)match(input,409,FOLLOW_409_in_functionCall11034); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_409.add(char_literal539);

                    	    pushFollow(FOLLOW_exprSingle_in_functionCall11036);
                    	    exprSingle540=exprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle540.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop143;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: exprSingle
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1236:52: -> ( exprSingle )+
                    {
                        if ( !(stream_exprSingle.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_exprSingle.hasNext() ) {
                            adaptor.addChild(root_0, stream_exprSingle.nextTree());

                        }
                        stream_exprSingle.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            char_literal541=(Token)match(input,410,FOLLOW_410_in_functionCall11047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal541);



            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1237:5: -> ^( FunctionCall[$fqn.text] ( exprSingle )* )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1237:8: ^( FunctionCall[$fqn.text] ( exprSingle )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FunctionCall, (fqn!=null?input.toString(fqn.start,fqn.stop):null)), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1237:34: ( exprSingle )*
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprSingle.nextTree());

                }
                stream_exprSingle.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionCall"

    public static class constructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1243:1: constructor : ( directConstructor | computedConstructor );
    public final XQueryParser.constructor_return constructor() throws RecognitionException {
        XQueryParser.constructor_return retval = new XQueryParser.constructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.directConstructor_return directConstructor542 = null;

        XQueryParser.computedConstructor_return computedConstructor543 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1244:5: ( directConstructor | computedConstructor )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==LAngle||(LA145_0>=DirCommentConstructor && LA145_0<=DirPIConstructor)) ) {
                alt145=1;
            }
            else if ( (LA145_0==ELEMENT||LA145_0==TEXT||LA145_0==ATTRIBUTE||(LA145_0>=DOCUMENT && LA145_0<=PROCESSING_INSTRUCTION)) ) {
                alt145=2;
            }
            else if ( (LA145_0==NAMESPACE) && ((xqVersion==XQUERY_3_0))) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1244:7: directConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_directConstructor_in_constructor11088);
                    directConstructor542=directConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directConstructor542.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1245:7: computedConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_computedConstructor_in_constructor11096);
                    computedConstructor543=computedConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, computedConstructor543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructor"

    public static class dirElemConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirElemConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1249:1: dirElemConstructor : LAngle tagName= qName (attrList= dirAttributeList )? ( S )* ( RClose | ( RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle ) ) -> ^( CompElementConstructor ^( Literal $tagName) ^( ContentSequence ( $attrList)? ( $elemContent)* ) ) ;
    public final XQueryParser.dirElemConstructor_return dirElemConstructor() throws RecognitionException {
        XQueryParser.dirElemConstructor_return retval = new XQueryParser.dirElemConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LAngle544=null;
        Token S545=null;
        Token RClose546=null;
        Token RAngle547=null;
        Token LClose548=null;
        Token S549=null;
        Token RAngle550=null;
        List list_elemContent=null;
        XQueryParser.qName_return tagName = null;

        XQueryParser.dirAttributeList_return attrList = null;

        XQueryParser.qName_return closeTag = null;

        RuleReturnScope elemContent = null;
        Object LAngle544_tree=null;
        Object S545_tree=null;
        Object RClose546_tree=null;
        Object RAngle547_tree=null;
        Object LClose548_tree=null;
        Object S549_tree=null;
        Object RAngle550_tree=null;
        RewriteRuleTokenStream stream_LAngle=new RewriteRuleTokenStream(adaptor,"token LAngle");
        RewriteRuleTokenStream stream_RAngle=new RewriteRuleTokenStream(adaptor,"token RAngle");
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleTokenStream stream_RClose=new RewriteRuleTokenStream(adaptor,"token RClose");
        RewriteRuleTokenStream stream_LClose=new RewriteRuleTokenStream(adaptor,"token LClose");
        RewriteRuleSubtreeStream stream_dirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule dirAttributeList");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_dirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule dirElemContent");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1250:1: ( LAngle tagName= qName (attrList= dirAttributeList )? ( S )* ( RClose | ( RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle ) ) -> ^( CompElementConstructor ^( Literal $tagName) ^( ContentSequence ( $attrList)? ( $elemContent)* ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1250:3: LAngle tagName= qName (attrList= dirAttributeList )? ( S )* ( RClose | ( RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle ) )
            {
            LAngle544=(Token)match(input,LAngle,FOLLOW_LAngle_in_dirElemConstructor11161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAngle.add(LAngle544);

            if ( state.backtracking==0 ) {
               enterDirXml (); 
            }
            pushFollow(FOLLOW_qName_in_dirElemConstructor11177);
            tagName=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qName.add(tagName.getTree());
            if ( state.backtracking==0 ) {
               pushElemName((tagName!=null?input.toString(tagName.start,tagName.stop):null)); 
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:1252:16: (attrList= dirAttributeList )?
            int alt146=2;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1252:16: attrList= dirAttributeList
                    {
                    pushFollow(FOLLOW_dirAttributeList_in_dirElemConstructor11192);
                    attrList=dirAttributeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dirAttributeList.add(attrList.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:1252:35: ( S )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==S) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1252:35: S
            	    {
            	    S545=(Token)match(input,S,FOLLOW_S_in_dirElemConstructor11195); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_S.add(S545);


            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            // org/brackit/xquery/compiler/parser/XQuery.g:1253:8: ( RClose | ( RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle ) )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==RClose) ) {
                alt150=1;
            }
            else if ( (LA150_0==RAngle) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1254:8: RClose
                    {
                    RClose546=(Token)match(input,RClose,FOLLOW_RClose_in_dirElemConstructor11214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RClose.add(RClose546);

                    if ( state.backtracking==0 ) {
                       popElemName (); 
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1255:12: ( RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1255:12: ( RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1256:10: RAngle (elemContent+= dirElemContent )* LClose closeTag= qName ( S )* RAngle
                    {
                    RAngle547=(Token)match(input,RAngle,FOLLOW_RAngle_in_dirElemConstructor11241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAngle.add(RAngle547);

                    // org/brackit/xquery/compiler/parser/XQuery.g:1257:21: (elemContent+= dirElemContent )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==LAngle||LA148_0==LCurly||LA148_0==EscapeLCurly||(LA148_0>=ElementContentChar && LA148_0<=PredefinedEntityRef)||(LA148_0>=DirCommentConstructor && LA148_0<=EscapeRCurly)) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1257:21: elemContent+= dirElemContent
                    	    {
                    	    pushFollow(FOLLOW_dirElemContent_in_dirElemConstructor11254);
                    	    elemContent=dirElemContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_dirElemContent.add(elemContent.getTree());
                    	    if (list_elemContent==null) list_elemContent=new ArrayList();
                    	    list_elemContent.add(elemContent.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);

                    LClose548=(Token)match(input,LClose,FOLLOW_LClose_in_dirElemConstructor11266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LClose.add(LClose548);

                    pushFollow(FOLLOW_qName_in_dirElemConstructor11279);
                    closeTag=qName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qName.add(closeTag.getTree());
                    if ( state.backtracking==0 ) {
                       matchElemName((closeTag!=null?input.toString(closeTag.start,closeTag.stop):null)); 
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1260:10: ( S )*
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==S) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1260:10: S
                    	    {
                    	    S549=(Token)match(input,S,FOLLOW_S_in_dirElemConstructor11292); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_S.add(S549);


                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);

                    RAngle550=(Token)match(input,RAngle,FOLLOW_RAngle_in_dirElemConstructor11304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAngle.add(RAngle550);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               leaveDirXml (); 
            }


            // AST REWRITE
            // elements: tagName, elemContent, attrList
            // token labels: 
            // rule labels: retval, tagName, attrList
            // token list labels: 
            // rule list labels: elemContent
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tagName=new RewriteRuleSubtreeStream(adaptor,"rule tagName",tagName!=null?tagName.tree:null);
            RewriteRuleSubtreeStream stream_attrList=new RewriteRuleSubtreeStream(adaptor,"rule attrList",attrList!=null?attrList.tree:null);
            RewriteRuleSubtreeStream stream_elemContent=new RewriteRuleSubtreeStream(adaptor,"token elemContent",list_elemContent);
            root_0 = (Object)adaptor.nil();
            // 1266:8: -> ^( CompElementConstructor ^( Literal $tagName) ^( ContentSequence ( $attrList)? ( $elemContent)* ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1266:12: ^( CompElementConstructor ^( Literal $tagName) ^( ContentSequence ( $attrList)? ( $elemContent)* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompElementConstructor, "CompElementConstructor"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1266:37: ^( Literal $tagName)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_tagName.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:1266:57: ^( ContentSequence ( $attrList)? ( $elemContent)* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ContentSequence, "ContentSequence"), root_2);

                // org/brackit/xquery/compiler/parser/XQuery.g:1266:75: ( $attrList)?
                if ( stream_attrList.hasNext() ) {
                    adaptor.addChild(root_2, stream_attrList.nextTree());

                }
                stream_attrList.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1266:86: ( $elemContent)*
                while ( stream_elemContent.hasNext() ) {
                    adaptor.addChild(root_2, stream_elemContent.nextTree());

                }
                stream_elemContent.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirElemConstructor"

    public static class directConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "directConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1268:1: directConstructor : ( dirElemConstructor | DirCommentConstructor -> ^( CompCommentConstructor ^( Literal Str[comment] ) ) | DirPIConstructor -> ^( CompPIConstructor ^( Literal Str[pi.getFirst()] ) ^( Literal Str[pi.getSecond()] ) ) );
    public final XQueryParser.directConstructor_return directConstructor() throws RecognitionException {
        XQueryParser.directConstructor_return retval = new XQueryParser.directConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DirCommentConstructor552=null;
        Token DirPIConstructor553=null;
        XQueryParser.dirElemConstructor_return dirElemConstructor551 = null;


        Object DirCommentConstructor552_tree=null;
        Object DirPIConstructor553_tree=null;
        RewriteRuleTokenStream stream_DirPIConstructor=new RewriteRuleTokenStream(adaptor,"token DirPIConstructor");
        RewriteRuleTokenStream stream_DirCommentConstructor=new RewriteRuleTokenStream(adaptor,"token DirCommentConstructor");


        String comment = null;
        Pair<String, String> pi = null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1273:5: ( dirElemConstructor | DirCommentConstructor -> ^( CompCommentConstructor ^( Literal Str[comment] ) ) | DirPIConstructor -> ^( CompPIConstructor ^( Literal Str[pi.getFirst()] ) ^( Literal Str[pi.getSecond()] ) ) )
            int alt151=3;
            switch ( input.LA(1) ) {
            case LAngle:
                {
                alt151=1;
                }
                break;
            case DirCommentConstructor:
                {
                alt151=2;
                }
                break;
            case DirPIConstructor:
                {
                alt151=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1274:6: dirElemConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dirElemConstructor_in_directConstructor11400);
                    dirElemConstructor551=dirElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dirElemConstructor551.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1275:8: DirCommentConstructor
                    {
                    if ( state.backtracking==0 ) {
                       comment=parseDirComment(); 
                    }
                    DirCommentConstructor552=(Token)match(input,DirCommentConstructor,FOLLOW_DirCommentConstructor_in_directConstructor11411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DirCommentConstructor.add(DirCommentConstructor552);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1275:61: -> ^( CompCommentConstructor ^( Literal Str[comment] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1275:64: ^( CompCommentConstructor ^( Literal Str[comment] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompCommentConstructor, "CompCommentConstructor"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:1275:89: ^( Literal Str[comment] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, comment));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1276:8: DirPIConstructor
                    {
                    if ( state.backtracking==0 ) {
                       pi=parseDirPI(); 
                    }
                    DirPIConstructor553=(Token)match(input,DirPIConstructor,FOLLOW_DirPIConstructor_in_directConstructor11434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DirPIConstructor.add(DirPIConstructor553);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1276:45: -> ^( CompPIConstructor ^( Literal Str[pi.getFirst()] ) ^( Literal Str[pi.getSecond()] ) )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1276:48: ^( CompPIConstructor ^( Literal Str[pi.getFirst()] ) ^( Literal Str[pi.getSecond()] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompPIConstructor, "CompPIConstructor"), root_1);

                        // org/brackit/xquery/compiler/parser/XQuery.g:1276:68: ^( Literal Str[pi.getFirst()] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, pi.getFirst()));

                        adaptor.addChild(root_1, root_2);
                        }
                        // org/brackit/xquery/compiler/parser/XQuery.g:1276:98: ^( Literal Str[pi.getSecond()] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(Str, pi.getSecond()));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "directConstructor"

    public static class dirAttributeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirAttributeList"
    // org/brackit/xquery/compiler/parser/XQuery.g:1281:1: dirAttributeList : ( ( S )+ dirAttribute )+ -> ( dirAttribute )+ ;
    public final XQueryParser.dirAttributeList_return dirAttributeList() throws RecognitionException {
        XQueryParser.dirAttributeList_return retval = new XQueryParser.dirAttributeList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token S554=null;
        XQueryParser.dirAttribute_return dirAttribute555 = null;


        Object S554_tree=null;
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleSubtreeStream stream_dirAttribute=new RewriteRuleSubtreeStream(adaptor,"rule dirAttribute");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1282:1: ( ( ( S )+ dirAttribute )+ -> ( dirAttribute )+ )
            // org/brackit/xquery/compiler/parser/XQuery.g:1282:3: ( ( S )+ dirAttribute )+
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:1282:3: ( ( S )+ dirAttribute )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1282:4: ( S )+ dirAttribute
            	    {
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1282:4: ( S )+
            	    int cnt152=0;
            	    loop152:
            	    do {
            	        int alt152=2;
            	        int LA152_0 = input.LA(1);

            	        if ( (LA152_0==S) ) {
            	            alt152=1;
            	        }


            	        switch (alt152) {
            	    	case 1 :
            	    	    // org/brackit/xquery/compiler/parser/XQuery.g:1282:4: S
            	    	    {
            	    	    S554=(Token)match(input,S,FOLLOW_S_in_dirAttributeList11474); if (state.failed) return retval; 
            	    	    if ( state.backtracking==0 ) stream_S.add(S554);


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt152 >= 1 ) break loop152;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(152, input);
            	                throw eee;
            	        }
            	        cnt152++;
            	    } while (true);

            	    pushFollow(FOLLOW_dirAttribute_in_dirAttributeList11477);
            	    dirAttribute555=dirAttribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dirAttribute.add(dirAttribute555.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);



            // AST REWRITE
            // elements: dirAttribute
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1283:1: -> ( dirAttribute )+
            {
                if ( !(stream_dirAttribute.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dirAttribute.hasNext() ) {
                    adaptor.addChild(root_0, stream_dirAttribute.nextTree());

                }
                stream_dirAttribute.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirAttributeList"

    public static class dirAttribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirAttribute"
    // org/brackit/xquery/compiler/parser/XQuery.g:1285:1: dirAttribute : name= qName ( S )* SymEq ( S )* value= dirAttributeValue -> ^( CompAttributeConstructor ^( Literal qName ) ^( ContentSequence ( $value)? ) ) ;
    public final XQueryParser.dirAttribute_return dirAttribute() throws RecognitionException {
        XQueryParser.dirAttribute_return retval = new XQueryParser.dirAttribute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token S556=null;
        Token SymEq557=null;
        Token S558=null;
        XQueryParser.qName_return name = null;

        XQueryParser.dirAttributeValue_return value = null;


        Object S556_tree=null;
        Object SymEq557_tree=null;
        Object S558_tree=null;
        RewriteRuleTokenStream stream_SymEq=new RewriteRuleTokenStream(adaptor,"token SymEq");
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_dirAttributeValue=new RewriteRuleSubtreeStream(adaptor,"rule dirAttributeValue");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1286:1: (name= qName ( S )* SymEq ( S )* value= dirAttributeValue -> ^( CompAttributeConstructor ^( Literal qName ) ^( ContentSequence ( $value)? ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1286:3: name= qName ( S )* SymEq ( S )* value= dirAttributeValue
            {
            pushFollow(FOLLOW_qName_in_dirAttribute11494);
            name=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qName.add(name.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1286:14: ( S )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==S) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1286:14: S
            	    {
            	    S556=(Token)match(input,S,FOLLOW_S_in_dirAttribute11496); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_S.add(S556);


            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);

            SymEq557=(Token)match(input,SymEq,FOLLOW_SymEq_in_dirAttribute11499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SymEq.add(SymEq557);

            // org/brackit/xquery/compiler/parser/XQuery.g:1286:23: ( S )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==S) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1286:23: S
            	    {
            	    S558=(Token)match(input,S,FOLLOW_S_in_dirAttribute11501); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_S.add(S558);


            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);

            pushFollow(FOLLOW_dirAttributeValue_in_dirAttribute11506);
            value=dirAttributeValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dirAttributeValue.add(value.getTree());


            // AST REWRITE
            // elements: qName, value
            // token labels: 
            // rule labels: retval, value
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value",value!=null?value.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1287:1: -> ^( CompAttributeConstructor ^( Literal qName ) ^( ContentSequence ( $value)? ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1287:4: ^( CompAttributeConstructor ^( Literal qName ) ^( ContentSequence ( $value)? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompAttributeConstructor, "CompAttributeConstructor"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1287:31: ^( Literal qName )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_2);

                adaptor.addChild(root_2, stream_qName.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:1287:48: ^( ContentSequence ( $value)? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ContentSequence, "ContentSequence"), root_2);

                // org/brackit/xquery/compiler/parser/XQuery.g:1287:66: ( $value)?
                if ( stream_value.hasNext() ) {
                    adaptor.addChild(root_2, stream_value.nextTree());

                }
                stream_value.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirAttribute"

    public static class dirAttributeValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirAttributeValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:1290:1: dirAttributeValue : ( Quot ( quotAttrValue )* Quot -> ( quotAttrValue )* | Apos ( aposAttrValue )* Apos -> ( aposAttrValue )* );
    public final XQueryParser.dirAttributeValue_return dirAttributeValue() throws RecognitionException {
        XQueryParser.dirAttributeValue_return retval = new XQueryParser.dirAttributeValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token Quot559=null;
        Token Quot561=null;
        Token Apos562=null;
        Token Apos564=null;
        XQueryParser.quotAttrValue_return quotAttrValue560 = null;

        XQueryParser.aposAttrValue_return aposAttrValue563 = null;


        Object Quot559_tree=null;
        Object Quot561_tree=null;
        Object Apos562_tree=null;
        Object Apos564_tree=null;
        RewriteRuleTokenStream stream_Apos=new RewriteRuleTokenStream(adaptor,"token Apos");
        RewriteRuleTokenStream stream_Quot=new RewriteRuleTokenStream(adaptor,"token Quot");
        RewriteRuleSubtreeStream stream_quotAttrValue=new RewriteRuleSubtreeStream(adaptor,"rule quotAttrValue");
        RewriteRuleSubtreeStream stream_aposAttrValue=new RewriteRuleSubtreeStream(adaptor,"rule aposAttrValue");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1291:5: ( Quot ( quotAttrValue )* Quot -> ( quotAttrValue )* | Apos ( aposAttrValue )* Apos -> ( aposAttrValue )* )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==Quot) ) {
                alt158=1;
            }
            else if ( (LA158_0==Apos) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1291:7: Quot ( quotAttrValue )* Quot
                    {
                    Quot559=(Token)match(input,Quot,FOLLOW_Quot_in_dirAttributeValue11591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Quot.add(Quot559);

                    // org/brackit/xquery/compiler/parser/XQuery.g:1291:12: ( quotAttrValue )*
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==LCurly||LA156_0==EscapeQuot||LA156_0==EscapeLCurly||(LA156_0>=PredefinedEntityRef && LA156_0<=QuotAttrContentChar)||(LA156_0>=CharRef && LA156_0<=EscapeRCurly)) ) {
                            alt156=1;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1291:12: quotAttrValue
                    	    {
                    	    pushFollow(FOLLOW_quotAttrValue_in_dirAttributeValue11593);
                    	    quotAttrValue560=quotAttrValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_quotAttrValue.add(quotAttrValue560.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    Quot561=(Token)match(input,Quot,FOLLOW_Quot_in_dirAttributeValue11596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Quot.add(Quot561);



                    // AST REWRITE
                    // elements: quotAttrValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1291:32: -> ( quotAttrValue )*
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1291:35: ( quotAttrValue )*
                        while ( stream_quotAttrValue.hasNext() ) {
                            adaptor.addChild(root_0, stream_quotAttrValue.nextTree());

                        }
                        stream_quotAttrValue.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1292:7: Apos ( aposAttrValue )* Apos
                    {
                    Apos562=(Token)match(input,Apos,FOLLOW_Apos_in_dirAttributeValue11609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Apos.add(Apos562);

                    // org/brackit/xquery/compiler/parser/XQuery.g:1292:12: ( aposAttrValue )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==LCurly||(LA157_0>=EscapeApos && LA157_0<=EscapeLCurly)||LA157_0==PredefinedEntityRef||LA157_0==AposAttrContentChar||(LA157_0>=CharRef && LA157_0<=EscapeRCurly)) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1292:12: aposAttrValue
                    	    {
                    	    pushFollow(FOLLOW_aposAttrValue_in_dirAttributeValue11611);
                    	    aposAttrValue563=aposAttrValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_aposAttrValue.add(aposAttrValue563.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);

                    Apos564=(Token)match(input,Apos,FOLLOW_Apos_in_dirAttributeValue11614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Apos.add(Apos564);



                    // AST REWRITE
                    // elements: aposAttrValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1292:32: -> ( aposAttrValue )*
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1292:35: ( aposAttrValue )*
                        while ( stream_aposAttrValue.hasNext() ) {
                            adaptor.addChild(root_0, stream_aposAttrValue.nextTree());

                        }
                        stream_aposAttrValue.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirAttributeValue"

    public static class quotAttrValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quotAttrValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:1295:1: quotAttrValue : (c= EscapeQuot -> ^( Literal Str[$c, $c.getText()] ) | quotAttrValueContent -> quotAttrValueContent );
    public final XQueryParser.quotAttrValue_return quotAttrValue() throws RecognitionException {
        XQueryParser.quotAttrValue_return retval = new XQueryParser.quotAttrValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token c=null;
        XQueryParser.quotAttrValueContent_return quotAttrValueContent565 = null;


        Object c_tree=null;
        RewriteRuleTokenStream stream_EscapeQuot=new RewriteRuleTokenStream(adaptor,"token EscapeQuot");
        RewriteRuleSubtreeStream stream_quotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule quotAttrValueContent");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1296:5: (c= EscapeQuot -> ^( Literal Str[$c, $c.getText()] ) | quotAttrValueContent -> quotAttrValueContent )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EscapeQuot) ) {
                alt159=1;
            }
            else if ( (LA159_0==LCurly||LA159_0==EscapeLCurly||(LA159_0>=PredefinedEntityRef && LA159_0<=QuotAttrContentChar)||(LA159_0>=CharRef && LA159_0<=EscapeRCurly)) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1297:5: c= EscapeQuot
                    {
                    c=(Token)match(input,EscapeQuot,FOLLOW_EscapeQuot_in_quotAttrValue11650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EscapeQuot.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1297:18: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1297:21: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1298:7: quotAttrValueContent
                    {
                    pushFollow(FOLLOW_quotAttrValueContent_in_quotAttrValue11667);
                    quotAttrValueContent565=quotAttrValueContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quotAttrValueContent.add(quotAttrValueContent565.getTree());


                    // AST REWRITE
                    // elements: quotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1298:28: -> quotAttrValueContent
                    {
                        adaptor.addChild(root_0, stream_quotAttrValueContent.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quotAttrValue"

    public static class aposAttrValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aposAttrValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:1301:1: aposAttrValue : (c= EscapeApos -> ^( Literal Str[$c, $c.getText()] ) | aposAttrValueContent -> aposAttrValueContent );
    public final XQueryParser.aposAttrValue_return aposAttrValue() throws RecognitionException {
        XQueryParser.aposAttrValue_return retval = new XQueryParser.aposAttrValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token c=null;
        XQueryParser.aposAttrValueContent_return aposAttrValueContent566 = null;


        Object c_tree=null;
        RewriteRuleTokenStream stream_EscapeApos=new RewriteRuleTokenStream(adaptor,"token EscapeApos");
        RewriteRuleSubtreeStream stream_aposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule aposAttrValueContent");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1302:5: (c= EscapeApos -> ^( Literal Str[$c, $c.getText()] ) | aposAttrValueContent -> aposAttrValueContent )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==EscapeApos) ) {
                alt160=1;
            }
            else if ( (LA160_0==LCurly||LA160_0==EscapeLCurly||LA160_0==PredefinedEntityRef||LA160_0==AposAttrContentChar||(LA160_0>=CharRef && LA160_0<=EscapeRCurly)) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1303:5: c= EscapeApos
                    {
                    c=(Token)match(input,EscapeApos,FOLLOW_EscapeApos_in_aposAttrValue11698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EscapeApos.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1303:18: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1303:21: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1304:7: aposAttrValueContent
                    {
                    pushFollow(FOLLOW_aposAttrValueContent_in_aposAttrValue11715);
                    aposAttrValueContent566=aposAttrValueContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aposAttrValueContent.add(aposAttrValueContent566.getTree());


                    // AST REWRITE
                    // elements: aposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1304:28: -> aposAttrValueContent
                    {
                        adaptor.addChild(root_0, stream_aposAttrValueContent.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aposAttrValue"

    public static class quotAttrValueContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quotAttrValueContent"
    // org/brackit/xquery/compiler/parser/XQuery.g:1307:1: quotAttrValueContent : (c= QuotAttrContentChar -> ^( Literal Str[$c, $c.getText()] ) | commonContent );
    public final XQueryParser.quotAttrValueContent_return quotAttrValueContent() throws RecognitionException {
        XQueryParser.quotAttrValueContent_return retval = new XQueryParser.quotAttrValueContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token c=null;
        XQueryParser.commonContent_return commonContent567 = null;


        Object c_tree=null;
        RewriteRuleTokenStream stream_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token QuotAttrContentChar");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1308:5: (c= QuotAttrContentChar -> ^( Literal Str[$c, $c.getText()] ) | commonContent )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==QuotAttrContentChar) ) {
                alt161=1;
            }
            else if ( (LA161_0==LCurly||LA161_0==EscapeLCurly||LA161_0==PredefinedEntityRef||(LA161_0>=CharRef && LA161_0<=EscapeRCurly)) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1308:7: c= QuotAttrContentChar
                    {
                    c=(Token)match(input,QuotAttrContentChar,FOLLOW_QuotAttrContentChar_in_quotAttrValueContent11742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QuotAttrContentChar.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1308:28: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1308:31: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1309:7: commonContent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commonContent_in_quotAttrValueContent11758);
                    commonContent567=commonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commonContent567.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quotAttrValueContent"

    public static class aposAttrValueContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aposAttrValueContent"
    // org/brackit/xquery/compiler/parser/XQuery.g:1312:1: aposAttrValueContent : (c= AposAttrContentChar -> ^( Literal Str[$c, $c.getText()] ) | commonContent );
    public final XQueryParser.aposAttrValueContent_return aposAttrValueContent() throws RecognitionException {
        XQueryParser.aposAttrValueContent_return retval = new XQueryParser.aposAttrValueContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token c=null;
        XQueryParser.commonContent_return commonContent568 = null;


        Object c_tree=null;
        RewriteRuleTokenStream stream_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token AposAttrContentChar");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1313:5: (c= AposAttrContentChar -> ^( Literal Str[$c, $c.getText()] ) | commonContent )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==AposAttrContentChar) ) {
                alt162=1;
            }
            else if ( (LA162_0==LCurly||LA162_0==EscapeLCurly||LA162_0==PredefinedEntityRef||(LA162_0>=CharRef && LA162_0<=EscapeRCurly)) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1313:7: c= AposAttrContentChar
                    {
                    c=(Token)match(input,AposAttrContentChar,FOLLOW_AposAttrContentChar_in_aposAttrValueContent11781); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AposAttrContentChar.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1313:28: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1313:31: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1314:7: commonContent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commonContent_in_aposAttrValueContent11797);
                    commonContent568=commonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commonContent568.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aposAttrValueContent"

    public static class dirElemContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirElemContent"
    // org/brackit/xquery/compiler/parser/XQuery.g:1317:1: dirElemContent : dirElemContentSingle -> dirElemContentSingle ;
    public final XQueryParser.dirElemContent_return dirElemContent() throws RecognitionException {
        XQueryParser.dirElemContent_return retval = new XQueryParser.dirElemContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.dirElemContentSingle_return dirElemContentSingle569 = null;


        RewriteRuleSubtreeStream stream_dirElemContentSingle=new RewriteRuleSubtreeStream(adaptor,"rule dirElemContentSingle");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1318:2: ( dirElemContentSingle -> dirElemContentSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:1318:4: dirElemContentSingle
            {
            pushFollow(FOLLOW_dirElemContentSingle_in_dirElemContent11817);
            dirElemContentSingle569=dirElemContentSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dirElemContentSingle.add(dirElemContentSingle569.getTree());


            // AST REWRITE
            // elements: dirElemContentSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1318:25: -> dirElemContentSingle
            {
                adaptor.addChild(root_0, stream_dirElemContentSingle.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirElemContent"

    public static class dirElemContentSingle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirElemContentSingle"
    // org/brackit/xquery/compiler/parser/XQuery.g:1321:1: dirElemContentSingle : ( directConstructor | CDataSection -> ^( Literal Str[cdata] ) | commonContent | c= ElementContentChar -> ^( Literal Str[$c, $c.getText()] ) );
    public final XQueryParser.dirElemContentSingle_return dirElemContentSingle() throws RecognitionException {
        XQueryParser.dirElemContentSingle_return retval = new XQueryParser.dirElemContentSingle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token c=null;
        Token CDataSection571=null;
        XQueryParser.directConstructor_return directConstructor570 = null;

        XQueryParser.commonContent_return commonContent572 = null;


        Object c_tree=null;
        Object CDataSection571_tree=null;
        RewriteRuleTokenStream stream_ElementContentChar=new RewriteRuleTokenStream(adaptor,"token ElementContentChar");
        RewriteRuleTokenStream stream_CDataSection=new RewriteRuleTokenStream(adaptor,"token CDataSection");


        String cdata = null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1325:5: ( directConstructor | CDataSection -> ^( Literal Str[cdata] ) | commonContent | c= ElementContentChar -> ^( Literal Str[$c, $c.getText()] ) )
            int alt163=4;
            switch ( input.LA(1) ) {
            case LAngle:
            case DirCommentConstructor:
            case DirPIConstructor:
                {
                alt163=1;
                }
                break;
            case CDataSection:
                {
                alt163=2;
                }
                break;
            case LCurly:
            case EscapeLCurly:
            case PredefinedEntityRef:
            case CharRef:
            case EscapeRCurly:
                {
                alt163=3;
                }
                break;
            case ElementContentChar:
                {
                alt163=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1325:7: directConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_directConstructor_in_dirElemContentSingle11847);
                    directConstructor570=directConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directConstructor570.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1326:7: CDataSection
                    {
                    if ( state.backtracking==0 ) {
                       cdata = parseCData(); 
                    }
                    CDataSection571=(Token)match(input,CDataSection,FOLLOW_CDataSection_in_dirElemContentSingle11857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CDataSection.add(CDataSection571);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1326:46: -> ^( Literal Str[cdata] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1326:49: ^( Literal Str[cdata] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, cdata));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1327:4: commonContent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commonContent_in_dirElemContentSingle11871);
                    commonContent572=commonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commonContent572.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1328:4: c= ElementContentChar
                    {
                    c=(Token)match(input,ElementContentChar,FOLLOW_ElementContentChar_in_dirElemContentSingle11878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ElementContentChar.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1328:25: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1328:28: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirElemContentSingle"

    public static class commonContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commonContent"
    // org/brackit/xquery/compiler/parser/XQuery.g:1331:1: commonContent : (c= PredefinedEntityRef -> ^( Literal Str[$c, $c.getText()] ) | c= CharRef -> ^( Literal Str[$c, $c.getText()] ) | c= EscapeLCurly -> ^( Literal Str[$c, $c.getText()] ) | c= EscapeRCurly -> ^( Literal Str[$c, $c.getText()] ) | dirEnclosedExpr );
    public final XQueryParser.commonContent_return commonContent() throws RecognitionException {
        XQueryParser.commonContent_return retval = new XQueryParser.commonContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token c=null;
        XQueryParser.dirEnclosedExpr_return dirEnclosedExpr573 = null;


        Object c_tree=null;
        RewriteRuleTokenStream stream_CharRef=new RewriteRuleTokenStream(adaptor,"token CharRef");
        RewriteRuleTokenStream stream_EscapeRCurly=new RewriteRuleTokenStream(adaptor,"token EscapeRCurly");
        RewriteRuleTokenStream stream_EscapeLCurly=new RewriteRuleTokenStream(adaptor,"token EscapeLCurly");
        RewriteRuleTokenStream stream_PredefinedEntityRef=new RewriteRuleTokenStream(adaptor,"token PredefinedEntityRef");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1332:5: (c= PredefinedEntityRef -> ^( Literal Str[$c, $c.getText()] ) | c= CharRef -> ^( Literal Str[$c, $c.getText()] ) | c= EscapeLCurly -> ^( Literal Str[$c, $c.getText()] ) | c= EscapeRCurly -> ^( Literal Str[$c, $c.getText()] ) | dirEnclosedExpr )
            int alt164=5;
            switch ( input.LA(1) ) {
            case PredefinedEntityRef:
                {
                alt164=1;
                }
                break;
            case CharRef:
                {
                alt164=2;
                }
                break;
            case EscapeLCurly:
                {
                alt164=3;
                }
                break;
            case EscapeRCurly:
                {
                alt164=4;
                }
                break;
            case LCurly:
                {
                alt164=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1332:7: c= PredefinedEntityRef
                    {
                    c=(Token)match(input,PredefinedEntityRef,FOLLOW_PredefinedEntityRef_in_commonContent11909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PredefinedEntityRef.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1332:29: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1332:32: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1333:7: c= CharRef
                    {
                    c=(Token)match(input,CharRef,FOLLOW_CharRef_in_commonContent11928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharRef.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1333:20: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1333:23: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1334:7: c= EscapeLCurly
                    {
                    c=(Token)match(input,EscapeLCurly,FOLLOW_EscapeLCurly_in_commonContent11950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EscapeLCurly.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1334:23: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1334:26: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1335:7: c= EscapeRCurly
                    {
                    c=(Token)match(input,EscapeRCurly,FOLLOW_EscapeRCurly_in_commonContent11970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EscapeRCurly.add(c);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1335:23: -> ^( Literal Str[$c, $c.getText()] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1335:26: ^( Literal Str[$c, $c.getText()] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, c, c.getText()));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1336:7: dirEnclosedExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dirEnclosedExpr_in_commonContent11988);
                    dirEnclosedExpr573=dirEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dirEnclosedExpr573.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "commonContent"

    public static class dirEnclosedExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dirEnclosedExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1339:1: dirEnclosedExpr : LCurly expr RCurly -> expr ;
    public final XQueryParser.dirEnclosedExpr_return dirEnclosedExpr() throws RecognitionException {
        XQueryParser.dirEnclosedExpr_return retval = new XQueryParser.dirEnclosedExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LCurly574=null;
        Token RCurly576=null;
        XQueryParser.expr_return expr575 = null;


        Object LCurly574_tree=null;
        Object RCurly576_tree=null;
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1340:5: ( LCurly expr RCurly -> expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1340:7: LCurly expr RCurly
            {
            LCurly574=(Token)match(input,LCurly,FOLLOW_LCurly_in_dirEnclosedExpr12009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly574);

            if ( state.backtracking==0 ) {
               enterXQuery(); 
            }
            pushFollow(FOLLOW_expr_in_dirEnclosedExpr12013);
            expr575=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr575.getTree());
            if ( state.backtracking==0 ) {
               leaveXQuery(); 
            }
            RCurly576=(Token)match(input,RCurly,FOLLOW_RCurly_in_dirEnclosedExpr12017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly576);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1341:5: -> expr
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirEnclosedExpr"

    public static class computedConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "computedConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1355:1: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor | {...}? => compNamespaceConstructor );
    public final XQueryParser.computedConstructor_return computedConstructor() throws RecognitionException {
        XQueryParser.computedConstructor_return retval = new XQueryParser.computedConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.compDocConstructor_return compDocConstructor577 = null;

        XQueryParser.compElemConstructor_return compElemConstructor578 = null;

        XQueryParser.compAttrConstructor_return compAttrConstructor579 = null;

        XQueryParser.compTextConstructor_return compTextConstructor580 = null;

        XQueryParser.compCommentConstructor_return compCommentConstructor581 = null;

        XQueryParser.compPIConstructor_return compPIConstructor582 = null;

        XQueryParser.compNamespaceConstructor_return compNamespaceConstructor583 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1356:5: ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor | {...}? => compNamespaceConstructor )
            int alt165=7;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==DOCUMENT) ) {
                alt165=1;
            }
            else if ( (LA165_0==ELEMENT) ) {
                alt165=2;
            }
            else if ( (LA165_0==ATTRIBUTE) ) {
                alt165=3;
            }
            else if ( (LA165_0==TEXT) ) {
                alt165=4;
            }
            else if ( (LA165_0==COMMENT) ) {
                alt165=5;
            }
            else if ( (LA165_0==PROCESSING_INSTRUCTION) ) {
                alt165=6;
            }
            else if ( (LA165_0==NAMESPACE) && ((xqVersion==XQUERY_3_0))) {
                alt165=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1356:7: compDocConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compDocConstructor_in_computedConstructor12057);
                    compDocConstructor577=compDocConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compDocConstructor577.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1357:7: compElemConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compElemConstructor_in_computedConstructor12065);
                    compElemConstructor578=compElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compElemConstructor578.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1358:7: compAttrConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compAttrConstructor_in_computedConstructor12073);
                    compAttrConstructor579=compAttrConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compAttrConstructor579.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1359:7: compTextConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compTextConstructor_in_computedConstructor12081);
                    compTextConstructor580=compTextConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compTextConstructor580.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1360:7: compCommentConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compCommentConstructor_in_computedConstructor12089);
                    compCommentConstructor581=compCommentConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compCommentConstructor581.getTree());

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1361:7: compPIConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compPIConstructor_in_computedConstructor12097);
                    compPIConstructor582=compPIConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compPIConstructor582.getTree());

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1362:7: {...}? => compNamespaceConstructor
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "computedConstructor", "xqVersion==XQUERY_3_0");
                    }
                    pushFollow(FOLLOW_compNamespaceConstructor_in_computedConstructor12109);
                    compNamespaceConstructor583=compNamespaceConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compNamespaceConstructor583.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "computedConstructor"

    public static class compDocConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compDocConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1365:1: compDocConstructor : DOCUMENT LCurly expr RCurly -> ^( CompDocumentConstructor ^( ContentSequence expr ) ) ;
    public final XQueryParser.compDocConstructor_return compDocConstructor() throws RecognitionException {
        XQueryParser.compDocConstructor_return retval = new XQueryParser.compDocConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOCUMENT584=null;
        Token LCurly585=null;
        Token RCurly587=null;
        XQueryParser.expr_return expr586 = null;


        Object DOCUMENT584_tree=null;
        Object LCurly585_tree=null;
        Object RCurly587_tree=null;
        RewriteRuleTokenStream stream_DOCUMENT=new RewriteRuleTokenStream(adaptor,"token DOCUMENT");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1366:5: ( DOCUMENT LCurly expr RCurly -> ^( CompDocumentConstructor ^( ContentSequence expr ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1366:7: DOCUMENT LCurly expr RCurly
            {
            DOCUMENT584=(Token)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_compDocConstructor12138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOCUMENT.add(DOCUMENT584);

            LCurly585=(Token)match(input,LCurly,FOLLOW_LCurly_in_compDocConstructor12140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly585);

            pushFollow(FOLLOW_expr_in_compDocConstructor12142);
            expr586=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr586.getTree());
            RCurly587=(Token)match(input,RCurly,FOLLOW_RCurly_in_compDocConstructor12144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly587);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1367:5: -> ^( CompDocumentConstructor ^( ContentSequence expr ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1367:8: ^( CompDocumentConstructor ^( ContentSequence expr ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompDocumentConstructor, "CompDocumentConstructor"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1367:34: ^( ContentSequence expr )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ContentSequence, "ContentSequence"), root_2);

                adaptor.addChild(root_2, stream_expr.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compDocConstructor"

    public static class compElemConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compElemConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1370:1: compElemConstructor : ELEMENT (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr ) LCurly ( contentExpr )? RCurly -> ^( CompElementConstructor $compElemConstructor ^( ContentSequence ( contentExpr )? ) ) ;
    public final XQueryParser.compElemConstructor_return compElemConstructor() throws RecognitionException {
        XQueryParser.compElemConstructor_return retval = new XQueryParser.compElemConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ELEMENT588=null;
        Token LCurly589=null;
        Token RCurly591=null;
        Token LCurly592=null;
        Token RCurly594=null;
        XQueryParser.qName_return tag = null;

        XQueryParser.expr_return expr590 = null;

        XQueryParser.contentExpr_return contentExpr593 = null;


        Object ELEMENT588_tree=null;
        Object LCurly589_tree=null;
        Object RCurly591_tree=null;
        Object LCurly592_tree=null;
        Object RCurly594_tree=null;
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_contentExpr=new RewriteRuleSubtreeStream(adaptor,"rule contentExpr");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1371:5: ( ELEMENT (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr ) LCurly ( contentExpr )? RCurly -> ^( CompElementConstructor $compElemConstructor ^( ContentSequence ( contentExpr )? ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1371:7: ELEMENT (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr ) LCurly ( contentExpr )? RCurly
            {
            ELEMENT588=(Token)match(input,ELEMENT,FOLLOW_ELEMENT_in_compElemConstructor12181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELEMENT.add(ELEMENT588);

            // org/brackit/xquery/compiler/parser/XQuery.g:1372:6: (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( ((LA166_0>=XQUERY && LA166_0<=ANCESTOR_OR_SELF)||(LA166_0>=DOCUMENT && LA166_0<=ITEM)||(LA166_0>=DOCUMENT_NODE && LA166_0<=WHILE)||(LA166_0>=NOT && LA166_0<=NCName)) ) {
                alt166=1;
            }
            else if ( (LA166_0==LCurly) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1373:7: tag= qName
                    {
                    pushFollow(FOLLOW_qName_in_compElemConstructor12198);
                    tag=qName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qName.add(tag.getTree());


                    // AST REWRITE
                    // elements: tag
                    // token labels: 
                    // rule labels: retval, tag
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tag=new RewriteRuleSubtreeStream(adaptor,"rule tag",tag!=null?tag.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1373:17: -> ^( Literal $tag)
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1373:20: ^( Literal $tag)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, stream_tag.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1374:9: ( LCurly expr RCurly )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1374:9: ( LCurly expr RCurly )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1374:10: LCurly expr RCurly
                    {
                    LCurly589=(Token)match(input,LCurly,FOLLOW_LCurly_in_compElemConstructor12218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCurly.add(LCurly589);

                    pushFollow(FOLLOW_expr_in_compElemConstructor12220);
                    expr590=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr590.getTree());
                    RCurly591=(Token)match(input,RCurly,FOLLOW_RCurly_in_compElemConstructor12222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCurly.add(RCurly591);


                    }



                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1374:31: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            LCurly592=(Token)match(input,LCurly,FOLLOW_LCurly_in_compElemConstructor12242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly592);

            // org/brackit/xquery/compiler/parser/XQuery.g:1376:13: ( contentExpr )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==LAngle||LA167_0==Pragma||(LA167_0>=XQUERY && LA167_0<=AposedStringLiteral)||(LA167_0>=DirCommentConstructor && LA167_0<=DirPIConstructor)||(LA167_0>=DOCUMENT && LA167_0<=WHILE)||(LA167_0>=NOT && LA167_0<=NCName)||LA167_0==408||LA167_0==411||(LA167_0>=413 && LA167_0<=415)||(LA167_0>=422 && LA167_0<=423)||(LA167_0>=425 && LA167_0<=426)||LA167_0==429) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1376:13: contentExpr
                    {
                    pushFollow(FOLLOW_contentExpr_in_compElemConstructor12244);
                    contentExpr593=contentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contentExpr.add(contentExpr593.getTree());

                    }
                    break;

            }

            RCurly594=(Token)match(input,RCurly,FOLLOW_RCurly_in_compElemConstructor12247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly594);



            // AST REWRITE
            // elements: contentExpr, compElemConstructor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1377:5: -> ^( CompElementConstructor $compElemConstructor ^( ContentSequence ( contentExpr )? ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1377:9: ^( CompElementConstructor $compElemConstructor ^( ContentSequence ( contentExpr )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompElementConstructor, "CompElementConstructor"), root_1);

                adaptor.addChild(root_1, stream_retval.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1377:55: ^( ContentSequence ( contentExpr )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ContentSequence, "ContentSequence"), root_2);

                // org/brackit/xquery/compiler/parser/XQuery.g:1377:73: ( contentExpr )?
                if ( stream_contentExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_contentExpr.nextTree());

                }
                stream_contentExpr.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compElemConstructor"

    public static class contentExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "contentExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1380:1: contentExpr : expr -> expr ;
    public final XQueryParser.contentExpr_return contentExpr() throws RecognitionException {
        XQueryParser.contentExpr_return retval = new XQueryParser.contentExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.expr_return expr595 = null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1381:5: ( expr -> expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1381:9: expr
            {
            pushFollow(FOLLOW_expr_in_contentExpr12291);
            expr595=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr595.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1381:14: -> expr
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "contentExpr"

    public static class compAttrConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compAttrConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1384:1: compAttrConstructor : ATTRIBUTE (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr ) LCurly ( contentExpr )? RCurly -> ^( CompAttributeConstructor $compAttrConstructor ^( ContentSequence ( contentExpr )? ) ) ;
    public final XQueryParser.compAttrConstructor_return compAttrConstructor() throws RecognitionException {
        XQueryParser.compAttrConstructor_return retval = new XQueryParser.compAttrConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ATTRIBUTE596=null;
        Token LCurly597=null;
        Token RCurly599=null;
        Token LCurly600=null;
        Token RCurly602=null;
        XQueryParser.qName_return tag = null;

        XQueryParser.expr_return expr598 = null;

        XQueryParser.contentExpr_return contentExpr601 = null;


        Object ATTRIBUTE596_tree=null;
        Object LCurly597_tree=null;
        Object RCurly599_tree=null;
        Object LCurly600_tree=null;
        Object RCurly602_tree=null;
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleTokenStream stream_ATTRIBUTE=new RewriteRuleTokenStream(adaptor,"token ATTRIBUTE");
        RewriteRuleSubtreeStream stream_contentExpr=new RewriteRuleSubtreeStream(adaptor,"rule contentExpr");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1385:5: ( ATTRIBUTE (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr ) LCurly ( contentExpr )? RCurly -> ^( CompAttributeConstructor $compAttrConstructor ^( ContentSequence ( contentExpr )? ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1385:7: ATTRIBUTE (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr ) LCurly ( contentExpr )? RCurly
            {
            ATTRIBUTE596=(Token)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_compAttrConstructor12316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATTRIBUTE.add(ATTRIBUTE596);

            // org/brackit/xquery/compiler/parser/XQuery.g:1386:6: (tag= qName -> ^( Literal $tag) | ( LCurly expr RCurly ) -> expr )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( ((LA168_0>=XQUERY && LA168_0<=ANCESTOR_OR_SELF)||(LA168_0>=DOCUMENT && LA168_0<=ITEM)||(LA168_0>=DOCUMENT_NODE && LA168_0<=WHILE)||(LA168_0>=NOT && LA168_0<=NCName)) ) {
                alt168=1;
            }
            else if ( (LA168_0==LCurly) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1387:7: tag= qName
                    {
                    pushFollow(FOLLOW_qName_in_compAttrConstructor12333);
                    tag=qName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qName.add(tag.getTree());


                    // AST REWRITE
                    // elements: tag
                    // token labels: 
                    // rule labels: retval, tag
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tag=new RewriteRuleSubtreeStream(adaptor,"rule tag",tag!=null?tag.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1387:17: -> ^( Literal $tag)
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1387:20: ^( Literal $tag)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, stream_tag.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1388:9: ( LCurly expr RCurly )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1388:9: ( LCurly expr RCurly )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1388:10: LCurly expr RCurly
                    {
                    LCurly597=(Token)match(input,LCurly,FOLLOW_LCurly_in_compAttrConstructor12353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCurly.add(LCurly597);

                    pushFollow(FOLLOW_expr_in_compAttrConstructor12355);
                    expr598=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr598.getTree());
                    RCurly599=(Token)match(input,RCurly,FOLLOW_RCurly_in_compAttrConstructor12357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCurly.add(RCurly599);


                    }



                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1388:30: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            LCurly600=(Token)match(input,LCurly,FOLLOW_LCurly_in_compAttrConstructor12376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly600);

            // org/brackit/xquery/compiler/parser/XQuery.g:1390:13: ( contentExpr )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==LAngle||LA169_0==Pragma||(LA169_0>=XQUERY && LA169_0<=AposedStringLiteral)||(LA169_0>=DirCommentConstructor && LA169_0<=DirPIConstructor)||(LA169_0>=DOCUMENT && LA169_0<=WHILE)||(LA169_0>=NOT && LA169_0<=NCName)||LA169_0==408||LA169_0==411||(LA169_0>=413 && LA169_0<=415)||(LA169_0>=422 && LA169_0<=423)||(LA169_0>=425 && LA169_0<=426)||LA169_0==429) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1390:13: contentExpr
                    {
                    pushFollow(FOLLOW_contentExpr_in_compAttrConstructor12378);
                    contentExpr601=contentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contentExpr.add(contentExpr601.getTree());

                    }
                    break;

            }

            RCurly602=(Token)match(input,RCurly,FOLLOW_RCurly_in_compAttrConstructor12381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly602);



            // AST REWRITE
            // elements: contentExpr, compAttrConstructor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1391:5: -> ^( CompAttributeConstructor $compAttrConstructor ^( ContentSequence ( contentExpr )? ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1391:8: ^( CompAttributeConstructor $compAttrConstructor ^( ContentSequence ( contentExpr )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompAttributeConstructor, "CompAttributeConstructor"), root_1);

                adaptor.addChild(root_1, stream_retval.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1391:56: ^( ContentSequence ( contentExpr )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ContentSequence, "ContentSequence"), root_2);

                // org/brackit/xquery/compiler/parser/XQuery.g:1391:74: ( contentExpr )?
                if ( stream_contentExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_contentExpr.nextTree());

                }
                stream_contentExpr.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compAttrConstructor"

    public static class compTextConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compTextConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1394:1: compTextConstructor : TEXT LCurly expr RCurly -> ^( CompTextConstructor expr ) ;
    public final XQueryParser.compTextConstructor_return compTextConstructor() throws RecognitionException {
        XQueryParser.compTextConstructor_return retval = new XQueryParser.compTextConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TEXT603=null;
        Token LCurly604=null;
        Token RCurly606=null;
        XQueryParser.expr_return expr605 = null;


        Object TEXT603_tree=null;
        Object LCurly604_tree=null;
        Object RCurly606_tree=null;
        RewriteRuleTokenStream stream_TEXT=new RewriteRuleTokenStream(adaptor,"token TEXT");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1395:5: ( TEXT LCurly expr RCurly -> ^( CompTextConstructor expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1395:7: TEXT LCurly expr RCurly
            {
            TEXT603=(Token)match(input,TEXT,FOLLOW_TEXT_in_compTextConstructor12422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TEXT.add(TEXT603);

            LCurly604=(Token)match(input,LCurly,FOLLOW_LCurly_in_compTextConstructor12424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly604);

            pushFollow(FOLLOW_expr_in_compTextConstructor12426);
            expr605=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr605.getTree());
            RCurly606=(Token)match(input,RCurly,FOLLOW_RCurly_in_compTextConstructor12428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly606);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1396:5: -> ^( CompTextConstructor expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1396:8: ^( CompTextConstructor expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompTextConstructor, "CompTextConstructor"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compTextConstructor"

    public static class compCommentConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compCommentConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1399:1: compCommentConstructor : COMMENT LCurly expr RCurly -> ^( CompCommentConstructor expr ) ;
    public final XQueryParser.compCommentConstructor_return compCommentConstructor() throws RecognitionException {
        XQueryParser.compCommentConstructor_return retval = new XQueryParser.compCommentConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMENT607=null;
        Token LCurly608=null;
        Token RCurly610=null;
        XQueryParser.expr_return expr609 = null;


        Object COMMENT607_tree=null;
        Object LCurly608_tree=null;
        Object RCurly610_tree=null;
        RewriteRuleTokenStream stream_COMMENT=new RewriteRuleTokenStream(adaptor,"token COMMENT");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1400:5: ( COMMENT LCurly expr RCurly -> ^( CompCommentConstructor expr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1400:7: COMMENT LCurly expr RCurly
            {
            COMMENT607=(Token)match(input,COMMENT,FOLLOW_COMMENT_in_compCommentConstructor12461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMENT.add(COMMENT607);

            LCurly608=(Token)match(input,LCurly,FOLLOW_LCurly_in_compCommentConstructor12463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly608);

            pushFollow(FOLLOW_expr_in_compCommentConstructor12465);
            expr609=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr609.getTree());
            RCurly610=(Token)match(input,RCurly,FOLLOW_RCurly_in_compCommentConstructor12467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly610);



            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1401:5: -> ^( CompCommentConstructor expr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1401:8: ^( CompCommentConstructor expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompCommentConstructor, "CompCommentConstructor"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compCommentConstructor"

    public static class compPIConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compPIConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1404:1: compPIConstructor : PROCESSING_INSTRUCTION (name= ncName -> ^( Literal Str[$name.text] ) | ( LCurly expr RCurly ) -> expr ) LCurly (vExpr= expr )? RCurly -> ^( CompPIConstructor $compPIConstructor ( $vExpr)? ) ;
    public final XQueryParser.compPIConstructor_return compPIConstructor() throws RecognitionException {
        XQueryParser.compPIConstructor_return retval = new XQueryParser.compPIConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PROCESSING_INSTRUCTION611=null;
        Token LCurly612=null;
        Token RCurly614=null;
        Token LCurly615=null;
        Token RCurly616=null;
        XQueryParser.ncName_return name = null;

        XQueryParser.expr_return vExpr = null;

        XQueryParser.expr_return expr613 = null;


        Object PROCESSING_INSTRUCTION611_tree=null;
        Object LCurly612_tree=null;
        Object RCurly614_tree=null;
        Object LCurly615_tree=null;
        Object RCurly616_tree=null;
        RewriteRuleTokenStream stream_PROCESSING_INSTRUCTION=new RewriteRuleTokenStream(adaptor,"token PROCESSING_INSTRUCTION");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1405:5: ( PROCESSING_INSTRUCTION (name= ncName -> ^( Literal Str[$name.text] ) | ( LCurly expr RCurly ) -> expr ) LCurly (vExpr= expr )? RCurly -> ^( CompPIConstructor $compPIConstructor ( $vExpr)? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1405:7: PROCESSING_INSTRUCTION (name= ncName -> ^( Literal Str[$name.text] ) | ( LCurly expr RCurly ) -> expr ) LCurly (vExpr= expr )? RCurly
            {
            PROCESSING_INSTRUCTION611=(Token)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor12500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PROCESSING_INSTRUCTION.add(PROCESSING_INSTRUCTION611);

            // org/brackit/xquery/compiler/parser/XQuery.g:1406:6: (name= ncName -> ^( Literal Str[$name.text] ) | ( LCurly expr RCurly ) -> expr )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( ((LA170_0>=XQUERY && LA170_0<=ANCESTOR_OR_SELF)||(LA170_0>=DOCUMENT && LA170_0<=ITEM)||(LA170_0>=DOCUMENT_NODE && LA170_0<=WHILE)||(LA170_0>=NOT && LA170_0<=NCName)) ) {
                alt170=1;
            }
            else if ( (LA170_0==LCurly) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1407:7: name= ncName
                    {
                    pushFollow(FOLLOW_ncName_in_compPIConstructor12517);
                    name=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(name.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1407:19: -> ^( Literal Str[$name.text] )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1407:22: ^( Literal Str[$name.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Literal, "Literal"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(Str, (name!=null?input.toString(name.start,name.stop):null)));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1408:9: ( LCurly expr RCurly )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1408:9: ( LCurly expr RCurly )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1408:10: LCurly expr RCurly
                    {
                    LCurly612=(Token)match(input,LCurly,FOLLOW_LCurly_in_compPIConstructor12537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCurly.add(LCurly612);

                    pushFollow(FOLLOW_expr_in_compPIConstructor12539);
                    expr613=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr613.getTree());
                    RCurly614=(Token)match(input,RCurly,FOLLOW_RCurly_in_compPIConstructor12541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCurly.add(RCurly614);


                    }



                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1408:30: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            LCurly615=(Token)match(input,LCurly,FOLLOW_LCurly_in_compPIConstructor12560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly615);

            // org/brackit/xquery/compiler/parser/XQuery.g:1410:18: (vExpr= expr )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==LAngle||LA171_0==Pragma||(LA171_0>=XQUERY && LA171_0<=AposedStringLiteral)||(LA171_0>=DirCommentConstructor && LA171_0<=DirPIConstructor)||(LA171_0>=DOCUMENT && LA171_0<=WHILE)||(LA171_0>=NOT && LA171_0<=NCName)||LA171_0==408||LA171_0==411||(LA171_0>=413 && LA171_0<=415)||(LA171_0>=422 && LA171_0<=423)||(LA171_0>=425 && LA171_0<=426)||LA171_0==429) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1410:18: vExpr= expr
                    {
                    pushFollow(FOLLOW_expr_in_compPIConstructor12564);
                    vExpr=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(vExpr.getTree());

                    }
                    break;

            }

            RCurly616=(Token)match(input,RCurly,FOLLOW_RCurly_in_compPIConstructor12567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly616);



            // AST REWRITE
            // elements: vExpr, compPIConstructor
            // token labels: 
            // rule labels: retval, vExpr
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_vExpr=new RewriteRuleSubtreeStream(adaptor,"rule vExpr",vExpr!=null?vExpr.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1411:5: -> ^( CompPIConstructor $compPIConstructor ( $vExpr)? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1411:8: ^( CompPIConstructor $compPIConstructor ( $vExpr)? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompPIConstructor, "CompPIConstructor"), root_1);

                adaptor.addChild(root_1, stream_retval.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1411:47: ( $vExpr)?
                if ( stream_vExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_vExpr.nextTree());

                }
                stream_vExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compPIConstructor"

    public static class singleType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "singleType"
    // org/brackit/xquery/compiler/parser/XQuery.g:1418:1: singleType : atomicType ( '?' )? ;
    public final XQueryParser.singleType_return singleType() throws RecognitionException {
        XQueryParser.singleType_return retval = new XQueryParser.singleType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal618=null;
        XQueryParser.atomicType_return atomicType617 = null;


        Object char_literal618_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1419:5: ( atomicType ( '?' )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:1419:7: atomicType ( '?' )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_atomicType_in_singleType12612);
            atomicType617=atomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, atomicType617.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1419:18: ( '?' )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==430) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1419:18: '?'
                    {
                    char_literal618=(Token)match(input,430,FOLLOW_430_in_singleType12614); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal618_tree = (Object)adaptor.create(char_literal618);
                    adaptor.addChild(root_0, char_literal618_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "singleType"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // org/brackit/xquery/compiler/parser/XQuery.g:1422:1: typeDeclaration : AS sequenceType -> ^( SequenceType sequenceType ) ;
    public final XQueryParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        XQueryParser.typeDeclaration_return retval = new XQueryParser.typeDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AS619=null;
        XQueryParser.sequenceType_return sequenceType620 = null;


        Object AS619_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1423:5: ( AS sequenceType -> ^( SequenceType sequenceType ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1423:7: AS sequenceType
            {
            AS619=(Token)match(input,AS,FOLLOW_AS_in_typeDeclaration12636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS619);

            pushFollow(FOLLOW_sequenceType_in_typeDeclaration12638);
            sequenceType620=sequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequenceType.add(sequenceType620.getTree());


            // AST REWRITE
            // elements: sequenceType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1424:5: -> ^( SequenceType sequenceType )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1424:8: ^( SequenceType sequenceType )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SequenceType, "SequenceType"), root_1);

                adaptor.addChild(root_1, stream_sequenceType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class sequenceType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sequenceType"
    // org/brackit/xquery/compiler/parser/XQuery.g:1427:1: sequenceType : ( ( EMPTY_SEQUENCE '(' ')' ) -> EmptySequenceType | ( itemType ( ( occurrenceIndicator )=> occurrenceIndicator )? ) -> itemType ( occurrenceIndicator )? );
    public final XQueryParser.sequenceType_return sequenceType() throws RecognitionException {
        XQueryParser.sequenceType_return retval = new XQueryParser.sequenceType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EMPTY_SEQUENCE621=null;
        Token char_literal622=null;
        Token char_literal623=null;
        XQueryParser.itemType_return itemType624 = null;

        XQueryParser.occurrenceIndicator_return occurrenceIndicator625 = null;


        Object EMPTY_SEQUENCE621_tree=null;
        Object char_literal622_tree=null;
        Object char_literal623_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_occurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule occurrenceIndicator");
        RewriteRuleSubtreeStream stream_itemType=new RewriteRuleSubtreeStream(adaptor,"rule itemType");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1428:5: ( ( EMPTY_SEQUENCE '(' ')' ) -> EmptySequenceType | ( itemType ( ( occurrenceIndicator )=> occurrenceIndicator )? ) -> itemType ( occurrenceIndicator )? )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==EMPTY_SEQUENCE) ) {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==408) ) {
                    alt174=1;
                }
                else if ( (LA174_1==EOF||(LA174_1>=LAngle && LA174_1<=RCurly)||(LA174_1>=SymEq && LA174_1<=Colon)||LA174_1==DEFAULT||LA174_1==ORDERED||(LA174_1>=ORDER && LA174_1<=EMPTY)||LA174_1==COLLATION||(LA174_1>=AT && LA174_1<=EXTERNAL)||(LA174_1>=FOR && LA174_1<=LET)||LA174_1==WINDOW||LA174_1==START||(LA174_1>=ONLY && LA174_1<=END)||(LA174_1>=COUNT && LA174_1<=GROUP)||(LA174_1>=STABLE && LA174_1<=RETURN)||LA174_1==SATISFIES||(LA174_1>=CASE && LA174_1<=AS)||(LA174_1>=ELSE && LA174_1<=CONTAINS)||(LA174_1>=TO && LA174_1<=INSTANCE)||(LA174_1>=EQ && LA174_1<=IS)||(LA174_1>=INTO && LA174_1<=BEFORE)||LA174_1==WITH||LA174_1==MODIFY||(LA174_1>=FTOR && LA174_1<=NOT)||LA174_1==WORDS||LA174_1==TIMES||(LA174_1>=DISTANCE && LA174_1<=DIFFERENT)||LA174_1==ENTIRE||LA174_1==LEVELS||LA174_1==WITHOUT||LA174_1==406||(LA174_1>=409 && LA174_1<=410)||(LA174_1>=412 && LA174_1<=421)||LA174_1==428||LA174_1==430) ) {
                    alt174=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA174_0>=XQUERY && LA174_0<=ANCESTOR_OR_SELF)||(LA174_0>=DOCUMENT && LA174_0<=PROCESSING_INSTRUCTION)||(LA174_0>=ITEM && LA174_0<=WHILE)||(LA174_0>=NOT && LA174_0<=NCName)) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1428:7: ( EMPTY_SEQUENCE '(' ')' )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1428:7: ( EMPTY_SEQUENCE '(' ')' )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1428:8: EMPTY_SEQUENCE '(' ')'
                    {
                    EMPTY_SEQUENCE621=(Token)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_sequenceType12672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(EMPTY_SEQUENCE621);

                    char_literal622=(Token)match(input,408,FOLLOW_408_in_sequenceType12674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_408.add(char_literal622);

                    char_literal623=(Token)match(input,410,FOLLOW_410_in_sequenceType12676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_410.add(char_literal623);


                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1429:6: -> EmptySequenceType
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(EmptySequenceType, "EmptySequenceType"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1430:8: ( itemType ( ( occurrenceIndicator )=> occurrenceIndicator )? )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1430:8: ( itemType ( ( occurrenceIndicator )=> occurrenceIndicator )? )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1430:9: itemType ( ( occurrenceIndicator )=> occurrenceIndicator )?
                    {
                    pushFollow(FOLLOW_itemType_in_sequenceType12696);
                    itemType624=itemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_itemType.add(itemType624.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1430:18: ( ( occurrenceIndicator )=> occurrenceIndicator )?
                    int alt173=2;
                    alt173 = dfa173.predict(input);
                    switch (alt173) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1430:19: ( occurrenceIndicator )=> occurrenceIndicator
                            {
                            pushFollow(FOLLOW_occurrenceIndicator_in_sequenceType12705);
                            occurrenceIndicator625=occurrenceIndicator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_occurrenceIndicator.add(occurrenceIndicator625.getTree());

                            }
                            break;

                    }


                    }



                    // AST REWRITE
                    // elements: occurrenceIndicator, itemType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1431:6: -> itemType ( occurrenceIndicator )?
                    {
                        adaptor.addChild(root_0, stream_itemType.nextTree());
                        // org/brackit/xquery/compiler/parser/XQuery.g:1431:18: ( occurrenceIndicator )?
                        if ( stream_occurrenceIndicator.hasNext() ) {
                            adaptor.addChild(root_0, stream_occurrenceIndicator.nextTree());

                        }
                        stream_occurrenceIndicator.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sequenceType"

    public static class occurrenceIndicator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "occurrenceIndicator"
    // org/brackit/xquery/compiler/parser/XQuery.g:1434:1: occurrenceIndicator : ( '?' -> CardinalityZeroOrOne | '*' -> CardinalityZeroOrMany | '+' -> CardinalityOneOrMany );
    public final XQueryParser.occurrenceIndicator_return occurrenceIndicator() throws RecognitionException {
        XQueryParser.occurrenceIndicator_return retval = new XQueryParser.occurrenceIndicator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal626=null;
        Token char_literal627=null;
        Token char_literal628=null;

        Object char_literal626_tree=null;
        Object char_literal627_tree=null;
        Object char_literal628_tree=null;
        RewriteRuleTokenStream stream_415=new RewriteRuleTokenStream(adaptor,"token 415");
        RewriteRuleTokenStream stream_430=new RewriteRuleTokenStream(adaptor,"token 430");
        RewriteRuleTokenStream stream_413=new RewriteRuleTokenStream(adaptor,"token 413");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1435:5: ( '?' -> CardinalityZeroOrOne | '*' -> CardinalityZeroOrMany | '+' -> CardinalityOneOrMany )
            int alt175=3;
            switch ( input.LA(1) ) {
            case 430:
                {
                alt175=1;
                }
                break;
            case 415:
                {
                alt175=2;
                }
                break;
            case 413:
                {
                alt175=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1435:7: '?'
                    {
                    char_literal626=(Token)match(input,430,FOLLOW_430_in_occurrenceIndicator12775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_430.add(char_literal626);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1435:11: -> CardinalityZeroOrOne
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(CardinalityZeroOrOne, "CardinalityZeroOrOne"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1436:7: '*'
                    {
                    char_literal627=(Token)match(input,415,FOLLOW_415_in_occurrenceIndicator12787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_415.add(char_literal627);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1436:11: -> CardinalityZeroOrMany
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(CardinalityZeroOrMany, "CardinalityZeroOrMany"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1437:7: '+'
                    {
                    char_literal628=(Token)match(input,413,FOLLOW_413_in_occurrenceIndicator12799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_413.add(char_literal628);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1437:11: -> CardinalityOneOrMany
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(CardinalityOneOrMany, "CardinalityOneOrMany"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "occurrenceIndicator"

    public static class itemType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "itemType"
    // org/brackit/xquery/compiler/parser/XQuery.g:1440:1: itemType : ( kindTest | ( ITEM '(' ')' ) -> ItemType | atomicType -> ^( AtomicType atomicType ) );
    public final XQueryParser.itemType_return itemType() throws RecognitionException {
        XQueryParser.itemType_return retval = new XQueryParser.itemType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ITEM630=null;
        Token char_literal631=null;
        Token char_literal632=null;
        XQueryParser.kindTest_return kindTest629 = null;

        XQueryParser.atomicType_return atomicType633 = null;


        Object ITEM630_tree=null;
        Object char_literal631_tree=null;
        Object char_literal632_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_atomicType=new RewriteRuleSubtreeStream(adaptor,"rule atomicType");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1441:5: ( kindTest | ( ITEM '(' ')' ) -> ItemType | atomicType -> ^( AtomicType atomicType ) )
            int alt176=3;
            alt176 = dfa176.predict(input);
            switch (alt176) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1441:7: kindTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_kindTest_in_itemType12824);
                    kindTest629=kindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, kindTest629.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1442:7: ( ITEM '(' ')' )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1442:7: ( ITEM '(' ')' )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1442:8: ITEM '(' ')'
                    {
                    ITEM630=(Token)match(input,ITEM,FOLLOW_ITEM_in_itemType12833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ITEM.add(ITEM630);

                    char_literal631=(Token)match(input,408,FOLLOW_408_in_itemType12835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_408.add(char_literal631);

                    char_literal632=(Token)match(input,410,FOLLOW_410_in_itemType12837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_410.add(char_literal632);


                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1442:22: -> ItemType
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ItemType, "ItemType"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1443:7: atomicType
                    {
                    pushFollow(FOLLOW_atomicType_in_itemType12850);
                    atomicType633=atomicType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicType.add(atomicType633.getTree());


                    // AST REWRITE
                    // elements: atomicType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1443:18: -> ^( AtomicType atomicType )
                    {
                        // org/brackit/xquery/compiler/parser/XQuery.g:1443:21: ^( AtomicType atomicType )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtomicType, "AtomicType"), root_1);

                        adaptor.addChild(root_1, stream_atomicType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "itemType"

    public static class atomicType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicType"
    // org/brackit/xquery/compiler/parser/XQuery.g:1446:1: atomicType : qName ;
    public final XQueryParser.atomicType_return atomicType() throws RecognitionException {
        XQueryParser.atomicType_return retval = new XQueryParser.atomicType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName634 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1447:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1447:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_atomicType12879);
            qName634=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName634.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicType"

    public static class kindTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "kindTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1450:1: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest | {...}? => namespaceNodeTest );
    public final XQueryParser.kindTest_return kindTest() throws RecognitionException {
        XQueryParser.kindTest_return retval = new XQueryParser.kindTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.documentTest_return documentTest635 = null;

        XQueryParser.elementTest_return elementTest636 = null;

        XQueryParser.attributeTest_return attributeTest637 = null;

        XQueryParser.schemaElementTest_return schemaElementTest638 = null;

        XQueryParser.schemaAttributeTest_return schemaAttributeTest639 = null;

        XQueryParser.piTest_return piTest640 = null;

        XQueryParser.commentTest_return commentTest641 = null;

        XQueryParser.textTest_return textTest642 = null;

        XQueryParser.anyKindTest_return anyKindTest643 = null;

        XQueryParser.namespaceNodeTest_return namespaceNodeTest644 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1451:5: ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest | {...}? => namespaceNodeTest )
            int alt177=10;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1451:7: documentTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_documentTest_in_kindTest12900);
                    documentTest635=documentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, documentTest635.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1452:7: elementTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementTest_in_kindTest12908);
                    elementTest636=elementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementTest636.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1453:7: attributeTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_attributeTest_in_kindTest12916);
                    attributeTest637=attributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeTest637.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1454:7: schemaElementTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_schemaElementTest_in_kindTest12924);
                    schemaElementTest638=schemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schemaElementTest638.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1455:7: schemaAttributeTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_schemaAttributeTest_in_kindTest12932);
                    schemaAttributeTest639=schemaAttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schemaAttributeTest639.getTree());

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1456:7: piTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_piTest_in_kindTest12940);
                    piTest640=piTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, piTest640.getTree());

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1457:7: commentTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commentTest_in_kindTest12948);
                    commentTest641=commentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commentTest641.getTree());

                    }
                    break;
                case 8 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1458:7: textTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_textTest_in_kindTest12956);
                    textTest642=textTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, textTest642.getTree());

                    }
                    break;
                case 9 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1459:7: anyKindTest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anyKindTest_in_kindTest12964);
                    anyKindTest643=anyKindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anyKindTest643.getTree());

                    }
                    break;
                case 10 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1460:7: {...}? => namespaceNodeTest
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((xqVersion==XQUERY_3_0)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "kindTest", "xqVersion==XQUERY_3_0");
                    }
                    pushFollow(FOLLOW_namespaceNodeTest_in_kindTest12976);
                    namespaceNodeTest644=namespaceNodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceNodeTest644.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "kindTest"

    public static class anyKindTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anyKindTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1462:1: anyKindTest : ANYKIND -> KindTestAnyKind ;
    public final XQueryParser.anyKindTest_return anyKindTest() throws RecognitionException {
        XQueryParser.anyKindTest_return retval = new XQueryParser.anyKindTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ANYKIND645=null;

        Object ANYKIND645_tree=null;
        RewriteRuleTokenStream stream_ANYKIND=new RewriteRuleTokenStream(adaptor,"token ANYKIND");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1463:5: ( ANYKIND -> KindTestAnyKind )
            // org/brackit/xquery/compiler/parser/XQuery.g:1463:6: ANYKIND
            {
            ANYKIND645=(Token)match(input,ANYKIND,FOLLOW_ANYKIND_in_anyKindTest13006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ANYKIND.add(ANYKIND645);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1464:5: -> KindTestAnyKind
            {
                adaptor.addChild(root_0, (Object)adaptor.create(KindTestAnyKind, "KindTestAnyKind"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anyKindTest"

    public static class documentTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "documentTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1466:1: documentTest : DOCUMENT_NODE '(' ( elementTest | schemaElementTest )? ')' -> ^( KindTestDocument ( elementTest )? ( schemaElementTest )? ) ;
    public final XQueryParser.documentTest_return documentTest() throws RecognitionException {
        XQueryParser.documentTest_return retval = new XQueryParser.documentTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOCUMENT_NODE646=null;
        Token char_literal647=null;
        Token char_literal650=null;
        XQueryParser.elementTest_return elementTest648 = null;

        XQueryParser.schemaElementTest_return schemaElementTest649 = null;


        Object DOCUMENT_NODE646_tree=null;
        Object char_literal647_tree=null;
        Object char_literal650_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleTokenStream stream_DOCUMENT_NODE=new RewriteRuleTokenStream(adaptor,"token DOCUMENT_NODE");
        RewriteRuleSubtreeStream stream_schemaElementTest=new RewriteRuleSubtreeStream(adaptor,"rule schemaElementTest");
        RewriteRuleSubtreeStream stream_elementTest=new RewriteRuleSubtreeStream(adaptor,"rule elementTest");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1467:5: ( DOCUMENT_NODE '(' ( elementTest | schemaElementTest )? ')' -> ^( KindTestDocument ( elementTest )? ( schemaElementTest )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1467:7: DOCUMENT_NODE '(' ( elementTest | schemaElementTest )? ')'
            {
            DOCUMENT_NODE646=(Token)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_documentTest13030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOCUMENT_NODE.add(DOCUMENT_NODE646);

            char_literal647=(Token)match(input,408,FOLLOW_408_in_documentTest13032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal647);

            // org/brackit/xquery/compiler/parser/XQuery.g:1467:25: ( elementTest | schemaElementTest )?
            int alt178=3;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ELEMENT) ) {
                alt178=1;
            }
            else if ( (LA178_0==SCHEMA_ELEMENT) ) {
                alt178=2;
            }
            switch (alt178) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1467:26: elementTest
                    {
                    pushFollow(FOLLOW_elementTest_in_documentTest13035);
                    elementTest648=elementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementTest.add(elementTest648.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1467:40: schemaElementTest
                    {
                    pushFollow(FOLLOW_schemaElementTest_in_documentTest13039);
                    schemaElementTest649=schemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_schemaElementTest.add(schemaElementTest649.getTree());

                    }
                    break;

            }

            char_literal650=(Token)match(input,410,FOLLOW_410_in_documentTest13043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal650);



            // AST REWRITE
            // elements: schemaElementTest, elementTest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1468:5: -> ^( KindTestDocument ( elementTest )? ( schemaElementTest )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1468:8: ^( KindTestDocument ( elementTest )? ( schemaElementTest )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(KindTestDocument, "KindTestDocument"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1468:27: ( elementTest )?
                if ( stream_elementTest.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementTest.nextTree());

                }
                stream_elementTest.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1468:40: ( schemaElementTest )?
                if ( stream_schemaElementTest.hasNext() ) {
                    adaptor.addChild(root_1, stream_schemaElementTest.nextTree());

                }
                stream_schemaElementTest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "documentTest"

    public static class textTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "textTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1470:1: textTest : TEXT '(' ')' -> KindTestText ;
    public final XQueryParser.textTest_return textTest() throws RecognitionException {
        XQueryParser.textTest_return retval = new XQueryParser.textTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TEXT651=null;
        Token char_literal652=null;
        Token char_literal653=null;

        Object TEXT651_tree=null;
        Object char_literal652_tree=null;
        Object char_literal653_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_TEXT=new RewriteRuleTokenStream(adaptor,"token TEXT");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1471:5: ( TEXT '(' ')' -> KindTestText )
            // org/brackit/xquery/compiler/parser/XQuery.g:1471:7: TEXT '(' ')'
            {
            TEXT651=(Token)match(input,TEXT,FOLLOW_TEXT_in_textTest13075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TEXT.add(TEXT651);

            char_literal652=(Token)match(input,408,FOLLOW_408_in_textTest13077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal652);

            char_literal653=(Token)match(input,410,FOLLOW_410_in_textTest13079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal653);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1472:5: -> KindTestText
            {
                adaptor.addChild(root_0, (Object)adaptor.create(KindTestText, "KindTestText"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "textTest"

    public static class commentTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commentTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1474:1: commentTest : COMMENT '(' ')' -> KindTestComment ;
    public final XQueryParser.commentTest_return commentTest() throws RecognitionException {
        XQueryParser.commentTest_return retval = new XQueryParser.commentTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMENT654=null;
        Token char_literal655=null;
        Token char_literal656=null;

        Object COMMENT654_tree=null;
        Object char_literal655_tree=null;
        Object char_literal656_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleTokenStream stream_COMMENT=new RewriteRuleTokenStream(adaptor,"token COMMENT");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1475:5: ( COMMENT '(' ')' -> KindTestComment )
            // org/brackit/xquery/compiler/parser/XQuery.g:1475:7: COMMENT '(' ')'
            {
            COMMENT654=(Token)match(input,COMMENT,FOLLOW_COMMENT_in_commentTest13103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMENT.add(COMMENT654);

            char_literal655=(Token)match(input,408,FOLLOW_408_in_commentTest13105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal655);

            char_literal656=(Token)match(input,410,FOLLOW_410_in_commentTest13107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal656);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1476:5: -> KindTestComment
            {
                adaptor.addChild(root_0, (Object)adaptor.create(KindTestComment, "KindTestComment"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "commentTest"

    public static class piTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "piTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1480:1: piTest : PROCESSING_INSTRUCTION '(' ( ncName | stringLiteral )? ')' -> ^( KindTestPi ( ncName )? ( stringLiteral )? ) ;
    public final XQueryParser.piTest_return piTest() throws RecognitionException {
        XQueryParser.piTest_return retval = new XQueryParser.piTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PROCESSING_INSTRUCTION657=null;
        Token char_literal658=null;
        Token char_literal661=null;
        XQueryParser.ncName_return ncName659 = null;

        XQueryParser.stringLiteral_return stringLiteral660 = null;


        Object PROCESSING_INSTRUCTION657_tree=null;
        Object char_literal658_tree=null;
        Object char_literal661_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_PROCESSING_INSTRUCTION=new RewriteRuleTokenStream(adaptor,"token PROCESSING_INSTRUCTION");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        RewriteRuleSubtreeStream stream_stringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule stringLiteral");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1481:5: ( PROCESSING_INSTRUCTION '(' ( ncName | stringLiteral )? ')' -> ^( KindTestPi ( ncName )? ( stringLiteral )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1481:7: PROCESSING_INSTRUCTION '(' ( ncName | stringLiteral )? ')'
            {
            PROCESSING_INSTRUCTION657=(Token)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_piTest13137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PROCESSING_INSTRUCTION.add(PROCESSING_INSTRUCTION657);

            char_literal658=(Token)match(input,408,FOLLOW_408_in_piTest13139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal658);

            // org/brackit/xquery/compiler/parser/XQuery.g:1481:34: ( ncName | stringLiteral )?
            int alt179=3;
            int LA179_0 = input.LA(1);

            if ( ((LA179_0>=XQUERY && LA179_0<=ANCESTOR_OR_SELF)||(LA179_0>=DOCUMENT && LA179_0<=ITEM)||(LA179_0>=DOCUMENT_NODE && LA179_0<=WHILE)||(LA179_0>=NOT && LA179_0<=NCName)) ) {
                alt179=1;
            }
            else if ( ((LA179_0>=QuotedStringLiteral && LA179_0<=AposedStringLiteral)) ) {
                alt179=2;
            }
            switch (alt179) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1481:35: ncName
                    {
                    pushFollow(FOLLOW_ncName_in_piTest13142);
                    ncName659=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncName659.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1481:44: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_piTest13146);
                    stringLiteral660=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringLiteral.add(stringLiteral660.getTree());

                    }
                    break;

            }

            char_literal661=(Token)match(input,410,FOLLOW_410_in_piTest13150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal661);



            // AST REWRITE
            // elements: ncName, stringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1482:5: -> ^( KindTestPi ( ncName )? ( stringLiteral )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1482:8: ^( KindTestPi ( ncName )? ( stringLiteral )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(KindTestPi, "KindTestPi"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1482:21: ( ncName )?
                if ( stream_ncName.hasNext() ) {
                    adaptor.addChild(root_1, stream_ncName.nextTree());

                }
                stream_ncName.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1482:29: ( stringLiteral )?
                if ( stream_stringLiteral.hasNext() ) {
                    adaptor.addChild(root_1, stream_stringLiteral.nextTree());

                }
                stream_stringLiteral.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "piTest"

    public static class attributeTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributeTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1484:1: attributeTest : ATTRIBUTE '(' ( attribNameOrWildcard ( ',' typeName )? )? ')' -> ^( KindTestAttribute ( attribNameOrWildcard )? ( typeName )? ) ;
    public final XQueryParser.attributeTest_return attributeTest() throws RecognitionException {
        XQueryParser.attributeTest_return retval = new XQueryParser.attributeTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ATTRIBUTE662=null;
        Token char_literal663=null;
        Token char_literal665=null;
        Token char_literal667=null;
        XQueryParser.attribNameOrWildcard_return attribNameOrWildcard664 = null;

        XQueryParser.typeName_return typeName666 = null;


        Object ATTRIBUTE662_tree=null;
        Object char_literal663_tree=null;
        Object char_literal665_tree=null;
        Object char_literal667_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleTokenStream stream_ATTRIBUTE=new RewriteRuleTokenStream(adaptor,"token ATTRIBUTE");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_attribNameOrWildcard=new RewriteRuleSubtreeStream(adaptor,"rule attribNameOrWildcard");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1485:5: ( ATTRIBUTE '(' ( attribNameOrWildcard ( ',' typeName )? )? ')' -> ^( KindTestAttribute ( attribNameOrWildcard )? ( typeName )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1485:7: ATTRIBUTE '(' ( attribNameOrWildcard ( ',' typeName )? )? ')'
            {
            ATTRIBUTE662=(Token)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attributeTest13182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATTRIBUTE.add(ATTRIBUTE662);

            char_literal663=(Token)match(input,408,FOLLOW_408_in_attributeTest13184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal663);

            // org/brackit/xquery/compiler/parser/XQuery.g:1485:21: ( attribNameOrWildcard ( ',' typeName )? )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( ((LA181_0>=XQUERY && LA181_0<=ANCESTOR_OR_SELF)||(LA181_0>=DOCUMENT && LA181_0<=ITEM)||(LA181_0>=DOCUMENT_NODE && LA181_0<=WHILE)||(LA181_0>=NOT && LA181_0<=NCName)||LA181_0==415) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1485:22: attribNameOrWildcard ( ',' typeName )?
                    {
                    pushFollow(FOLLOW_attribNameOrWildcard_in_attributeTest13187);
                    attribNameOrWildcard664=attribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribNameOrWildcard.add(attribNameOrWildcard664.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1485:43: ( ',' typeName )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==409) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1485:44: ',' typeName
                            {
                            char_literal665=(Token)match(input,409,FOLLOW_409_in_attributeTest13190); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_409.add(char_literal665);

                            pushFollow(FOLLOW_typeName_in_attributeTest13192);
                            typeName666=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(typeName666.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal667=(Token)match(input,410,FOLLOW_410_in_attributeTest13198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal667);



            // AST REWRITE
            // elements: attribNameOrWildcard, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1486:5: -> ^( KindTestAttribute ( attribNameOrWildcard )? ( typeName )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1486:8: ^( KindTestAttribute ( attribNameOrWildcard )? ( typeName )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(KindTestAttribute, "KindTestAttribute"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1486:28: ( attribNameOrWildcard )?
                if ( stream_attribNameOrWildcard.hasNext() ) {
                    adaptor.addChild(root_1, stream_attribNameOrWildcard.nextTree());

                }
                stream_attribNameOrWildcard.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1486:50: ( typeName )?
                if ( stream_typeName.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeName.nextTree());

                }
                stream_typeName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributeTest"

    public static class attribNameOrWildcard_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribNameOrWildcard"
    // org/brackit/xquery/compiler/parser/XQuery.g:1488:1: attribNameOrWildcard : ( attributeName | '*' );
    public final XQueryParser.attribNameOrWildcard_return attribNameOrWildcard() throws RecognitionException {
        XQueryParser.attribNameOrWildcard_return retval = new XQueryParser.attribNameOrWildcard_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal669=null;
        XQueryParser.attributeName_return attributeName668 = null;


        Object char_literal669_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1489:5: ( attributeName | '*' )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( ((LA182_0>=XQUERY && LA182_0<=ANCESTOR_OR_SELF)||(LA182_0>=DOCUMENT && LA182_0<=ITEM)||(LA182_0>=DOCUMENT_NODE && LA182_0<=WHILE)||(LA182_0>=NOT && LA182_0<=NCName)) ) {
                alt182=1;
            }
            else if ( (LA182_0==415) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1489:7: attributeName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_attributeName_in_attribNameOrWildcard13230);
                    attributeName668=attributeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeName668.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1490:7: '*'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal669=(Token)match(input,415,FOLLOW_415_in_attribNameOrWildcard13238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal669_tree = (Object)adaptor.create(char_literal669);
                    adaptor.addChild(root_0, char_literal669_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attribNameOrWildcard"

    public static class schemaAttributeTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schemaAttributeTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1492:1: schemaAttributeTest : SCHEMA_ATTRIBUTE '(' attributeDeclaration ')' ;
    public final XQueryParser.schemaAttributeTest_return schemaAttributeTest() throws RecognitionException {
        XQueryParser.schemaAttributeTest_return retval = new XQueryParser.schemaAttributeTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SCHEMA_ATTRIBUTE670=null;
        Token char_literal671=null;
        Token char_literal673=null;
        XQueryParser.attributeDeclaration_return attributeDeclaration672 = null;


        Object SCHEMA_ATTRIBUTE670_tree=null;
        Object char_literal671_tree=null;
        Object char_literal673_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1493:5: ( SCHEMA_ATTRIBUTE '(' attributeDeclaration ')' )
            // org/brackit/xquery/compiler/parser/XQuery.g:1493:7: SCHEMA_ATTRIBUTE '(' attributeDeclaration ')'
            {
            root_0 = (Object)adaptor.nil();

            SCHEMA_ATTRIBUTE670=(Token)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_schemaAttributeTest13254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ATTRIBUTE670_tree = (Object)adaptor.create(SCHEMA_ATTRIBUTE670);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE670_tree);
            }
            char_literal671=(Token)match(input,408,FOLLOW_408_in_schemaAttributeTest13256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal671_tree = (Object)adaptor.create(char_literal671);
            adaptor.addChild(root_0, char_literal671_tree);
            }
            pushFollow(FOLLOW_attributeDeclaration_in_schemaAttributeTest13258);
            attributeDeclaration672=attributeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeDeclaration672.getTree());
            char_literal673=(Token)match(input,410,FOLLOW_410_in_schemaAttributeTest13260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal673_tree = (Object)adaptor.create(char_literal673);
            adaptor.addChild(root_0, char_literal673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "schemaAttributeTest"

    public static class attributeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributeDeclaration"
    // org/brackit/xquery/compiler/parser/XQuery.g:1495:1: attributeDeclaration : attributeName ;
    public final XQueryParser.attributeDeclaration_return attributeDeclaration() throws RecognitionException {
        XQueryParser.attributeDeclaration_return retval = new XQueryParser.attributeDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.attributeName_return attributeName674 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1496:5: ( attributeName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1496:7: attributeName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_attributeName_in_attributeDeclaration13276);
            attributeName674=attributeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeName674.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributeDeclaration"

    public static class elementTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1498:1: elementTest : ELEMENT '(' ( elementNameOrWildcard ( ',' typeName ( '?' )? )? )? ')' -> ^( KindTestElement ( elementNameOrWildcard )? ( typeName )? ( '?' )? ) ;
    public final XQueryParser.elementTest_return elementTest() throws RecognitionException {
        XQueryParser.elementTest_return retval = new XQueryParser.elementTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ELEMENT675=null;
        Token char_literal676=null;
        Token char_literal678=null;
        Token char_literal680=null;
        Token char_literal681=null;
        XQueryParser.elementNameOrWildcard_return elementNameOrWildcard677 = null;

        XQueryParser.typeName_return typeName679 = null;


        Object ELEMENT675_tree=null;
        Object char_literal676_tree=null;
        Object char_literal678_tree=null;
        Object char_literal680_tree=null;
        Object char_literal681_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_430=new RewriteRuleTokenStream(adaptor,"token 430");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_elementNameOrWildcard=new RewriteRuleSubtreeStream(adaptor,"rule elementNameOrWildcard");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1499:5: ( ELEMENT '(' ( elementNameOrWildcard ( ',' typeName ( '?' )? )? )? ')' -> ^( KindTestElement ( elementNameOrWildcard )? ( typeName )? ( '?' )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1499:7: ELEMENT '(' ( elementNameOrWildcard ( ',' typeName ( '?' )? )? )? ')'
            {
            ELEMENT675=(Token)match(input,ELEMENT,FOLLOW_ELEMENT_in_elementTest13292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELEMENT.add(ELEMENT675);

            char_literal676=(Token)match(input,408,FOLLOW_408_in_elementTest13294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal676);

            // org/brackit/xquery/compiler/parser/XQuery.g:1499:19: ( elementNameOrWildcard ( ',' typeName ( '?' )? )? )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( ((LA185_0>=XQUERY && LA185_0<=ANCESTOR_OR_SELF)||(LA185_0>=DOCUMENT && LA185_0<=ITEM)||(LA185_0>=DOCUMENT_NODE && LA185_0<=WHILE)||(LA185_0>=NOT && LA185_0<=NCName)||LA185_0==415) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1499:20: elementNameOrWildcard ( ',' typeName ( '?' )? )?
                    {
                    pushFollow(FOLLOW_elementNameOrWildcard_in_elementTest13297);
                    elementNameOrWildcard677=elementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementNameOrWildcard.add(elementNameOrWildcard677.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1499:42: ( ',' typeName ( '?' )? )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==409) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1499:43: ',' typeName ( '?' )?
                            {
                            char_literal678=(Token)match(input,409,FOLLOW_409_in_elementTest13300); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_409.add(char_literal678);

                            pushFollow(FOLLOW_typeName_in_elementTest13302);
                            typeName679=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(typeName679.getTree());
                            // org/brackit/xquery/compiler/parser/XQuery.g:1499:56: ( '?' )?
                            int alt183=2;
                            int LA183_0 = input.LA(1);

                            if ( (LA183_0==430) ) {
                                alt183=1;
                            }
                            switch (alt183) {
                                case 1 :
                                    // org/brackit/xquery/compiler/parser/XQuery.g:1499:56: '?'
                                    {
                                    char_literal680=(Token)match(input,430,FOLLOW_430_in_elementTest13304); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_430.add(char_literal680);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal681=(Token)match(input,410,FOLLOW_410_in_elementTest13311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal681);



            // AST REWRITE
            // elements: typeName, elementNameOrWildcard, 430
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1500:5: -> ^( KindTestElement ( elementNameOrWildcard )? ( typeName )? ( '?' )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1500:8: ^( KindTestElement ( elementNameOrWildcard )? ( typeName )? ( '?' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(KindTestElement, "KindTestElement"), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1500:26: ( elementNameOrWildcard )?
                if ( stream_elementNameOrWildcard.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementNameOrWildcard.nextTree());

                }
                stream_elementNameOrWildcard.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1500:49: ( typeName )?
                if ( stream_typeName.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeName.nextTree());

                }
                stream_typeName.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1500:59: ( '?' )?
                if ( stream_430.hasNext() ) {
                    adaptor.addChild(root_1, stream_430.nextNode());

                }
                stream_430.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementTest"

    public static class elementNameOrWildcard_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementNameOrWildcard"
    // org/brackit/xquery/compiler/parser/XQuery.g:1503:1: elementNameOrWildcard : ( elementName | '*' );
    public final XQueryParser.elementNameOrWildcard_return elementNameOrWildcard() throws RecognitionException {
        XQueryParser.elementNameOrWildcard_return retval = new XQueryParser.elementNameOrWildcard_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal683=null;
        XQueryParser.elementName_return elementName682 = null;


        Object char_literal683_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1504:5: ( elementName | '*' )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( ((LA186_0>=XQUERY && LA186_0<=ANCESTOR_OR_SELF)||(LA186_0>=DOCUMENT && LA186_0<=ITEM)||(LA186_0>=DOCUMENT_NODE && LA186_0<=WHILE)||(LA186_0>=NOT && LA186_0<=NCName)) ) {
                alt186=1;
            }
            else if ( (LA186_0==415) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1504:7: elementName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementName_in_elementNameOrWildcard13351);
                    elementName682=elementName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementName682.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1505:7: '*'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal683=(Token)match(input,415,FOLLOW_415_in_elementNameOrWildcard13359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal683_tree = (Object)adaptor.create(char_literal683);
                    adaptor.addChild(root_0, char_literal683_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementNameOrWildcard"

    public static class schemaElementTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schemaElementTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1508:1: schemaElementTest : SCHEMA_ELEMENT '(' elementDeclaration ')' -> ^( KindTestSchemaElement elementDeclaration ) ;
    public final XQueryParser.schemaElementTest_return schemaElementTest() throws RecognitionException {
        XQueryParser.schemaElementTest_return retval = new XQueryParser.schemaElementTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SCHEMA_ELEMENT684=null;
        Token char_literal685=null;
        Token char_literal687=null;
        XQueryParser.elementDeclaration_return elementDeclaration686 = null;


        Object SCHEMA_ELEMENT684_tree=null;
        Object char_literal685_tree=null;
        Object char_literal687_tree=null;
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleTokenStream stream_SCHEMA_ELEMENT=new RewriteRuleTokenStream(adaptor,"token SCHEMA_ELEMENT");
        RewriteRuleSubtreeStream stream_elementDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule elementDeclaration");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1509:5: ( SCHEMA_ELEMENT '(' elementDeclaration ')' -> ^( KindTestSchemaElement elementDeclaration ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1509:7: SCHEMA_ELEMENT '(' elementDeclaration ')'
            {
            SCHEMA_ELEMENT684=(Token)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_schemaElementTest13380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA_ELEMENT.add(SCHEMA_ELEMENT684);

            char_literal685=(Token)match(input,408,FOLLOW_408_in_schemaElementTest13382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal685);

            pushFollow(FOLLOW_elementDeclaration_in_schemaElementTest13384);
            elementDeclaration686=elementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementDeclaration.add(elementDeclaration686.getTree());
            char_literal687=(Token)match(input,410,FOLLOW_410_in_schemaElementTest13386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal687);



            // AST REWRITE
            // elements: elementDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1510:5: -> ^( KindTestSchemaElement elementDeclaration )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1510:8: ^( KindTestSchemaElement elementDeclaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(KindTestSchemaElement, "KindTestSchemaElement"), root_1);

                adaptor.addChild(root_1, stream_elementDeclaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "schemaElementTest"

    public static class elementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementDeclaration"
    // org/brackit/xquery/compiler/parser/XQuery.g:1517:1: elementDeclaration : elementName ;
    public final XQueryParser.elementDeclaration_return elementDeclaration() throws RecognitionException {
        XQueryParser.elementDeclaration_return retval = new XQueryParser.elementDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.elementName_return elementName688 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1518:5: ( elementName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1518:7: elementName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementName_in_elementDeclaration13430);
            elementName688=elementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementName688.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementDeclaration"

    public static class attributeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributeName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1520:1: attributeName : qName ;
    public final XQueryParser.attributeName_return attributeName() throws RecognitionException {
        XQueryParser.attributeName_return retval = new XQueryParser.attributeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName689 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1521:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1521:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_attributeName13446);
            qName689=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName689.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributeName"

    public static class elementName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1523:1: elementName : qName ;
    public final XQueryParser.elementName_return elementName() throws RecognitionException {
        XQueryParser.elementName_return retval = new XQueryParser.elementName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName690 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1524:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1524:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_elementName13462);
            qName690=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName690.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementName"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1526:1: typeName : qName ;
    public final XQueryParser.typeName_return typeName() throws RecognitionException {
        XQueryParser.typeName_return retval = new XQueryParser.typeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.qName_return qName691 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1527:5: ( qName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1527:7: qName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qName_in_typeName13478);
            qName691=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName691.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class uriLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uriLiteral"
    // org/brackit/xquery/compiler/parser/XQuery.g:1529:1: uriLiteral : stringLiteral ;
    public final XQueryParser.uriLiteral_return uriLiteral() throws RecognitionException {
        XQueryParser.uriLiteral_return retval = new XQueryParser.uriLiteral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.stringLiteral_return stringLiteral692 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1530:5: ( stringLiteral )
            // org/brackit/xquery/compiler/parser/XQuery.g:1530:7: stringLiteral
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_stringLiteral_in_uriLiteral13494);
            stringLiteral692=stringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral692.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uriLiteral"

    public static class revalidationDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "revalidationDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:1537:1: revalidationDecl : DECLARE REVALIDATION ( STRICT | LAX | SKIP ) ;
    public final XQueryParser.revalidationDecl_return revalidationDecl() throws RecognitionException {
        XQueryParser.revalidationDecl_return retval = new XQueryParser.revalidationDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE693=null;
        Token REVALIDATION694=null;
        Token set695=null;

        Object DECLARE693_tree=null;
        Object REVALIDATION694_tree=null;
        Object set695_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1538:5: ( DECLARE REVALIDATION ( STRICT | LAX | SKIP ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1538:7: DECLARE REVALIDATION ( STRICT | LAX | SKIP )
            {
            root_0 = (Object)adaptor.nil();

            DECLARE693=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_revalidationDecl13518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE693_tree = (Object)adaptor.create(DECLARE693);
            adaptor.addChild(root_0, DECLARE693_tree);
            }
            REVALIDATION694=(Token)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_revalidationDecl13520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REVALIDATION694_tree = (Object)adaptor.create(REVALIDATION694);
            adaptor.addChild(root_0, REVALIDATION694_tree);
            }
            set695=(Token)input.LT(1);
            if ( (input.LA(1)>=LAX && input.LA(1)<=STRICT)||input.LA(1)==SKIP ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set695));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "revalidationDecl"

    public static class insertExprTargetChoice_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertExprTargetChoice"
    // org/brackit/xquery/compiler/parser/XQuery.g:1540:1: insertExprTargetChoice : ( AS ( FIRST -> InsertFirst | LAST -> InsertLast ) INTO | INTO -> InsertInto | AFTER -> InsertAfter | BEFORE -> InsertBefore );
    public final XQueryParser.insertExprTargetChoice_return insertExprTargetChoice() throws RecognitionException {
        XQueryParser.insertExprTargetChoice_return retval = new XQueryParser.insertExprTargetChoice_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AS696=null;
        Token FIRST697=null;
        Token LAST698=null;
        Token INTO699=null;
        Token INTO700=null;
        Token AFTER701=null;
        Token BEFORE702=null;

        Object AS696_tree=null;
        Object FIRST697_tree=null;
        Object LAST698_tree=null;
        Object INTO699_tree=null;
        Object INTO700_tree=null;
        Object AFTER701_tree=null;
        Object BEFORE702_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_BEFORE=new RewriteRuleTokenStream(adaptor,"token BEFORE");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1541:5: ( AS ( FIRST -> InsertFirst | LAST -> InsertLast ) INTO | INTO -> InsertInto | AFTER -> InsertAfter | BEFORE -> InsertBefore )
            int alt188=4;
            switch ( input.LA(1) ) {
            case AS:
                {
                alt188=1;
                }
                break;
            case INTO:
                {
                alt188=2;
                }
                break;
            case AFTER:
                {
                alt188=3;
                }
                break;
            case BEFORE:
                {
                alt188=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1541:7: AS ( FIRST -> InsertFirst | LAST -> InsertLast ) INTO
                    {
                    AS696=(Token)match(input,AS,FOLLOW_AS_in_insertExprTargetChoice13548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS696);

                    // org/brackit/xquery/compiler/parser/XQuery.g:1541:10: ( FIRST -> InsertFirst | LAST -> InsertLast )
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==FIRST) ) {
                        alt187=1;
                    }
                    else if ( (LA187_0==LAST) ) {
                        alt187=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 187, 0, input);

                        throw nvae;
                    }
                    switch (alt187) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1541:11: FIRST
                            {
                            FIRST697=(Token)match(input,FIRST,FOLLOW_FIRST_in_insertExprTargetChoice13551); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_FIRST.add(FIRST697);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 1541:17: -> InsertFirst
                            {
                                adaptor.addChild(root_0, (Object)adaptor.create(InsertFirst, "InsertFirst"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1541:33: LAST
                            {
                            LAST698=(Token)match(input,LAST,FOLLOW_LAST_in_insertExprTargetChoice13558); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LAST.add(LAST698);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 1541:38: -> InsertLast
                            {
                                adaptor.addChild(root_0, (Object)adaptor.create(InsertLast, "InsertLast"));

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }

                    INTO699=(Token)match(input,INTO,FOLLOW_INTO_in_insertExprTargetChoice13565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO699);


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1542:7: INTO
                    {
                    INTO700=(Token)match(input,INTO,FOLLOW_INTO_in_insertExprTargetChoice13573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO700);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1542:12: -> InsertInto
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(InsertInto, "InsertInto"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1543:7: AFTER
                    {
                    AFTER701=(Token)match(input,AFTER,FOLLOW_AFTER_in_insertExprTargetChoice13585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER701);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1543:13: -> InsertAfter
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(InsertAfter, "InsertAfter"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1544:7: BEFORE
                    {
                    BEFORE702=(Token)match(input,BEFORE,FOLLOW_BEFORE_in_insertExprTargetChoice13597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BEFORE.add(BEFORE702);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1544:14: -> InsertBefore
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(InsertBefore, "InsertBefore"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertExprTargetChoice"

    public static class insertExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1546:1: insertExpr : INSERT ( NODE | NODES ) sourceExpr insertExprTargetChoice targetExpr -> ^( Insert insertExprTargetChoice sourceExpr targetExpr ) ;
    public final XQueryParser.insertExpr_return insertExpr() throws RecognitionException {
        XQueryParser.insertExpr_return retval = new XQueryParser.insertExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INSERT703=null;
        Token NODE704=null;
        Token NODES705=null;
        XQueryParser.sourceExpr_return sourceExpr706 = null;

        XQueryParser.insertExprTargetChoice_return insertExprTargetChoice707 = null;

        XQueryParser.targetExpr_return targetExpr708 = null;


        Object INSERT703_tree=null;
        Object NODE704_tree=null;
        Object NODES705_tree=null;
        RewriteRuleTokenStream stream_NODES=new RewriteRuleTokenStream(adaptor,"token NODES");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_NODE=new RewriteRuleTokenStream(adaptor,"token NODE");
        RewriteRuleSubtreeStream stream_insertExprTargetChoice=new RewriteRuleSubtreeStream(adaptor,"rule insertExprTargetChoice");
        RewriteRuleSubtreeStream stream_sourceExpr=new RewriteRuleSubtreeStream(adaptor,"rule sourceExpr");
        RewriteRuleSubtreeStream stream_targetExpr=new RewriteRuleSubtreeStream(adaptor,"rule targetExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1547:5: ( INSERT ( NODE | NODES ) sourceExpr insertExprTargetChoice targetExpr -> ^( Insert insertExprTargetChoice sourceExpr targetExpr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1547:7: INSERT ( NODE | NODES ) sourceExpr insertExprTargetChoice targetExpr
            {
            INSERT703=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertExpr13617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT703);

            // org/brackit/xquery/compiler/parser/XQuery.g:1547:14: ( NODE | NODES )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==NODE) ) {
                alt189=1;
            }
            else if ( (LA189_0==NODES) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1547:15: NODE
                    {
                    NODE704=(Token)match(input,NODE,FOLLOW_NODE_in_insertExpr13620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NODE.add(NODE704);


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1547:22: NODES
                    {
                    NODES705=(Token)match(input,NODES,FOLLOW_NODES_in_insertExpr13624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NODES.add(NODES705);


                    }
                    break;

            }

            pushFollow(FOLLOW_sourceExpr_in_insertExpr13627);
            sourceExpr706=sourceExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sourceExpr.add(sourceExpr706.getTree());
            pushFollow(FOLLOW_insertExprTargetChoice_in_insertExpr13629);
            insertExprTargetChoice707=insertExprTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertExprTargetChoice.add(insertExprTargetChoice707.getTree());
            pushFollow(FOLLOW_targetExpr_in_insertExpr13631);
            targetExpr708=targetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_targetExpr.add(targetExpr708.getTree());


            // AST REWRITE
            // elements: insertExprTargetChoice, targetExpr, sourceExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1547:74: -> ^( Insert insertExprTargetChoice sourceExpr targetExpr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1547:77: ^( Insert insertExprTargetChoice sourceExpr targetExpr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Insert, "Insert"), root_1);

                adaptor.addChild(root_1, stream_insertExprTargetChoice.nextTree());
                adaptor.addChild(root_1, stream_sourceExpr.nextTree());
                adaptor.addChild(root_1, stream_targetExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertExpr"

    public static class deleteExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1549:1: deleteExpr : DELETE ( NODE | NODES ) targetExpr -> ^( Delete targetExpr ) ;
    public final XQueryParser.deleteExpr_return deleteExpr() throws RecognitionException {
        XQueryParser.deleteExpr_return retval = new XQueryParser.deleteExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DELETE709=null;
        Token NODE710=null;
        Token NODES711=null;
        XQueryParser.targetExpr_return targetExpr712 = null;


        Object DELETE709_tree=null;
        Object NODE710_tree=null;
        Object NODES711_tree=null;
        RewriteRuleTokenStream stream_NODES=new RewriteRuleTokenStream(adaptor,"token NODES");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_NODE=new RewriteRuleTokenStream(adaptor,"token NODE");
        RewriteRuleSubtreeStream stream_targetExpr=new RewriteRuleSubtreeStream(adaptor,"rule targetExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1550:5: ( DELETE ( NODE | NODES ) targetExpr -> ^( Delete targetExpr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1550:7: DELETE ( NODE | NODES ) targetExpr
            {
            DELETE709=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteExpr13659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE709);

            // org/brackit/xquery/compiler/parser/XQuery.g:1550:14: ( NODE | NODES )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==NODE) ) {
                alt190=1;
            }
            else if ( (LA190_0==NODES) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }
            switch (alt190) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1550:15: NODE
                    {
                    NODE710=(Token)match(input,NODE,FOLLOW_NODE_in_deleteExpr13662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NODE.add(NODE710);


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1550:22: NODES
                    {
                    NODES711=(Token)match(input,NODES,FOLLOW_NODES_in_deleteExpr13666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NODES.add(NODES711);


                    }
                    break;

            }

            pushFollow(FOLLOW_targetExpr_in_deleteExpr13669);
            targetExpr712=targetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_targetExpr.add(targetExpr712.getTree());


            // AST REWRITE
            // elements: targetExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1550:40: -> ^( Delete targetExpr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1550:43: ^( Delete targetExpr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Delete, "Delete"), root_1);

                adaptor.addChild(root_1, stream_targetExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteExpr"

    public static class replaceExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "replaceExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1552:1: replaceExpr : REPLACE replaceTargetChoice targetExpr WITH exprSingle -> ^( Replace replaceTargetChoice targetExpr exprSingle ) ;
    public final XQueryParser.replaceExpr_return replaceExpr() throws RecognitionException {
        XQueryParser.replaceExpr_return retval = new XQueryParser.replaceExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REPLACE713=null;
        Token WITH716=null;
        XQueryParser.replaceTargetChoice_return replaceTargetChoice714 = null;

        XQueryParser.targetExpr_return targetExpr715 = null;

        XQueryParser.exprSingle_return exprSingle717 = null;


        Object REPLACE713_tree=null;
        Object WITH716_tree=null;
        RewriteRuleTokenStream stream_REPLACE=new RewriteRuleTokenStream(adaptor,"token REPLACE");
        RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
        RewriteRuleSubtreeStream stream_targetExpr=new RewriteRuleSubtreeStream(adaptor,"rule targetExpr");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_replaceTargetChoice=new RewriteRuleSubtreeStream(adaptor,"rule replaceTargetChoice");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1553:5: ( REPLACE replaceTargetChoice targetExpr WITH exprSingle -> ^( Replace replaceTargetChoice targetExpr exprSingle ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1553:7: REPLACE replaceTargetChoice targetExpr WITH exprSingle
            {
            REPLACE713=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_replaceExpr13693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REPLACE.add(REPLACE713);

            pushFollow(FOLLOW_replaceTargetChoice_in_replaceExpr13695);
            replaceTargetChoice714=replaceTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_replaceTargetChoice.add(replaceTargetChoice714.getTree());
            pushFollow(FOLLOW_targetExpr_in_replaceExpr13697);
            targetExpr715=targetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_targetExpr.add(targetExpr715.getTree());
            WITH716=(Token)match(input,WITH,FOLLOW_WITH_in_replaceExpr13699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WITH.add(WITH716);

            pushFollow(FOLLOW_exprSingle_in_replaceExpr13701);
            exprSingle717=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle717.getTree());


            // AST REWRITE
            // elements: exprSingle, targetExpr, replaceTargetChoice
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1553:62: -> ^( Replace replaceTargetChoice targetExpr exprSingle )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1553:65: ^( Replace replaceTargetChoice targetExpr exprSingle )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Replace, "Replace"), root_1);

                adaptor.addChild(root_1, stream_replaceTargetChoice.nextTree());
                adaptor.addChild(root_1, stream_targetExpr.nextTree());
                adaptor.addChild(root_1, stream_exprSingle.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "replaceExpr"

    public static class replaceTargetChoice_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "replaceTargetChoice"
    // org/brackit/xquery/compiler/parser/XQuery.g:1555:1: replaceTargetChoice : ( VALUE OF NODE -> ReplaceValue | NODE -> ReplaceNode );
    public final XQueryParser.replaceTargetChoice_return replaceTargetChoice() throws RecognitionException {
        XQueryParser.replaceTargetChoice_return retval = new XQueryParser.replaceTargetChoice_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token VALUE718=null;
        Token OF719=null;
        Token NODE720=null;
        Token NODE721=null;

        Object VALUE718_tree=null;
        Object OF719_tree=null;
        Object NODE720_tree=null;
        Object NODE721_tree=null;
        RewriteRuleTokenStream stream_NODE=new RewriteRuleTokenStream(adaptor,"token NODE");
        RewriteRuleTokenStream stream_VALUE=new RewriteRuleTokenStream(adaptor,"token VALUE");
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1556:2: ( VALUE OF NODE -> ReplaceValue | NODE -> ReplaceNode )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==VALUE) ) {
                alt191=1;
            }
            else if ( (LA191_0==NODE) ) {
                alt191=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1556:4: VALUE OF NODE
                    {
                    VALUE718=(Token)match(input,VALUE,FOLLOW_VALUE_in_replaceTargetChoice13726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE.add(VALUE718);

                    OF719=(Token)match(input,OF,FOLLOW_OF_in_replaceTargetChoice13728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OF.add(OF719);

                    NODE720=(Token)match(input,NODE,FOLLOW_NODE_in_replaceTargetChoice13730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NODE.add(NODE720);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1556:18: -> ReplaceValue
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ReplaceValue, "ReplaceValue"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1557:4: NODE
                    {
                    NODE721=(Token)match(input,NODE,FOLLOW_NODE_in_replaceTargetChoice13739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NODE.add(NODE721);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1557:9: -> ReplaceNode
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(ReplaceNode, "ReplaceNode"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "replaceTargetChoice"

    public static class renameExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "renameExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1560:1: renameExpr : RENAME NODE targetExpr AS newNameExpr -> ^( Rename targetExpr newNameExpr ) ;
    public final XQueryParser.renameExpr_return renameExpr() throws RecognitionException {
        XQueryParser.renameExpr_return retval = new XQueryParser.renameExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token RENAME722=null;
        Token NODE723=null;
        Token AS725=null;
        XQueryParser.targetExpr_return targetExpr724 = null;

        XQueryParser.newNameExpr_return newNameExpr726 = null;


        Object RENAME722_tree=null;
        Object NODE723_tree=null;
        Object AS725_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_NODE=new RewriteRuleTokenStream(adaptor,"token NODE");
        RewriteRuleTokenStream stream_RENAME=new RewriteRuleTokenStream(adaptor,"token RENAME");
        RewriteRuleSubtreeStream stream_newNameExpr=new RewriteRuleSubtreeStream(adaptor,"rule newNameExpr");
        RewriteRuleSubtreeStream stream_targetExpr=new RewriteRuleSubtreeStream(adaptor,"rule targetExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1561:5: ( RENAME NODE targetExpr AS newNameExpr -> ^( Rename targetExpr newNameExpr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1561:7: RENAME NODE targetExpr AS newNameExpr
            {
            RENAME722=(Token)match(input,RENAME,FOLLOW_RENAME_in_renameExpr13761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RENAME.add(RENAME722);

            NODE723=(Token)match(input,NODE,FOLLOW_NODE_in_renameExpr13763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NODE.add(NODE723);

            pushFollow(FOLLOW_targetExpr_in_renameExpr13765);
            targetExpr724=targetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_targetExpr.add(targetExpr724.getTree());
            AS725=(Token)match(input,AS,FOLLOW_AS_in_renameExpr13767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS725);

            pushFollow(FOLLOW_newNameExpr_in_renameExpr13769);
            newNameExpr726=newNameExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_newNameExpr.add(newNameExpr726.getTree());


            // AST REWRITE
            // elements: targetExpr, newNameExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1561:45: -> ^( Rename targetExpr newNameExpr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1561:48: ^( Rename targetExpr newNameExpr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Rename, "Rename"), root_1);

                adaptor.addChild(root_1, stream_targetExpr.nextTree());
                adaptor.addChild(root_1, stream_newNameExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "renameExpr"

    public static class sourceExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sourceExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1563:1: sourceExpr : exprSingle ;
    public final XQueryParser.sourceExpr_return sourceExpr() throws RecognitionException {
        XQueryParser.sourceExpr_return retval = new XQueryParser.sourceExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.exprSingle_return exprSingle727 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1564:5: ( exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:1564:7: exprSingle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_sourceExpr13795);
            exprSingle727=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle727.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sourceExpr"

    public static class targetExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "targetExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1566:1: targetExpr : exprSingle ;
    public final XQueryParser.targetExpr_return targetExpr() throws RecognitionException {
        XQueryParser.targetExpr_return retval = new XQueryParser.targetExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.exprSingle_return exprSingle728 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1567:5: ( exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:1567:7: exprSingle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_targetExpr13811);
            exprSingle728=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle728.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "targetExpr"

    public static class newNameExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newNameExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1569:1: newNameExpr : exprSingle ;
    public final XQueryParser.newNameExpr_return newNameExpr() throws RecognitionException {
        XQueryParser.newNameExpr_return retval = new XQueryParser.newNameExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.exprSingle_return exprSingle729 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1570:5: ( exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:1570:7: exprSingle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_newNameExpr13827);
            exprSingle729=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle729.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "newNameExpr"

    public static class transformExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "transformExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1572:1: transformExpr : COPY copyBinding ( ',' copyBinding )* MODIFY exprSingle RETURN exprSingle -> ^( Transform ( copyBinding )+ ^( Modify exprSingle ) ^( TransformReturn exprSingle ) ) ;
    public final XQueryParser.transformExpr_return transformExpr() throws RecognitionException {
        XQueryParser.transformExpr_return retval = new XQueryParser.transformExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COPY730=null;
        Token char_literal732=null;
        Token MODIFY734=null;
        Token RETURN736=null;
        XQueryParser.copyBinding_return copyBinding731 = null;

        XQueryParser.copyBinding_return copyBinding733 = null;

        XQueryParser.exprSingle_return exprSingle735 = null;

        XQueryParser.exprSingle_return exprSingle737 = null;


        Object COPY730_tree=null;
        Object char_literal732_tree=null;
        Object MODIFY734_tree=null;
        Object RETURN736_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_MODIFY=new RewriteRuleTokenStream(adaptor,"token MODIFY");
        RewriteRuleTokenStream stream_COPY=new RewriteRuleTokenStream(adaptor,"token COPY");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_copyBinding=new RewriteRuleSubtreeStream(adaptor,"rule copyBinding");

          variables.openScope();

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1579:3: ( COPY copyBinding ( ',' copyBinding )* MODIFY exprSingle RETURN exprSingle -> ^( Transform ( copyBinding )+ ^( Modify exprSingle ) ^( TransformReturn exprSingle ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1579:5: COPY copyBinding ( ',' copyBinding )* MODIFY exprSingle RETURN exprSingle
            {
            COPY730=(Token)match(input,COPY,FOLLOW_COPY_in_transformExpr13851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COPY.add(COPY730);

            pushFollow(FOLLOW_copyBinding_in_transformExpr13853);
            copyBinding731=copyBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_copyBinding.add(copyBinding731.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1579:22: ( ',' copyBinding )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==409) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1579:23: ',' copyBinding
            	    {
            	    char_literal732=(Token)match(input,409,FOLLOW_409_in_transformExpr13856); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_409.add(char_literal732);

            	    pushFollow(FOLLOW_copyBinding_in_transformExpr13858);
            	    copyBinding733=copyBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_copyBinding.add(copyBinding733.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);

            MODIFY734=(Token)match(input,MODIFY,FOLLOW_MODIFY_in_transformExpr13866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODIFY.add(MODIFY734);

            pushFollow(FOLLOW_exprSingle_in_transformExpr13868);
            exprSingle735=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle735.getTree());
            RETURN736=(Token)match(input,RETURN,FOLLOW_RETURN_in_transformExpr13874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURN.add(RETURN736);

            pushFollow(FOLLOW_exprSingle_in_transformExpr13876);
            exprSingle737=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle737.getTree());


            // AST REWRITE
            // elements: exprSingle, exprSingle, copyBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1582:3: -> ^( Transform ( copyBinding )+ ^( Modify exprSingle ) ^( TransformReturn exprSingle ) )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1582:6: ^( Transform ( copyBinding )+ ^( Modify exprSingle ) ^( TransformReturn exprSingle ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Transform, "Transform"), root_1);

                if ( !(stream_copyBinding.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_copyBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_copyBinding.nextTree());

                }
                stream_copyBinding.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1583:8: ^( Modify exprSingle )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Modify, "Modify"), root_2);

                adaptor.addChild(root_2, stream_exprSingle.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // org/brackit/xquery/compiler/parser/XQuery.g:1584:8: ^( TransformReturn exprSingle )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TransformReturn, "TransformReturn"), root_2);

                adaptor.addChild(root_2, stream_exprSingle.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                variables.closeScope();

            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "transformExpr"

    public static class copyBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "copyBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:1587:1: copyBinding : untypedVarBinding exprSingle -> ^( CopyBinding untypedVarBinding exprSingle ) ;
    public final XQueryParser.copyBinding_return copyBinding() throws RecognitionException {
        XQueryParser.copyBinding_return retval = new XQueryParser.copyBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.untypedVarBinding_return untypedVarBinding738 = null;

        XQueryParser.exprSingle_return exprSingle739 = null;


        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_untypedVarBinding=new RewriteRuleSubtreeStream(adaptor,"rule untypedVarBinding");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1588:3: ( untypedVarBinding exprSingle -> ^( CopyBinding untypedVarBinding exprSingle ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1589:3: untypedVarBinding exprSingle
            {
            pushFollow(FOLLOW_untypedVarBinding_in_copyBinding13933);
            untypedVarBinding738=untypedVarBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_untypedVarBinding.add(untypedVarBinding738.getTree());
            pushFollow(FOLLOW_exprSingle_in_copyBinding13935);
            exprSingle739=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprSingle.add(exprSingle739.getTree());


            // AST REWRITE
            // elements: exprSingle, untypedVarBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1590:3: -> ^( CopyBinding untypedVarBinding exprSingle )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1590:6: ^( CopyBinding untypedVarBinding exprSingle )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CopyBinding, "CopyBinding"), root_1);

                adaptor.addChild(root_1, stream_untypedVarBinding.nextTree());
                adaptor.addChild(root_1, stream_exprSingle.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "copyBinding"

    public static class untypedVarBinding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "untypedVarBinding"
    // org/brackit/xquery/compiler/parser/XQuery.g:1593:1: untypedVarBinding : '$' name= varName ':=' -> ^( Variable[variables.declare($name.text)] ) ;
    public final XQueryParser.untypedVarBinding_return untypedVarBinding() throws RecognitionException {
        XQueryParser.untypedVarBinding_return retval = new XQueryParser.untypedVarBinding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal740=null;
        Token string_literal741=null;
        XQueryParser.varName_return name = null;


        Object char_literal740_tree=null;
        Object string_literal741_tree=null;
        RewriteRuleTokenStream stream_412=new RewriteRuleTokenStream(adaptor,"token 412");
        RewriteRuleTokenStream stream_411=new RewriteRuleTokenStream(adaptor,"token 411");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1594:3: ( '$' name= varName ':=' -> ^( Variable[variables.declare($name.text)] ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1594:5: '$' name= varName ':='
            {
            char_literal740=(Token)match(input,411,FOLLOW_411_in_untypedVarBinding13966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_411.add(char_literal740);

            pushFollow(FOLLOW_varName_in_untypedVarBinding13970);
            name=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varName.add(name.getTree());
            string_literal741=(Token)match(input,412,FOLLOW_412_in_untypedVarBinding13972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_412.add(string_literal741);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1595:3: -> ^( Variable[variables.declare($name.text)] )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1595:7: ^( Variable[variables.declare($name.text)] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Variable, variables.declare((name!=null?input.toString(name.start,name.stop):null))), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "untypedVarBinding"

    public static class assignmentExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1602:1: assignmentExpr : SET '$' varName ':=' exprSingle ;
    public final XQueryParser.assignmentExpr_return assignmentExpr() throws RecognitionException {
        XQueryParser.assignmentExpr_return retval = new XQueryParser.assignmentExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SET742=null;
        Token char_literal743=null;
        Token string_literal745=null;
        XQueryParser.varName_return varName744 = null;

        XQueryParser.exprSingle_return exprSingle746 = null;


        Object SET742_tree=null;
        Object char_literal743_tree=null;
        Object string_literal745_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1603:5: ( SET '$' varName ':=' exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:1603:7: SET '$' varName ':=' exprSingle
            {
            root_0 = (Object)adaptor.nil();

            SET742=(Token)match(input,SET,FOLLOW_SET_in_assignmentExpr14001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SET742_tree = (Object)adaptor.create(SET742);
            adaptor.addChild(root_0, SET742_tree);
            }
            char_literal743=(Token)match(input,411,FOLLOW_411_in_assignmentExpr14003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal743_tree = (Object)adaptor.create(char_literal743);
            adaptor.addChild(root_0, char_literal743_tree);
            }
            pushFollow(FOLLOW_varName_in_assignmentExpr14005);
            varName744=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName744.getTree());
            string_literal745=(Token)match(input,412,FOLLOW_412_in_assignmentExpr14007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal745_tree = (Object)adaptor.create(string_literal745);
            adaptor.addChild(root_0, string_literal745_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_assignmentExpr14009);
            exprSingle746=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle746.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentExpr"

    public static class blockExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1605:1: blockExpr : BLOCK block ;
    public final XQueryParser.blockExpr_return blockExpr() throws RecognitionException {
        XQueryParser.blockExpr_return retval = new XQueryParser.blockExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BLOCK747=null;
        XQueryParser.block_return block748 = null;


        Object BLOCK747_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1606:5: ( BLOCK block )
            // org/brackit/xquery/compiler/parser/XQuery.g:1606:7: BLOCK block
            {
            root_0 = (Object)adaptor.nil();

            BLOCK747=(Token)match(input,BLOCK,FOLLOW_BLOCK_in_blockExpr14025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BLOCK747_tree = (Object)adaptor.create(BLOCK747);
            adaptor.addChild(root_0, BLOCK747_tree);
            }
            pushFollow(FOLLOW_block_in_blockExpr14027);
            block748=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block748.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockExpr"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // org/brackit/xquery/compiler/parser/XQuery.g:1608:1: block : LCurly blockDecls blockBody RCurly ;
    public final XQueryParser.block_return block() throws RecognitionException {
        XQueryParser.block_return retval = new XQueryParser.block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LCurly749=null;
        Token RCurly752=null;
        XQueryParser.blockDecls_return blockDecls750 = null;

        XQueryParser.blockBody_return blockBody751 = null;


        Object LCurly749_tree=null;
        Object RCurly752_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1609:5: ( LCurly blockDecls blockBody RCurly )
            // org/brackit/xquery/compiler/parser/XQuery.g:1609:7: LCurly blockDecls blockBody RCurly
            {
            root_0 = (Object)adaptor.nil();

            LCurly749=(Token)match(input,LCurly,FOLLOW_LCurly_in_block14043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCurly749_tree = (Object)adaptor.create(LCurly749);
            adaptor.addChild(root_0, LCurly749_tree);
            }
            pushFollow(FOLLOW_blockDecls_in_block14045);
            blockDecls750=blockDecls();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockDecls750.getTree());
            pushFollow(FOLLOW_blockBody_in_block14047);
            blockBody751=blockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockBody751.getTree());
            RCurly752=(Token)match(input,RCurly,FOLLOW_RCurly_in_block14049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCurly752_tree = (Object)adaptor.create(RCurly752);
            adaptor.addChild(root_0, RCurly752_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockDecls"
    // org/brackit/xquery/compiler/parser/XQuery.g:1611:1: blockDecls : ( blockVarDecl ';' )* ;
    public final XQueryParser.blockDecls_return blockDecls() throws RecognitionException {
        XQueryParser.blockDecls_return retval = new XQueryParser.blockDecls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal754=null;
        XQueryParser.blockVarDecl_return blockVarDecl753 = null;


        Object char_literal754_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1612:5: ( ( blockVarDecl ';' )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1612:7: ( blockVarDecl ';' )*
            {
            root_0 = (Object)adaptor.nil();

            // org/brackit/xquery/compiler/parser/XQuery.g:1612:7: ( blockVarDecl ';' )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==DECLARE) ) {
                    int LA193_2 = input.LA(2);

                    if ( (LA193_2==411) ) {
                        alt193=1;
                    }


                }


                switch (alt193) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1612:8: blockVarDecl ';'
            	    {
            	    pushFollow(FOLLOW_blockVarDecl_in_blockDecls14066);
            	    blockVarDecl753=blockVarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockVarDecl753.getTree());
            	    char_literal754=(Token)match(input,406,FOLLOW_406_in_blockDecls14068); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal754_tree = (Object)adaptor.create(char_literal754);
            	    adaptor.addChild(root_0, char_literal754_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockDecls"

    public static class blockVarDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockVarDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:1614:1: blockVarDecl : DECLARE '$' varName ( typeDeclaration )? ( ':=' exprSingle )? ( ',' '$' varName ( typeDeclaration )? ( ':=' exprSingle )? )* ;
    public final XQueryParser.blockVarDecl_return blockVarDecl() throws RecognitionException {
        XQueryParser.blockVarDecl_return retval = new XQueryParser.blockVarDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE755=null;
        Token char_literal756=null;
        Token string_literal759=null;
        Token char_literal761=null;
        Token char_literal762=null;
        Token string_literal765=null;
        XQueryParser.varName_return varName757 = null;

        XQueryParser.typeDeclaration_return typeDeclaration758 = null;

        XQueryParser.exprSingle_return exprSingle760 = null;

        XQueryParser.varName_return varName763 = null;

        XQueryParser.typeDeclaration_return typeDeclaration764 = null;

        XQueryParser.exprSingle_return exprSingle766 = null;


        Object DECLARE755_tree=null;
        Object char_literal756_tree=null;
        Object string_literal759_tree=null;
        Object char_literal761_tree=null;
        Object char_literal762_tree=null;
        Object string_literal765_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1615:5: ( DECLARE '$' varName ( typeDeclaration )? ( ':=' exprSingle )? ( ',' '$' varName ( typeDeclaration )? ( ':=' exprSingle )? )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1615:7: DECLARE '$' varName ( typeDeclaration )? ( ':=' exprSingle )? ( ',' '$' varName ( typeDeclaration )? ( ':=' exprSingle )? )*
            {
            root_0 = (Object)adaptor.nil();

            DECLARE755=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_blockVarDecl14086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE755_tree = (Object)adaptor.create(DECLARE755);
            adaptor.addChild(root_0, DECLARE755_tree);
            }
            char_literal756=(Token)match(input,411,FOLLOW_411_in_blockVarDecl14088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal756_tree = (Object)adaptor.create(char_literal756);
            adaptor.addChild(root_0, char_literal756_tree);
            }
            pushFollow(FOLLOW_varName_in_blockVarDecl14090);
            varName757=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName757.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1615:27: ( typeDeclaration )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==AS) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1615:27: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_blockVarDecl14092);
                    typeDeclaration758=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration758.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:1615:44: ( ':=' exprSingle )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==412) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1615:45: ':=' exprSingle
                    {
                    string_literal759=(Token)match(input,412,FOLLOW_412_in_blockVarDecl14096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal759_tree = (Object)adaptor.create(string_literal759);
                    adaptor.addChild(root_0, string_literal759_tree);
                    }
                    pushFollow(FOLLOW_exprSingle_in_blockVarDecl14098);
                    exprSingle760=exprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle760.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:1616:10: ( ',' '$' varName ( typeDeclaration )? ( ':=' exprSingle )? )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==409) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1616:11: ',' '$' varName ( typeDeclaration )? ( ':=' exprSingle )?
            	    {
            	    char_literal761=(Token)match(input,409,FOLLOW_409_in_blockVarDecl14113); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal761_tree = (Object)adaptor.create(char_literal761);
            	    adaptor.addChild(root_0, char_literal761_tree);
            	    }
            	    char_literal762=(Token)match(input,411,FOLLOW_411_in_blockVarDecl14115); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal762_tree = (Object)adaptor.create(char_literal762);
            	    adaptor.addChild(root_0, char_literal762_tree);
            	    }
            	    pushFollow(FOLLOW_varName_in_blockVarDecl14117);
            	    varName763=varName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varName763.getTree());
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1616:27: ( typeDeclaration )?
            	    int alt196=2;
            	    int LA196_0 = input.LA(1);

            	    if ( (LA196_0==AS) ) {
            	        alt196=1;
            	    }
            	    switch (alt196) {
            	        case 1 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:1616:27: typeDeclaration
            	            {
            	            pushFollow(FOLLOW_typeDeclaration_in_blockVarDecl14119);
            	            typeDeclaration764=typeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration764.getTree());

            	            }
            	            break;

            	    }

            	    // org/brackit/xquery/compiler/parser/XQuery.g:1616:44: ( ':=' exprSingle )?
            	    int alt197=2;
            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0==412) ) {
            	        alt197=1;
            	    }
            	    switch (alt197) {
            	        case 1 :
            	            // org/brackit/xquery/compiler/parser/XQuery.g:1616:45: ':=' exprSingle
            	            {
            	            string_literal765=(Token)match(input,412,FOLLOW_412_in_blockVarDecl14123); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal765_tree = (Object)adaptor.create(string_literal765);
            	            adaptor.addChild(root_0, string_literal765_tree);
            	            }
            	            pushFollow(FOLLOW_exprSingle_in_blockVarDecl14125);
            	            exprSingle766=exprSingle();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle766.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockVarDecl"

    public static class blockBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockBody"
    // org/brackit/xquery/compiler/parser/XQuery.g:1618:1: blockBody : expr ;
    public final XQueryParser.blockBody_return blockBody() throws RecognitionException {
        XQueryParser.blockBody_return retval = new XQueryParser.blockBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.expr_return expr767 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1619:5: ( expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1619:7: expr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_in_blockBody14146);
            expr767=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr767.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockBody"

    public static class exitExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exitExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1621:1: exitExpr : EXIT RETURNING exprSingle ;
    public final XQueryParser.exitExpr_return exitExpr() throws RecognitionException {
        XQueryParser.exitExpr_return retval = new XQueryParser.exitExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXIT768=null;
        Token RETURNING769=null;
        XQueryParser.exprSingle_return exprSingle770 = null;


        Object EXIT768_tree=null;
        Object RETURNING769_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1622:5: ( EXIT RETURNING exprSingle )
            // org/brackit/xquery/compiler/parser/XQuery.g:1622:7: EXIT RETURNING exprSingle
            {
            root_0 = (Object)adaptor.nil();

            EXIT768=(Token)match(input,EXIT,FOLLOW_EXIT_in_exitExpr14162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXIT768_tree = (Object)adaptor.create(EXIT768);
            adaptor.addChild(root_0, EXIT768_tree);
            }
            RETURNING769=(Token)match(input,RETURNING,FOLLOW_RETURNING_in_exitExpr14164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURNING769_tree = (Object)adaptor.create(RETURNING769);
            adaptor.addChild(root_0, RETURNING769_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_exitExpr14166);
            exprSingle770=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle770.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exitExpr"

    public static class whileExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whileExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1624:1: whileExpr : WHILE '(' exprSingle ')' whileBody ;
    public final XQueryParser.whileExpr_return whileExpr() throws RecognitionException {
        XQueryParser.whileExpr_return retval = new XQueryParser.whileExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHILE771=null;
        Token char_literal772=null;
        Token char_literal774=null;
        XQueryParser.exprSingle_return exprSingle773 = null;

        XQueryParser.whileBody_return whileBody775 = null;


        Object WHILE771_tree=null;
        Object char_literal772_tree=null;
        Object char_literal774_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1625:5: ( WHILE '(' exprSingle ')' whileBody )
            // org/brackit/xquery/compiler/parser/XQuery.g:1625:7: WHILE '(' exprSingle ')' whileBody
            {
            root_0 = (Object)adaptor.nil();

            WHILE771=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileExpr14182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE771_tree = (Object)adaptor.create(WHILE771);
            adaptor.addChild(root_0, WHILE771_tree);
            }
            char_literal772=(Token)match(input,408,FOLLOW_408_in_whileExpr14184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal772_tree = (Object)adaptor.create(char_literal772);
            adaptor.addChild(root_0, char_literal772_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_whileExpr14186);
            exprSingle773=exprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprSingle773.getTree());
            char_literal774=(Token)match(input,410,FOLLOW_410_in_whileExpr14188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal774_tree = (Object)adaptor.create(char_literal774);
            adaptor.addChild(root_0, char_literal774_tree);
            }
            pushFollow(FOLLOW_whileBody_in_whileExpr14190);
            whileBody775=whileBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, whileBody775.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whileExpr"

    public static class whileBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whileBody"
    // org/brackit/xquery/compiler/parser/XQuery.g:1627:1: whileBody : block ;
    public final XQueryParser.whileBody_return whileBody() throws RecognitionException {
        XQueryParser.whileBody_return retval = new XQueryParser.whileBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.block_return block776 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1628:5: ( block )
            // org/brackit/xquery/compiler/parser/XQuery.g:1628:7: block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_block_in_whileBody14206);
            block776=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block776.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whileBody"

    public static class ftSelection_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftSelection"
    // org/brackit/xquery/compiler/parser/XQuery.g:1635:1: ftSelection : ftOr ( ftPosFilter )* ;
    public final XQueryParser.ftSelection_return ftSelection() throws RecognitionException {
        XQueryParser.ftSelection_return retval = new XQueryParser.ftSelection_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.ftOr_return ftOr777 = null;

        XQueryParser.ftPosFilter_return ftPosFilter778 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1636:5: ( ftOr ( ftPosFilter )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1636:7: ftOr ( ftPosFilter )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ftOr_in_ftSelection14226);
            ftOr777=ftOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftOr777.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1636:12: ( ftPosFilter )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==ORDERED||LA199_0==AT||LA199_0==WINDOW||LA199_0==DISTANCE||(LA199_0>=SAME && LA199_0<=DIFFERENT)||LA199_0==ENTIRE) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1636:12: ftPosFilter
            	    {
            	    pushFollow(FOLLOW_ftPosFilter_in_ftSelection14228);
            	    ftPosFilter778=ftPosFilter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftPosFilter778.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftSelection"

    public static class ftOr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftOr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1638:1: ftOr : ftAnd ( FTOR ftAnd )* ;
    public final XQueryParser.ftOr_return ftOr() throws RecognitionException {
        XQueryParser.ftOr_return retval = new XQueryParser.ftOr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FTOR780=null;
        XQueryParser.ftAnd_return ftAnd779 = null;

        XQueryParser.ftAnd_return ftAnd781 = null;


        Object FTOR780_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1639:5: ( ftAnd ( FTOR ftAnd )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1639:7: ftAnd ( FTOR ftAnd )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ftAnd_in_ftOr14245);
            ftAnd779=ftAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftAnd779.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1639:13: ( FTOR ftAnd )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==FTOR) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1639:14: FTOR ftAnd
            	    {
            	    FTOR780=(Token)match(input,FTOR,FOLLOW_FTOR_in_ftOr14248); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FTOR780_tree = (Object)adaptor.create(FTOR780);
            	    adaptor.addChild(root_0, FTOR780_tree);
            	    }
            	    pushFollow(FOLLOW_ftAnd_in_ftOr14250);
            	    ftAnd781=ftAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftAnd781.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftOr"

    public static class ftAnd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftAnd"
    // org/brackit/xquery/compiler/parser/XQuery.g:1641:1: ftAnd : ftMildNot ( FTAND ftMildNot )* ;
    public final XQueryParser.ftAnd_return ftAnd() throws RecognitionException {
        XQueryParser.ftAnd_return retval = new XQueryParser.ftAnd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FTAND783=null;
        XQueryParser.ftMildNot_return ftMildNot782 = null;

        XQueryParser.ftMildNot_return ftMildNot784 = null;


        Object FTAND783_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1642:5: ( ftMildNot ( FTAND ftMildNot )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1642:7: ftMildNot ( FTAND ftMildNot )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ftMildNot_in_ftAnd14268);
            ftMildNot782=ftMildNot();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftMildNot782.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1642:17: ( FTAND ftMildNot )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==FTAND) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1642:18: FTAND ftMildNot
            	    {
            	    FTAND783=(Token)match(input,FTAND,FOLLOW_FTAND_in_ftAnd14271); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FTAND783_tree = (Object)adaptor.create(FTAND783);
            	    adaptor.addChild(root_0, FTAND783_tree);
            	    }
            	    pushFollow(FOLLOW_ftMildNot_in_ftAnd14273);
            	    ftMildNot784=ftMildNot();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftMildNot784.getTree());

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftAnd"

    public static class ftMildNot_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftMildNot"
    // org/brackit/xquery/compiler/parser/XQuery.g:1644:1: ftMildNot : ftUnaryNot ( NOT IN ftUnaryNot )* ;
    public final XQueryParser.ftMildNot_return ftMildNot() throws RecognitionException {
        XQueryParser.ftMildNot_return retval = new XQueryParser.ftMildNot_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NOT786=null;
        Token IN787=null;
        XQueryParser.ftUnaryNot_return ftUnaryNot785 = null;

        XQueryParser.ftUnaryNot_return ftUnaryNot788 = null;


        Object NOT786_tree=null;
        Object IN787_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1645:5: ( ftUnaryNot ( NOT IN ftUnaryNot )* )
            // org/brackit/xquery/compiler/parser/XQuery.g:1645:7: ftUnaryNot ( NOT IN ftUnaryNot )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot14291);
            ftUnaryNot785=ftUnaryNot();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot785.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1645:18: ( NOT IN ftUnaryNot )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==NOT) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1645:19: NOT IN ftUnaryNot
            	    {
            	    NOT786=(Token)match(input,NOT,FOLLOW_NOT_in_ftMildNot14294); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOT786_tree = (Object)adaptor.create(NOT786);
            	    adaptor.addChild(root_0, NOT786_tree);
            	    }
            	    IN787=(Token)match(input,IN,FOLLOW_IN_in_ftMildNot14296); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    IN787_tree = (Object)adaptor.create(IN787);
            	    adaptor.addChild(root_0, IN787_tree);
            	    }
            	    pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot14298);
            	    ftUnaryNot788=ftUnaryNot();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot788.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftMildNot"

    public static class ftUnaryNot_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftUnaryNot"
    // org/brackit/xquery/compiler/parser/XQuery.g:1647:1: ftUnaryNot : ( FTNOT )? ftPrimaryWithOptions ;
    public final XQueryParser.ftUnaryNot_return ftUnaryNot() throws RecognitionException {
        XQueryParser.ftUnaryNot_return retval = new XQueryParser.ftUnaryNot_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FTNOT789=null;
        XQueryParser.ftPrimaryWithOptions_return ftPrimaryWithOptions790 = null;


        Object FTNOT789_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1648:5: ( ( FTNOT )? ftPrimaryWithOptions )
            // org/brackit/xquery/compiler/parser/XQuery.g:1648:7: ( FTNOT )? ftPrimaryWithOptions
            {
            root_0 = (Object)adaptor.nil();

            // org/brackit/xquery/compiler/parser/XQuery.g:1648:7: ( FTNOT )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==FTNOT) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1648:7: FTNOT
                    {
                    FTNOT789=(Token)match(input,FTNOT,FOLLOW_FTNOT_in_ftUnaryNot14316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FTNOT789_tree = (Object)adaptor.create(FTNOT789);
                    adaptor.addChild(root_0, FTNOT789_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot14319);
            ftPrimaryWithOptions790=ftPrimaryWithOptions();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftPrimaryWithOptions790.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftUnaryNot"

    public static class ftPrimaryWithOptions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftPrimaryWithOptions"
    // org/brackit/xquery/compiler/parser/XQuery.g:1650:1: ftPrimaryWithOptions : ftPrimary ( USING ftMatchOption )* ( ftWeight )? ;
    public final XQueryParser.ftPrimaryWithOptions_return ftPrimaryWithOptions() throws RecognitionException {
        XQueryParser.ftPrimaryWithOptions_return retval = new XQueryParser.ftPrimaryWithOptions_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token USING792=null;
        XQueryParser.ftPrimary_return ftPrimary791 = null;

        XQueryParser.ftMatchOption_return ftMatchOption793 = null;

        XQueryParser.ftWeight_return ftWeight794 = null;


        Object USING792_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1651:5: ( ftPrimary ( USING ftMatchOption )* ( ftWeight )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:1651:7: ftPrimary ( USING ftMatchOption )* ( ftWeight )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ftPrimary_in_ftPrimaryWithOptions14335);
            ftPrimary791=ftPrimary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftPrimary791.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1651:17: ( USING ftMatchOption )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==USING) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1651:18: USING ftMatchOption
            	    {
            	    USING792=(Token)match(input,USING,FOLLOW_USING_in_ftPrimaryWithOptions14338); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING792_tree = (Object)adaptor.create(USING792);
            	    adaptor.addChild(root_0, USING792_tree);
            	    }
            	    pushFollow(FOLLOW_ftMatchOption_in_ftPrimaryWithOptions14340);
            	    ftMatchOption793=ftMatchOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftMatchOption793.getTree());

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);

            // org/brackit/xquery/compiler/parser/XQuery.g:1651:40: ( ftWeight )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==WEIGHT) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1651:40: ftWeight
                    {
                    pushFollow(FOLLOW_ftWeight_in_ftPrimaryWithOptions14344);
                    ftWeight794=ftWeight();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftWeight794.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftPrimaryWithOptions"

    public static class ftWeight_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftWeight"
    // org/brackit/xquery/compiler/parser/XQuery.g:1653:1: ftWeight : WEIGHT rangeExpr ;
    public final XQueryParser.ftWeight_return ftWeight() throws RecognitionException {
        XQueryParser.ftWeight_return retval = new XQueryParser.ftWeight_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WEIGHT795=null;
        XQueryParser.rangeExpr_return rangeExpr796 = null;


        Object WEIGHT795_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1654:5: ( WEIGHT rangeExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1654:7: WEIGHT rangeExpr
            {
            root_0 = (Object)adaptor.nil();

            WEIGHT795=(Token)match(input,WEIGHT,FOLLOW_WEIGHT_in_ftWeight14361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WEIGHT795_tree = (Object)adaptor.create(WEIGHT795);
            adaptor.addChild(root_0, WEIGHT795_tree);
            }
            pushFollow(FOLLOW_rangeExpr_in_ftWeight14363);
            rangeExpr796=rangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeExpr796.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftWeight"

    public static class ftPrimary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftPrimary"
    // org/brackit/xquery/compiler/parser/XQuery.g:1656:1: ftPrimary : ( ftWords ( ftTimes )? | '(' ftSelection ')' | ftExtensionSelection );
    public final XQueryParser.ftPrimary_return ftPrimary() throws RecognitionException {
        XQueryParser.ftPrimary_return retval = new XQueryParser.ftPrimary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal799=null;
        Token char_literal801=null;
        XQueryParser.ftWords_return ftWords797 = null;

        XQueryParser.ftTimes_return ftTimes798 = null;

        XQueryParser.ftSelection_return ftSelection800 = null;

        XQueryParser.ftExtensionSelection_return ftExtensionSelection802 = null;


        Object char_literal799_tree=null;
        Object char_literal801_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1657:5: ( ftWords ( ftTimes )? | '(' ftSelection ')' | ftExtensionSelection )
            int alt207=3;
            switch ( input.LA(1) ) {
            case LCurly:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case QuotedStringLiteral:
            case AposedStringLiteral:
                {
                alt207=1;
                }
                break;
            case 408:
                {
                alt207=2;
                }
                break;
            case Pragma:
                {
                alt207=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1657:7: ftWords ( ftTimes )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftWords_in_ftPrimary14379);
                    ftWords797=ftWords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftWords797.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1657:15: ( ftTimes )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==OCCURS) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1657:15: ftTimes
                            {
                            pushFollow(FOLLOW_ftTimes_in_ftPrimary14381);
                            ftTimes798=ftTimes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftTimes798.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1658:7: '(' ftSelection ')'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal799=(Token)match(input,408,FOLLOW_408_in_ftPrimary14390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal799_tree = (Object)adaptor.create(char_literal799);
                    adaptor.addChild(root_0, char_literal799_tree);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftPrimary14392);
                    ftSelection800=ftSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftSelection800.getTree());
                    char_literal801=(Token)match(input,410,FOLLOW_410_in_ftPrimary14394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal801_tree = (Object)adaptor.create(char_literal801);
                    adaptor.addChild(root_0, char_literal801_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1659:7: ftExtensionSelection
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionSelection_in_ftPrimary14402);
                    ftExtensionSelection802=ftExtensionSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftExtensionSelection802.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftPrimary"

    public static class ftWords_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftWords"
    // org/brackit/xquery/compiler/parser/XQuery.g:1661:1: ftWords : ftWordsValue ( ftAnyAllOption )? ;
    public final XQueryParser.ftWords_return ftWords() throws RecognitionException {
        XQueryParser.ftWords_return retval = new XQueryParser.ftWords_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.ftWordsValue_return ftWordsValue803 = null;

        XQueryParser.ftAnyAllOption_return ftAnyAllOption804 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1662:5: ( ftWordsValue ( ftAnyAllOption )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:1662:7: ftWordsValue ( ftAnyAllOption )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ftWordsValue_in_ftWords14418);
            ftWordsValue803=ftWordsValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftWordsValue803.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1662:20: ( ftAnyAllOption )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==ANY||LA208_0==ALL||LA208_0==PHRASE) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1662:20: ftAnyAllOption
                    {
                    pushFollow(FOLLOW_ftAnyAllOption_in_ftWords14420);
                    ftAnyAllOption804=ftAnyAllOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftAnyAllOption804.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftWords"

    public static class ftWordsValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftWordsValue"
    // org/brackit/xquery/compiler/parser/XQuery.g:1664:1: ftWordsValue : ( literal | LCurly expr RCurly );
    public final XQueryParser.ftWordsValue_return ftWordsValue() throws RecognitionException {
        XQueryParser.ftWordsValue_return retval = new XQueryParser.ftWordsValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LCurly806=null;
        Token RCurly808=null;
        XQueryParser.literal_return literal805 = null;

        XQueryParser.expr_return expr807 = null;


        Object LCurly806_tree=null;
        Object RCurly808_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1665:5: ( literal | LCurly expr RCurly )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( ((LA209_0>=IntegerLiteral && LA209_0<=AposedStringLiteral)) ) {
                alt209=1;
            }
            else if ( (LA209_0==LCurly) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1665:7: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_ftWordsValue14437);
                    literal805=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal805.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1666:7: LCurly expr RCurly
                    {
                    root_0 = (Object)adaptor.nil();

                    LCurly806=(Token)match(input,LCurly,FOLLOW_LCurly_in_ftWordsValue14445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LCurly806_tree = (Object)adaptor.create(LCurly806);
                    adaptor.addChild(root_0, LCurly806_tree);
                    }
                    pushFollow(FOLLOW_expr_in_ftWordsValue14447);
                    expr807=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr807.getTree());
                    RCurly808=(Token)match(input,RCurly,FOLLOW_RCurly_in_ftWordsValue14449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RCurly808_tree = (Object)adaptor.create(RCurly808);
                    adaptor.addChild(root_0, RCurly808_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftWordsValue"

    public static class ftExtensionSelection_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftExtensionSelection"
    // org/brackit/xquery/compiler/parser/XQuery.g:1668:1: ftExtensionSelection : ( Pragma )+ LCurly ( ftSelection )? RCurly -> ^( Pragma ( ftSelection )? ) ;
    public final XQueryParser.ftExtensionSelection_return ftExtensionSelection() throws RecognitionException {
        XQueryParser.ftExtensionSelection_return retval = new XQueryParser.ftExtensionSelection_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token Pragma809=null;
        Token LCurly810=null;
        Token RCurly812=null;
        XQueryParser.ftSelection_return ftSelection811 = null;


        Object Pragma809_tree=null;
        Object LCurly810_tree=null;
        Object RCurly812_tree=null;
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleTokenStream stream_Pragma=new RewriteRuleTokenStream(adaptor,"token Pragma");
        RewriteRuleSubtreeStream stream_ftSelection=new RewriteRuleSubtreeStream(adaptor,"rule ftSelection");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1669:5: ( ( Pragma )+ LCurly ( ftSelection )? RCurly -> ^( Pragma ( ftSelection )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1669:7: ( Pragma )+ LCurly ( ftSelection )? RCurly
            {
            // org/brackit/xquery/compiler/parser/XQuery.g:1669:7: ( Pragma )+
            int cnt210=0;
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==Pragma) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1669:8: Pragma
            	    {
            	    if ( state.backtracking==0 ) {
            	       parsePragma(); 
            	    }
            	    Pragma809=(Token)match(input,Pragma,FOLLOW_Pragma_in_ftExtensionSelection14468); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Pragma.add(Pragma809);


            	    }
            	    break;

            	default :
            	    if ( cnt210 >= 1 ) break loop210;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(210, input);
                        throw eee;
                }
                cnt210++;
            } while (true);

            LCurly810=(Token)match(input,LCurly,FOLLOW_LCurly_in_ftExtensionSelection14472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly810);

            // org/brackit/xquery/compiler/parser/XQuery.g:1669:43: ( ftSelection )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==LCurly||LA211_0==Pragma||(LA211_0>=IntegerLiteral && LA211_0<=AposedStringLiteral)||LA211_0==FTNOT||LA211_0==408) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1669:43: ftSelection
                    {
                    pushFollow(FOLLOW_ftSelection_in_ftExtensionSelection14474);
                    ftSelection811=ftSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ftSelection.add(ftSelection811.getTree());

                    }
                    break;

            }

            RCurly812=(Token)match(input,RCurly,FOLLOW_RCurly_in_ftExtensionSelection14477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly812);



            // AST REWRITE
            // elements: Pragma, ftSelection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1669:63: -> ^( Pragma ( ftSelection )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1669:66: ^( Pragma ( ftSelection )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Pragma.nextNode(), root_1);

                // org/brackit/xquery/compiler/parser/XQuery.g:1669:75: ( ftSelection )?
                if ( stream_ftSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_ftSelection.nextTree());

                }
                stream_ftSelection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftExtensionSelection"

    public static class ftAnyAllOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftAnyAllOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1671:1: ftAnyAllOption : ( ANY ( WORD )? | ALL ( WORDS )? | PHRASE );
    public final XQueryParser.ftAnyAllOption_return ftAnyAllOption() throws RecognitionException {
        XQueryParser.ftAnyAllOption_return retval = new XQueryParser.ftAnyAllOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ANY813=null;
        Token WORD814=null;
        Token ALL815=null;
        Token WORDS816=null;
        Token PHRASE817=null;

        Object ANY813_tree=null;
        Object WORD814_tree=null;
        Object ALL815_tree=null;
        Object WORDS816_tree=null;
        Object PHRASE817_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1672:5: ( ANY ( WORD )? | ALL ( WORDS )? | PHRASE )
            int alt214=3;
            switch ( input.LA(1) ) {
            case ANY:
                {
                alt214=1;
                }
                break;
            case ALL:
                {
                alt214=2;
                }
                break;
            case PHRASE:
                {
                alt214=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }

            switch (alt214) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1672:7: ANY ( WORD )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ANY813=(Token)match(input,ANY,FOLLOW_ANY_in_ftAnyAllOption14502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY813_tree = (Object)adaptor.create(ANY813);
                    adaptor.addChild(root_0, ANY813_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1672:11: ( WORD )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==WORD) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1672:11: WORD
                            {
                            WORD814=(Token)match(input,WORD,FOLLOW_WORD_in_ftAnyAllOption14504); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WORD814_tree = (Object)adaptor.create(WORD814);
                            adaptor.addChild(root_0, WORD814_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1673:7: ALL ( WORDS )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ALL815=(Token)match(input,ALL,FOLLOW_ALL_in_ftAnyAllOption14513); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL815_tree = (Object)adaptor.create(ALL815);
                    adaptor.addChild(root_0, ALL815_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1673:11: ( WORDS )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==WORDS) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1673:11: WORDS
                            {
                            WORDS816=(Token)match(input,WORDS,FOLLOW_WORDS_in_ftAnyAllOption14515); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WORDS816_tree = (Object)adaptor.create(WORDS816);
                            adaptor.addChild(root_0, WORDS816_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1674:7: PHRASE
                    {
                    root_0 = (Object)adaptor.nil();

                    PHRASE817=(Token)match(input,PHRASE,FOLLOW_PHRASE_in_ftAnyAllOption14524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PHRASE817_tree = (Object)adaptor.create(PHRASE817);
                    adaptor.addChild(root_0, PHRASE817_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftAnyAllOption"

    public static class ftTimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftTimes"
    // org/brackit/xquery/compiler/parser/XQuery.g:1676:1: ftTimes : OCCURS ftRange TIMES ;
    public final XQueryParser.ftTimes_return ftTimes() throws RecognitionException {
        XQueryParser.ftTimes_return retval = new XQueryParser.ftTimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OCCURS818=null;
        Token TIMES820=null;
        XQueryParser.ftRange_return ftRange819 = null;


        Object OCCURS818_tree=null;
        Object TIMES820_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1677:5: ( OCCURS ftRange TIMES )
            // org/brackit/xquery/compiler/parser/XQuery.g:1677:7: OCCURS ftRange TIMES
            {
            root_0 = (Object)adaptor.nil();

            OCCURS818=(Token)match(input,OCCURS,FOLLOW_OCCURS_in_ftTimes14540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OCCURS818_tree = (Object)adaptor.create(OCCURS818);
            adaptor.addChild(root_0, OCCURS818_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftTimes14542);
            ftRange819=ftRange();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftRange819.getTree());
            TIMES820=(Token)match(input,TIMES,FOLLOW_TIMES_in_ftTimes14544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TIMES820_tree = (Object)adaptor.create(TIMES820);
            adaptor.addChild(root_0, TIMES820_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftTimes"

    public static class ftRange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftRange"
    // org/brackit/xquery/compiler/parser/XQuery.g:1679:1: ftRange : ( EXACTLY additiveExpr | AT LEAST additiveExpr | AT MOST additiveExpr | FROM additiveExpr TO additiveExpr );
    public final XQueryParser.ftRange_return ftRange() throws RecognitionException {
        XQueryParser.ftRange_return retval = new XQueryParser.ftRange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXACTLY821=null;
        Token AT823=null;
        Token LEAST824=null;
        Token AT826=null;
        Token MOST827=null;
        Token FROM829=null;
        Token TO831=null;
        XQueryParser.additiveExpr_return additiveExpr822 = null;

        XQueryParser.additiveExpr_return additiveExpr825 = null;

        XQueryParser.additiveExpr_return additiveExpr828 = null;

        XQueryParser.additiveExpr_return additiveExpr830 = null;

        XQueryParser.additiveExpr_return additiveExpr832 = null;


        Object EXACTLY821_tree=null;
        Object AT823_tree=null;
        Object LEAST824_tree=null;
        Object AT826_tree=null;
        Object MOST827_tree=null;
        Object FROM829_tree=null;
        Object TO831_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1680:5: ( EXACTLY additiveExpr | AT LEAST additiveExpr | AT MOST additiveExpr | FROM additiveExpr TO additiveExpr )
            int alt215=4;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt215=1;
                }
                break;
            case AT:
                {
                int LA215_2 = input.LA(2);

                if ( (LA215_2==LEAST) ) {
                    alt215=2;
                }
                else if ( (LA215_2==MOST) ) {
                    alt215=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 2, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                alt215=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }

            switch (alt215) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1680:7: EXACTLY additiveExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    EXACTLY821=(Token)match(input,EXACTLY,FOLLOW_EXACTLY_in_ftRange14560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXACTLY821_tree = (Object)adaptor.create(EXACTLY821);
                    adaptor.addChild(root_0, EXACTLY821_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange14563);
                    additiveExpr822=additiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpr822.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1681:7: AT LEAST additiveExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    AT823=(Token)match(input,AT,FOLLOW_AT_in_ftRange14571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT823_tree = (Object)adaptor.create(AT823);
                    adaptor.addChild(root_0, AT823_tree);
                    }
                    LEAST824=(Token)match(input,LEAST,FOLLOW_LEAST_in_ftRange14573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEAST824_tree = (Object)adaptor.create(LEAST824);
                    adaptor.addChild(root_0, LEAST824_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange14575);
                    additiveExpr825=additiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpr825.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1682:7: AT MOST additiveExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    AT826=(Token)match(input,AT,FOLLOW_AT_in_ftRange14583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT826_tree = (Object)adaptor.create(AT826);
                    adaptor.addChild(root_0, AT826_tree);
                    }
                    MOST827=(Token)match(input,MOST,FOLLOW_MOST_in_ftRange14585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOST827_tree = (Object)adaptor.create(MOST827);
                    adaptor.addChild(root_0, MOST827_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange14588);
                    additiveExpr828=additiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpr828.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1683:7: FROM additiveExpr TO additiveExpr
                    {
                    root_0 = (Object)adaptor.nil();

                    FROM829=(Token)match(input,FROM,FOLLOW_FROM_in_ftRange14596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FROM829_tree = (Object)adaptor.create(FROM829);
                    adaptor.addChild(root_0, FROM829_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange14602);
                    additiveExpr830=additiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpr830.getTree());
                    TO831=(Token)match(input,TO,FOLLOW_TO_in_ftRange14604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TO831_tree = (Object)adaptor.create(TO831);
                    adaptor.addChild(root_0, TO831_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange14606);
                    additiveExpr832=additiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpr832.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftRange"

    public static class ftPosFilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftPosFilter"
    // org/brackit/xquery/compiler/parser/XQuery.g:1685:1: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );
    public final XQueryParser.ftPosFilter_return ftPosFilter() throws RecognitionException {
        XQueryParser.ftPosFilter_return retval = new XQueryParser.ftPosFilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.ftOrder_return ftOrder833 = null;

        XQueryParser.ftWindow_return ftWindow834 = null;

        XQueryParser.ftDistance_return ftDistance835 = null;

        XQueryParser.ftScope_return ftScope836 = null;

        XQueryParser.ftContent_return ftContent837 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1686:5: ( ftOrder | ftWindow | ftDistance | ftScope | ftContent )
            int alt216=5;
            switch ( input.LA(1) ) {
            case ORDERED:
                {
                alt216=1;
                }
                break;
            case WINDOW:
                {
                alt216=2;
                }
                break;
            case DISTANCE:
                {
                alt216=3;
                }
                break;
            case SAME:
            case DIFFERENT:
                {
                alt216=4;
                }
                break;
            case AT:
            case ENTIRE:
                {
                alt216=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1686:7: ftOrder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftOrder_in_ftPosFilter14622);
                    ftOrder833=ftOrder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftOrder833.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1687:7: ftWindow
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftWindow_in_ftPosFilter14630);
                    ftWindow834=ftWindow();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftWindow834.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1688:7: ftDistance
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftDistance_in_ftPosFilter14638);
                    ftDistance835=ftDistance();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftDistance835.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1689:7: ftScope
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftScope_in_ftPosFilter14646);
                    ftScope836=ftScope();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftScope836.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1690:7: ftContent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftContent_in_ftPosFilter14654);
                    ftContent837=ftContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftContent837.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftPosFilter"

    public static class ftOrder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftOrder"
    // org/brackit/xquery/compiler/parser/XQuery.g:1692:1: ftOrder : ORDERED ;
    public final XQueryParser.ftOrder_return ftOrder() throws RecognitionException {
        XQueryParser.ftOrder_return retval = new XQueryParser.ftOrder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ORDERED838=null;

        Object ORDERED838_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1693:5: ( ORDERED )
            // org/brackit/xquery/compiler/parser/XQuery.g:1693:7: ORDERED
            {
            root_0 = (Object)adaptor.nil();

            ORDERED838=(Token)match(input,ORDERED,FOLLOW_ORDERED_in_ftOrder14670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDERED838_tree = (Object)adaptor.create(ORDERED838);
            adaptor.addChild(root_0, ORDERED838_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftOrder"

    public static class ftWindow_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftWindow"
    // org/brackit/xquery/compiler/parser/XQuery.g:1695:1: ftWindow : WINDOW additiveExpr ftUnit ;
    public final XQueryParser.ftWindow_return ftWindow() throws RecognitionException {
        XQueryParser.ftWindow_return retval = new XQueryParser.ftWindow_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WINDOW839=null;
        XQueryParser.additiveExpr_return additiveExpr840 = null;

        XQueryParser.ftUnit_return ftUnit841 = null;


        Object WINDOW839_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1696:5: ( WINDOW additiveExpr ftUnit )
            // org/brackit/xquery/compiler/parser/XQuery.g:1696:7: WINDOW additiveExpr ftUnit
            {
            root_0 = (Object)adaptor.nil();

            WINDOW839=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_ftWindow14686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WINDOW839_tree = (Object)adaptor.create(WINDOW839);
            adaptor.addChild(root_0, WINDOW839_tree);
            }
            pushFollow(FOLLOW_additiveExpr_in_ftWindow14688);
            additiveExpr840=additiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpr840.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftWindow14690);
            ftUnit841=ftUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftUnit841.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftWindow"

    public static class ftDistance_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftDistance"
    // org/brackit/xquery/compiler/parser/XQuery.g:1698:1: ftDistance : DISTANCE ftRange ftUnit ;
    public final XQueryParser.ftDistance_return ftDistance() throws RecognitionException {
        XQueryParser.ftDistance_return retval = new XQueryParser.ftDistance_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DISTANCE842=null;
        XQueryParser.ftRange_return ftRange843 = null;

        XQueryParser.ftUnit_return ftUnit844 = null;


        Object DISTANCE842_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1699:5: ( DISTANCE ftRange ftUnit )
            // org/brackit/xquery/compiler/parser/XQuery.g:1699:7: DISTANCE ftRange ftUnit
            {
            root_0 = (Object)adaptor.nil();

            DISTANCE842=(Token)match(input,DISTANCE,FOLLOW_DISTANCE_in_ftDistance14706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTANCE842_tree = (Object)adaptor.create(DISTANCE842);
            adaptor.addChild(root_0, DISTANCE842_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftDistance14708);
            ftRange843=ftRange();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftRange843.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftDistance14710);
            ftUnit844=ftUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftUnit844.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftDistance"

    public static class ftUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftUnit"
    // org/brackit/xquery/compiler/parser/XQuery.g:1701:1: ftUnit : ( WORDS | SENTENCES | PARAGRAPHS );
    public final XQueryParser.ftUnit_return ftUnit() throws RecognitionException {
        XQueryParser.ftUnit_return retval = new XQueryParser.ftUnit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set845=null;

        Object set845_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1702:5: ( WORDS | SENTENCES | PARAGRAPHS )
            // org/brackit/xquery/compiler/parser/XQuery.g:
            {
            root_0 = (Object)adaptor.nil();

            set845=(Token)input.LT(1);
            if ( input.LA(1)==WORDS||(input.LA(1)>=SENTENCES && input.LA(1)<=PARAGRAPHS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set845));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftUnit"

    public static class ftScope_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftScope"
    // org/brackit/xquery/compiler/parser/XQuery.g:1706:1: ftScope : ( SAME | DIFFERENT ) ftBigUnit ;
    public final XQueryParser.ftScope_return ftScope() throws RecognitionException {
        XQueryParser.ftScope_return retval = new XQueryParser.ftScope_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set846=null;
        XQueryParser.ftBigUnit_return ftBigUnit847 = null;


        Object set846_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1707:5: ( ( SAME | DIFFERENT ) ftBigUnit )
            // org/brackit/xquery/compiler/parser/XQuery.g:1707:7: ( SAME | DIFFERENT ) ftBigUnit
            {
            root_0 = (Object)adaptor.nil();

            set846=(Token)input.LT(1);
            if ( (input.LA(1)>=SAME && input.LA(1)<=DIFFERENT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set846));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_ftBigUnit_in_ftScope14766);
            ftBigUnit847=ftBigUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftBigUnit847.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftScope"

    public static class ftBigUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftBigUnit"
    // org/brackit/xquery/compiler/parser/XQuery.g:1709:1: ftBigUnit : ( SENTENCE | PARAGRAPH );
    public final XQueryParser.ftBigUnit_return ftBigUnit() throws RecognitionException {
        XQueryParser.ftBigUnit_return retval = new XQueryParser.ftBigUnit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set848=null;

        Object set848_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1710:5: ( SENTENCE | PARAGRAPH )
            // org/brackit/xquery/compiler/parser/XQuery.g:
            {
            root_0 = (Object)adaptor.nil();

            set848=(Token)input.LT(1);
            if ( (input.LA(1)>=SENTENCE && input.LA(1)<=PARAGRAPH) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set848));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftBigUnit"

    public static class ftContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftContent"
    // org/brackit/xquery/compiler/parser/XQuery.g:1713:1: ftContent : ( AT START | AT END | ENTIRE CONTENT );
    public final XQueryParser.ftContent_return ftContent() throws RecognitionException {
        XQueryParser.ftContent_return retval = new XQueryParser.ftContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT849=null;
        Token START850=null;
        Token AT851=null;
        Token END852=null;
        Token ENTIRE853=null;
        Token CONTENT854=null;

        Object AT849_tree=null;
        Object START850_tree=null;
        Object AT851_tree=null;
        Object END852_tree=null;
        Object ENTIRE853_tree=null;
        Object CONTENT854_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1714:5: ( AT START | AT END | ENTIRE CONTENT )
            int alt217=3;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==AT) ) {
                int LA217_1 = input.LA(2);

                if ( (LA217_1==START) ) {
                    alt217=1;
                }
                else if ( (LA217_1==END) ) {
                    alt217=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA217_0==ENTIRE) ) {
                alt217=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1714:7: AT START
                    {
                    root_0 = (Object)adaptor.nil();

                    AT849=(Token)match(input,AT,FOLLOW_AT_in_ftContent14806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT849_tree = (Object)adaptor.create(AT849);
                    adaptor.addChild(root_0, AT849_tree);
                    }
                    START850=(Token)match(input,START,FOLLOW_START_in_ftContent14808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    START850_tree = (Object)adaptor.create(START850);
                    adaptor.addChild(root_0, START850_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1715:7: AT END
                    {
                    root_0 = (Object)adaptor.nil();

                    AT851=(Token)match(input,AT,FOLLOW_AT_in_ftContent14816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT851_tree = (Object)adaptor.create(AT851);
                    adaptor.addChild(root_0, AT851_tree);
                    }
                    END852=(Token)match(input,END,FOLLOW_END_in_ftContent14818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    END852_tree = (Object)adaptor.create(END852);
                    adaptor.addChild(root_0, END852_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1716:7: ENTIRE CONTENT
                    {
                    root_0 = (Object)adaptor.nil();

                    ENTIRE853=(Token)match(input,ENTIRE,FOLLOW_ENTIRE_in_ftContent14826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENTIRE853_tree = (Object)adaptor.create(ENTIRE853);
                    adaptor.addChild(root_0, ENTIRE853_tree);
                    }
                    CONTENT854=(Token)match(input,CONTENT,FOLLOW_CONTENT_in_ftContent14828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTENT854_tree = (Object)adaptor.create(CONTENT854);
                    adaptor.addChild(root_0, CONTENT854_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftContent"

    public static class ftMatchOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftMatchOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1722:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopWordOption | ftExtensionOption );
    public final XQueryParser.ftMatchOption_return ftMatchOption() throws RecognitionException {
        XQueryParser.ftMatchOption_return retval = new XQueryParser.ftMatchOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.ftLanguageOption_return ftLanguageOption855 = null;

        XQueryParser.ftWildCardOption_return ftWildCardOption856 = null;

        XQueryParser.ftThesaurusOption_return ftThesaurusOption857 = null;

        XQueryParser.ftStemOption_return ftStemOption858 = null;

        XQueryParser.ftCaseOption_return ftCaseOption859 = null;

        XQueryParser.ftDiacriticsOption_return ftDiacriticsOption860 = null;

        XQueryParser.ftStopWordOption_return ftStopWordOption861 = null;

        XQueryParser.ftExtensionOption_return ftExtensionOption862 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1723:5: ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopWordOption | ftExtensionOption )
            int alt218=8;
            alt218 = dfa218.predict(input);
            switch (alt218) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1723:7: ftLanguageOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftLanguageOption_in_ftMatchOption14848);
                    ftLanguageOption855=ftLanguageOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftLanguageOption855.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1724:7: ftWildCardOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftWildCardOption_in_ftMatchOption14856);
                    ftWildCardOption856=ftWildCardOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftWildCardOption856.getTree());

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1725:7: ftThesaurusOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftThesaurusOption_in_ftMatchOption14864);
                    ftThesaurusOption857=ftThesaurusOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftThesaurusOption857.getTree());

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1726:7: ftStemOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftStemOption_in_ftMatchOption14872);
                    ftStemOption858=ftStemOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftStemOption858.getTree());

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1727:7: ftCaseOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftCaseOption_in_ftMatchOption14880);
                    ftCaseOption859=ftCaseOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftCaseOption859.getTree());

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1728:7: ftDiacriticsOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftDiacriticsOption_in_ftMatchOption14888);
                    ftDiacriticsOption860=ftDiacriticsOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftDiacriticsOption860.getTree());

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1729:7: ftStopWordOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftStopWordOption_in_ftMatchOption14896);
                    ftStopWordOption861=ftStopWordOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftStopWordOption861.getTree());

                    }
                    break;
                case 8 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1730:7: ftExtensionOption
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionOption_in_ftMatchOption14904);
                    ftExtensionOption862=ftExtensionOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftExtensionOption862.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftMatchOption"

    public static class ftCaseOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftCaseOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1732:1: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );
    public final XQueryParser.ftCaseOption_return ftCaseOption() throws RecognitionException {
        XQueryParser.ftCaseOption_return retval = new XQueryParser.ftCaseOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CASE863=null;
        Token INSENSITIVE864=null;
        Token CASE865=null;
        Token SENSITIVE866=null;
        Token LOWERCASE867=null;
        Token UPPERCASE868=null;

        Object CASE863_tree=null;
        Object INSENSITIVE864_tree=null;
        Object CASE865_tree=null;
        Object SENSITIVE866_tree=null;
        Object LOWERCASE867_tree=null;
        Object UPPERCASE868_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1733:5: ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE )
            int alt219=4;
            switch ( input.LA(1) ) {
            case CASE:
                {
                int LA219_1 = input.LA(2);

                if ( (LA219_1==INSENSITIVE) ) {
                    alt219=1;
                }
                else if ( (LA219_1==SENSITIVE) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 1, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                alt219=3;
                }
                break;
            case UPPERCASE:
                {
                alt219=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1733:7: CASE INSENSITIVE
                    {
                    root_0 = (Object)adaptor.nil();

                    CASE863=(Token)match(input,CASE,FOLLOW_CASE_in_ftCaseOption14920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE863_tree = (Object)adaptor.create(CASE863);
                    adaptor.addChild(root_0, CASE863_tree);
                    }
                    INSENSITIVE864=(Token)match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftCaseOption14922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSENSITIVE864_tree = (Object)adaptor.create(INSENSITIVE864);
                    adaptor.addChild(root_0, INSENSITIVE864_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1734:7: CASE SENSITIVE
                    {
                    root_0 = (Object)adaptor.nil();

                    CASE865=(Token)match(input,CASE,FOLLOW_CASE_in_ftCaseOption14930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE865_tree = (Object)adaptor.create(CASE865);
                    adaptor.addChild(root_0, CASE865_tree);
                    }
                    SENSITIVE866=(Token)match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftCaseOption14932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SENSITIVE866_tree = (Object)adaptor.create(SENSITIVE866);
                    adaptor.addChild(root_0, SENSITIVE866_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1735:7: LOWERCASE
                    {
                    root_0 = (Object)adaptor.nil();

                    LOWERCASE867=(Token)match(input,LOWERCASE,FOLLOW_LOWERCASE_in_ftCaseOption14940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOWERCASE867_tree = (Object)adaptor.create(LOWERCASE867);
                    adaptor.addChild(root_0, LOWERCASE867_tree);
                    }

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1736:7: UPPERCASE
                    {
                    root_0 = (Object)adaptor.nil();

                    UPPERCASE868=(Token)match(input,UPPERCASE,FOLLOW_UPPERCASE_in_ftCaseOption14948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UPPERCASE868_tree = (Object)adaptor.create(UPPERCASE868);
                    adaptor.addChild(root_0, UPPERCASE868_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftCaseOption"

    public static class ftDiacriticsOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftDiacriticsOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1738:1: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );
    public final XQueryParser.ftDiacriticsOption_return ftDiacriticsOption() throws RecognitionException {
        XQueryParser.ftDiacriticsOption_return retval = new XQueryParser.ftDiacriticsOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DIACRITICS869=null;
        Token INSENSITIVE870=null;
        Token DIACRITICS871=null;
        Token SENSITIVE872=null;

        Object DIACRITICS869_tree=null;
        Object INSENSITIVE870_tree=null;
        Object DIACRITICS871_tree=null;
        Object SENSITIVE872_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1739:5: ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==DIACRITICS) ) {
                int LA220_1 = input.LA(2);

                if ( (LA220_1==INSENSITIVE) ) {
                    alt220=1;
                }
                else if ( (LA220_1==SENSITIVE) ) {
                    alt220=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1739:7: DIACRITICS INSENSITIVE
                    {
                    root_0 = (Object)adaptor.nil();

                    DIACRITICS869=(Token)match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption14964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIACRITICS869_tree = (Object)adaptor.create(DIACRITICS869);
                    adaptor.addChild(root_0, DIACRITICS869_tree);
                    }
                    INSENSITIVE870=(Token)match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftDiacriticsOption14966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSENSITIVE870_tree = (Object)adaptor.create(INSENSITIVE870);
                    adaptor.addChild(root_0, INSENSITIVE870_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1740:7: DIACRITICS SENSITIVE
                    {
                    root_0 = (Object)adaptor.nil();

                    DIACRITICS871=(Token)match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption14974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIACRITICS871_tree = (Object)adaptor.create(DIACRITICS871);
                    adaptor.addChild(root_0, DIACRITICS871_tree);
                    }
                    SENSITIVE872=(Token)match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftDiacriticsOption14976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SENSITIVE872_tree = (Object)adaptor.create(SENSITIVE872);
                    adaptor.addChild(root_0, SENSITIVE872_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftDiacriticsOption"

    public static class ftStemOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftStemOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1742:1: ftStemOption : ( STEMMING | NO STEMMING );
    public final XQueryParser.ftStemOption_return ftStemOption() throws RecognitionException {
        XQueryParser.ftStemOption_return retval = new XQueryParser.ftStemOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STEMMING873=null;
        Token NO874=null;
        Token STEMMING875=null;

        Object STEMMING873_tree=null;
        Object NO874_tree=null;
        Object STEMMING875_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1743:5: ( STEMMING | NO STEMMING )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==STEMMING) ) {
                alt221=1;
            }
            else if ( (LA221_0==NO) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1743:10: STEMMING
                    {
                    root_0 = (Object)adaptor.nil();

                    STEMMING873=(Token)match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption14995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STEMMING873_tree = (Object)adaptor.create(STEMMING873);
                    adaptor.addChild(root_0, STEMMING873_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1744:7: NO STEMMING
                    {
                    root_0 = (Object)adaptor.nil();

                    NO874=(Token)match(input,NO,FOLLOW_NO_in_ftStemOption15003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NO874_tree = (Object)adaptor.create(NO874);
                    adaptor.addChild(root_0, NO874_tree);
                    }
                    STEMMING875=(Token)match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption15005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STEMMING875_tree = (Object)adaptor.create(STEMMING875);
                    adaptor.addChild(root_0, STEMMING875_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftStemOption"

    public static class ftThesaurusOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftThesaurusOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1746:1: ftThesaurusOption : ( THESAURUS ( ftThesaurusID | DEFAULT ) | THESAURUS '(' ( ftThesaurusID | DEFAULT ) ( ',' ftThesaurusID )* ')' | NO THESAURUS );
    public final XQueryParser.ftThesaurusOption_return ftThesaurusOption() throws RecognitionException {
        XQueryParser.ftThesaurusOption_return retval = new XQueryParser.ftThesaurusOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THESAURUS876=null;
        Token DEFAULT878=null;
        Token THESAURUS879=null;
        Token char_literal880=null;
        Token DEFAULT882=null;
        Token char_literal883=null;
        Token char_literal885=null;
        Token NO886=null;
        Token THESAURUS887=null;
        XQueryParser.ftThesaurusID_return ftThesaurusID877 = null;

        XQueryParser.ftThesaurusID_return ftThesaurusID881 = null;

        XQueryParser.ftThesaurusID_return ftThesaurusID884 = null;


        Object THESAURUS876_tree=null;
        Object DEFAULT878_tree=null;
        Object THESAURUS879_tree=null;
        Object char_literal880_tree=null;
        Object DEFAULT882_tree=null;
        Object char_literal883_tree=null;
        Object char_literal885_tree=null;
        Object NO886_tree=null;
        Object THESAURUS887_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1747:5: ( THESAURUS ( ftThesaurusID | DEFAULT ) | THESAURUS '(' ( ftThesaurusID | DEFAULT ) ( ',' ftThesaurusID )* ')' | NO THESAURUS )
            int alt225=3;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==THESAURUS) ) {
                int LA225_1 = input.LA(2);

                if ( (LA225_1==408) ) {
                    alt225=2;
                }
                else if ( (LA225_1==DEFAULT||LA225_1==AT) ) {
                    alt225=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 225, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA225_0==NO) ) {
                alt225=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1747:10: THESAURUS ( ftThesaurusID | DEFAULT )
                    {
                    root_0 = (Object)adaptor.nil();

                    THESAURUS876=(Token)match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption15024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THESAURUS876_tree = (Object)adaptor.create(THESAURUS876);
                    adaptor.addChild(root_0, THESAURUS876_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1747:24: ( ftThesaurusID | DEFAULT )
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==AT) ) {
                        alt222=1;
                    }
                    else if ( (LA222_0==DEFAULT) ) {
                        alt222=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 222, 0, input);

                        throw nvae;
                    }
                    switch (alt222) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1747:25: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption15031);
                            ftThesaurusID877=ftThesaurusID();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID877.getTree());

                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1747:41: DEFAULT
                            {
                            DEFAULT878=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption15035); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT878_tree = (Object)adaptor.create(DEFAULT878);
                            adaptor.addChild(root_0, DEFAULT878_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1748:10: THESAURUS '(' ( ftThesaurusID | DEFAULT ) ( ',' ftThesaurusID )* ')'
                    {
                    root_0 = (Object)adaptor.nil();

                    THESAURUS879=(Token)match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption15048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THESAURUS879_tree = (Object)adaptor.create(THESAURUS879);
                    adaptor.addChild(root_0, THESAURUS879_tree);
                    }
                    char_literal880=(Token)match(input,408,FOLLOW_408_in_ftThesaurusOption15050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal880_tree = (Object)adaptor.create(char_literal880);
                    adaptor.addChild(root_0, char_literal880_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1748:24: ( ftThesaurusID | DEFAULT )
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==AT) ) {
                        alt223=1;
                    }
                    else if ( (LA223_0==DEFAULT) ) {
                        alt223=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 223, 0, input);

                        throw nvae;
                    }
                    switch (alt223) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1748:25: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption15053);
                            ftThesaurusID881=ftThesaurusID();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID881.getTree());

                            }
                            break;
                        case 2 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1748:41: DEFAULT
                            {
                            DEFAULT882=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption15057); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT882_tree = (Object)adaptor.create(DEFAULT882);
                            adaptor.addChild(root_0, DEFAULT882_tree);
                            }

                            }
                            break;

                    }

                    // org/brackit/xquery/compiler/parser/XQuery.g:1748:50: ( ',' ftThesaurusID )*
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);

                        if ( (LA224_0==409) ) {
                            alt224=1;
                        }


                        switch (alt224) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1748:51: ',' ftThesaurusID
                    	    {
                    	    char_literal883=(Token)match(input,409,FOLLOW_409_in_ftThesaurusOption15061); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal883_tree = (Object)adaptor.create(char_literal883);
                    	    adaptor.addChild(root_0, char_literal883_tree);
                    	    }
                    	    pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption15063);
                    	    ftThesaurusID884=ftThesaurusID();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID884.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop224;
                        }
                    } while (true);

                    char_literal885=(Token)match(input,410,FOLLOW_410_in_ftThesaurusOption15067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal885_tree = (Object)adaptor.create(char_literal885);
                    adaptor.addChild(root_0, char_literal885_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1749:7: NO THESAURUS
                    {
                    root_0 = (Object)adaptor.nil();

                    NO886=(Token)match(input,NO,FOLLOW_NO_in_ftThesaurusOption15075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NO886_tree = (Object)adaptor.create(NO886);
                    adaptor.addChild(root_0, NO886_tree);
                    }
                    THESAURUS887=(Token)match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption15077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THESAURUS887_tree = (Object)adaptor.create(THESAURUS887);
                    adaptor.addChild(root_0, THESAURUS887_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftThesaurusOption"

    public static class ftThesaurusID_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftThesaurusID"
    // org/brackit/xquery/compiler/parser/XQuery.g:1751:1: ftThesaurusID : AT uriLiteral ( RELATIONSHIP stringLiteral )? ( ftRange LEVELS )? ;
    public final XQueryParser.ftThesaurusID_return ftThesaurusID() throws RecognitionException {
        XQueryParser.ftThesaurusID_return retval = new XQueryParser.ftThesaurusID_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT888=null;
        Token RELATIONSHIP890=null;
        Token LEVELS893=null;
        XQueryParser.uriLiteral_return uriLiteral889 = null;

        XQueryParser.stringLiteral_return stringLiteral891 = null;

        XQueryParser.ftRange_return ftRange892 = null;


        Object AT888_tree=null;
        Object RELATIONSHIP890_tree=null;
        Object LEVELS893_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1752:5: ( AT uriLiteral ( RELATIONSHIP stringLiteral )? ( ftRange LEVELS )? )
            // org/brackit/xquery/compiler/parser/XQuery.g:1752:7: AT uriLiteral ( RELATIONSHIP stringLiteral )? ( ftRange LEVELS )?
            {
            root_0 = (Object)adaptor.nil();

            AT888=(Token)match(input,AT,FOLLOW_AT_in_ftThesaurusID15093); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT888_tree = (Object)adaptor.create(AT888);
            adaptor.addChild(root_0, AT888_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_ftThesaurusID15095);
            uriLiteral889=uriLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, uriLiteral889.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1752:21: ( RELATIONSHIP stringLiteral )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==RELATIONSHIP) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1752:22: RELATIONSHIP stringLiteral
                    {
                    RELATIONSHIP890=(Token)match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_ftThesaurusID15098); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RELATIONSHIP890_tree = (Object)adaptor.create(RELATIONSHIP890);
                    adaptor.addChild(root_0, RELATIONSHIP890_tree);
                    }
                    pushFollow(FOLLOW_stringLiteral_in_ftThesaurusID15100);
                    stringLiteral891=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral891.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:1752:51: ( ftRange LEVELS )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==EXACTLY||LA227_0==FROM) ) {
                alt227=1;
            }
            else if ( (LA227_0==AT) ) {
                int LA227_2 = input.LA(2);

                if ( (LA227_2==LEAST||LA227_2==MOST) ) {
                    alt227=1;
                }
            }
            switch (alt227) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1752:52: ftRange LEVELS
                    {
                    pushFollow(FOLLOW_ftRange_in_ftThesaurusID15105);
                    ftRange892=ftRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftRange892.getTree());
                    LEVELS893=(Token)match(input,LEVELS,FOLLOW_LEVELS_in_ftThesaurusID15107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEVELS893_tree = (Object)adaptor.create(LEVELS893);
                    adaptor.addChild(root_0, LEVELS893_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftThesaurusID"

    public static class ftStopWordOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftStopWordOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1754:1: ftStopWordOption : ( STOP WORDS ftStopWords ( ftStopWordsInclExcl )* | NO STOP WORDS | STOP WORDS DEFAULT ( ftStopWordsInclExcl )* );
    public final XQueryParser.ftStopWordOption_return ftStopWordOption() throws RecognitionException {
        XQueryParser.ftStopWordOption_return retval = new XQueryParser.ftStopWordOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STOP894=null;
        Token WORDS895=null;
        Token NO898=null;
        Token STOP899=null;
        Token WORDS900=null;
        Token STOP901=null;
        Token WORDS902=null;
        Token DEFAULT903=null;
        XQueryParser.ftStopWords_return ftStopWords896 = null;

        XQueryParser.ftStopWordsInclExcl_return ftStopWordsInclExcl897 = null;

        XQueryParser.ftStopWordsInclExcl_return ftStopWordsInclExcl904 = null;


        Object STOP894_tree=null;
        Object WORDS895_tree=null;
        Object NO898_tree=null;
        Object STOP899_tree=null;
        Object WORDS900_tree=null;
        Object STOP901_tree=null;
        Object WORDS902_tree=null;
        Object DEFAULT903_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1755:5: ( STOP WORDS ftStopWords ( ftStopWordsInclExcl )* | NO STOP WORDS | STOP WORDS DEFAULT ( ftStopWordsInclExcl )* )
            int alt230=3;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==STOP) ) {
                int LA230_1 = input.LA(2);

                if ( (LA230_1==WORDS) ) {
                    int LA230_3 = input.LA(3);

                    if ( (LA230_3==DEFAULT) ) {
                        alt230=3;
                    }
                    else if ( (LA230_3==AT||LA230_3==408) ) {
                        alt230=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA230_0==NO) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1755:12: STOP WORDS ftStopWords ( ftStopWordsInclExcl )*
                    {
                    root_0 = (Object)adaptor.nil();

                    STOP894=(Token)match(input,STOP,FOLLOW_STOP_in_ftStopWordOption15130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STOP894_tree = (Object)adaptor.create(STOP894);
                    adaptor.addChild(root_0, STOP894_tree);
                    }
                    WORDS895=(Token)match(input,WORDS,FOLLOW_WORDS_in_ftStopWordOption15132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WORDS895_tree = (Object)adaptor.create(WORDS895);
                    adaptor.addChild(root_0, WORDS895_tree);
                    }
                    pushFollow(FOLLOW_ftStopWords_in_ftStopWordOption15134);
                    ftStopWords896=ftStopWords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftStopWords896.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1755:35: ( ftStopWordsInclExcl )*
                    loop228:
                    do {
                        int alt228=2;
                        int LA228_0 = input.LA(1);

                        if ( (LA228_0==UNION||LA228_0==EXCEPT) ) {
                            alt228=1;
                        }


                        switch (alt228) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1755:35: ftStopWordsInclExcl
                    	    {
                    	    pushFollow(FOLLOW_ftStopWordsInclExcl_in_ftStopWordOption15136);
                    	    ftStopWordsInclExcl897=ftStopWordsInclExcl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftStopWordsInclExcl897.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop228;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1756:7: NO STOP WORDS
                    {
                    root_0 = (Object)adaptor.nil();

                    NO898=(Token)match(input,NO,FOLLOW_NO_in_ftStopWordOption15145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NO898_tree = (Object)adaptor.create(NO898);
                    adaptor.addChild(root_0, NO898_tree);
                    }
                    STOP899=(Token)match(input,STOP,FOLLOW_STOP_in_ftStopWordOption15149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STOP899_tree = (Object)adaptor.create(STOP899);
                    adaptor.addChild(root_0, STOP899_tree);
                    }
                    WORDS900=(Token)match(input,WORDS,FOLLOW_WORDS_in_ftStopWordOption15151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WORDS900_tree = (Object)adaptor.create(WORDS900);
                    adaptor.addChild(root_0, WORDS900_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1757:7: STOP WORDS DEFAULT ( ftStopWordsInclExcl )*
                    {
                    root_0 = (Object)adaptor.nil();

                    STOP901=(Token)match(input,STOP,FOLLOW_STOP_in_ftStopWordOption15159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STOP901_tree = (Object)adaptor.create(STOP901);
                    adaptor.addChild(root_0, STOP901_tree);
                    }
                    WORDS902=(Token)match(input,WORDS,FOLLOW_WORDS_in_ftStopWordOption15161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WORDS902_tree = (Object)adaptor.create(WORDS902);
                    adaptor.addChild(root_0, WORDS902_tree);
                    }
                    DEFAULT903=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_ftStopWordOption15163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT903_tree = (Object)adaptor.create(DEFAULT903);
                    adaptor.addChild(root_0, DEFAULT903_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1757:26: ( ftStopWordsInclExcl )*
                    loop229:
                    do {
                        int alt229=2;
                        int LA229_0 = input.LA(1);

                        if ( (LA229_0==UNION||LA229_0==EXCEPT) ) {
                            alt229=1;
                        }


                        switch (alt229) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1757:26: ftStopWordsInclExcl
                    	    {
                    	    pushFollow(FOLLOW_ftStopWordsInclExcl_in_ftStopWordOption15165);
                    	    ftStopWordsInclExcl904=ftStopWordsInclExcl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ftStopWordsInclExcl904.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop229;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftStopWordOption"

    public static class ftStopWords_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftStopWords"
    // org/brackit/xquery/compiler/parser/XQuery.g:1759:1: ftStopWords : ( AT uriLiteral | '(' stringLiteral ( ',' stringLiteral )* ')' );
    public final XQueryParser.ftStopWords_return ftStopWords() throws RecognitionException {
        XQueryParser.ftStopWords_return retval = new XQueryParser.ftStopWords_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT905=null;
        Token char_literal907=null;
        Token char_literal909=null;
        Token char_literal911=null;
        XQueryParser.uriLiteral_return uriLiteral906 = null;

        XQueryParser.stringLiteral_return stringLiteral908 = null;

        XQueryParser.stringLiteral_return stringLiteral910 = null;


        Object AT905_tree=null;
        Object char_literal907_tree=null;
        Object char_literal909_tree=null;
        Object char_literal911_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1760:5: ( AT uriLiteral | '(' stringLiteral ( ',' stringLiteral )* ')' )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==AT) ) {
                alt232=1;
            }
            else if ( (LA232_0==408) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1760:7: AT uriLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    AT905=(Token)match(input,AT,FOLLOW_AT_in_ftStopWords15182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT905_tree = (Object)adaptor.create(AT905);
                    adaptor.addChild(root_0, AT905_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_ftStopWords15184);
                    uriLiteral906=uriLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uriLiteral906.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1761:7: '(' stringLiteral ( ',' stringLiteral )* ')'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal907=(Token)match(input,408,FOLLOW_408_in_ftStopWords15192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal907_tree = (Object)adaptor.create(char_literal907);
                    adaptor.addChild(root_0, char_literal907_tree);
                    }
                    pushFollow(FOLLOW_stringLiteral_in_ftStopWords15194);
                    stringLiteral908=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral908.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1761:25: ( ',' stringLiteral )*
                    loop231:
                    do {
                        int alt231=2;
                        int LA231_0 = input.LA(1);

                        if ( (LA231_0==409) ) {
                            alt231=1;
                        }


                        switch (alt231) {
                    	case 1 :
                    	    // org/brackit/xquery/compiler/parser/XQuery.g:1761:26: ',' stringLiteral
                    	    {
                    	    char_literal909=(Token)match(input,409,FOLLOW_409_in_ftStopWords15197); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal909_tree = (Object)adaptor.create(char_literal909);
                    	    adaptor.addChild(root_0, char_literal909_tree);
                    	    }
                    	    pushFollow(FOLLOW_stringLiteral_in_ftStopWords15199);
                    	    stringLiteral910=stringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral910.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop231;
                        }
                    } while (true);

                    char_literal911=(Token)match(input,410,FOLLOW_410_in_ftStopWords15203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal911_tree = (Object)adaptor.create(char_literal911);
                    adaptor.addChild(root_0, char_literal911_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftStopWords"

    public static class ftStopWordsInclExcl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftStopWordsInclExcl"
    // org/brackit/xquery/compiler/parser/XQuery.g:1763:1: ftStopWordsInclExcl : ( UNION | EXCEPT ) ftStopWords ;
    public final XQueryParser.ftStopWordsInclExcl_return ftStopWordsInclExcl() throws RecognitionException {
        XQueryParser.ftStopWordsInclExcl_return retval = new XQueryParser.ftStopWordsInclExcl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set912=null;
        XQueryParser.ftStopWords_return ftStopWords913 = null;


        Object set912_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1764:5: ( ( UNION | EXCEPT ) ftStopWords )
            // org/brackit/xquery/compiler/parser/XQuery.g:1764:7: ( UNION | EXCEPT ) ftStopWords
            {
            root_0 = (Object)adaptor.nil();

            set912=(Token)input.LT(1);
            if ( input.LA(1)==UNION||input.LA(1)==EXCEPT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set912));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_ftStopWords_in_ftStopWordsInclExcl15227);
            ftStopWords913=ftStopWords();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ftStopWords913.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftStopWordsInclExcl"

    public static class ftLanguageOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftLanguageOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1766:1: ftLanguageOption : LANGUAGE stringLiteral ;
    public final XQueryParser.ftLanguageOption_return ftLanguageOption() throws RecognitionException {
        XQueryParser.ftLanguageOption_return retval = new XQueryParser.ftLanguageOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LANGUAGE914=null;
        XQueryParser.stringLiteral_return stringLiteral915 = null;


        Object LANGUAGE914_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1767:5: ( LANGUAGE stringLiteral )
            // org/brackit/xquery/compiler/parser/XQuery.g:1767:7: LANGUAGE stringLiteral
            {
            root_0 = (Object)adaptor.nil();

            LANGUAGE914=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_ftLanguageOption15243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LANGUAGE914_tree = (Object)adaptor.create(LANGUAGE914);
            adaptor.addChild(root_0, LANGUAGE914_tree);
            }
            pushFollow(FOLLOW_stringLiteral_in_ftLanguageOption15245);
            stringLiteral915=stringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral915.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftLanguageOption"

    public static class ftWildCardOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftWildCardOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1769:1: ftWildCardOption : ( WILDCARDS | NO WILDCARDS );
    public final XQueryParser.ftWildCardOption_return ftWildCardOption() throws RecognitionException {
        XQueryParser.ftWildCardOption_return retval = new XQueryParser.ftWildCardOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WILDCARDS916=null;
        Token NO917=null;
        Token WILDCARDS918=null;

        Object WILDCARDS916_tree=null;
        Object NO917_tree=null;
        Object WILDCARDS918_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1770:5: ( WILDCARDS | NO WILDCARDS )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==WILDCARDS) ) {
                alt233=1;
            }
            else if ( (LA233_0==NO) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1770:10: WILDCARDS
                    {
                    root_0 = (Object)adaptor.nil();

                    WILDCARDS916=(Token)match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption15264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WILDCARDS916_tree = (Object)adaptor.create(WILDCARDS916);
                    adaptor.addChild(root_0, WILDCARDS916_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1771:7: NO WILDCARDS
                    {
                    root_0 = (Object)adaptor.nil();

                    NO917=(Token)match(input,NO,FOLLOW_NO_in_ftWildCardOption15272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NO917_tree = (Object)adaptor.create(NO917);
                    adaptor.addChild(root_0, NO917_tree);
                    }
                    WILDCARDS918=(Token)match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption15274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WILDCARDS918_tree = (Object)adaptor.create(WILDCARDS918);
                    adaptor.addChild(root_0, WILDCARDS918_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftWildCardOption"

    public static class ftExtensionOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftExtensionOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1773:1: ftExtensionOption : OPTION qName stringLiteral ;
    public final XQueryParser.ftExtensionOption_return ftExtensionOption() throws RecognitionException {
        XQueryParser.ftExtensionOption_return retval = new XQueryParser.ftExtensionOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OPTION919=null;
        XQueryParser.qName_return qName920 = null;

        XQueryParser.stringLiteral_return stringLiteral921 = null;


        Object OPTION919_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1774:5: ( OPTION qName stringLiteral )
            // org/brackit/xquery/compiler/parser/XQuery.g:1774:7: OPTION qName stringLiteral
            {
            root_0 = (Object)adaptor.nil();

            OPTION919=(Token)match(input,OPTION,FOLLOW_OPTION_in_ftExtensionOption15290); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPTION919_tree = (Object)adaptor.create(OPTION919);
            adaptor.addChild(root_0, OPTION919_tree);
            }
            pushFollow(FOLLOW_qName_in_ftExtensionOption15292);
            qName920=qName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qName920.getTree());
            pushFollow(FOLLOW_stringLiteral_in_ftExtensionOption15294);
            stringLiteral921=stringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral921.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftExtensionOption"

    public static class ftIgnoreOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ftIgnoreOption"
    // org/brackit/xquery/compiler/parser/XQuery.g:1776:1: ftIgnoreOption : WITHOUT CONTENT unionExpr ;
    public final XQueryParser.ftIgnoreOption_return ftIgnoreOption() throws RecognitionException {
        XQueryParser.ftIgnoreOption_return retval = new XQueryParser.ftIgnoreOption_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WITHOUT922=null;
        Token CONTENT923=null;
        XQueryParser.unionExpr_return unionExpr924 = null;


        Object WITHOUT922_tree=null;
        Object CONTENT923_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1777:5: ( WITHOUT CONTENT unionExpr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1777:7: WITHOUT CONTENT unionExpr
            {
            root_0 = (Object)adaptor.nil();

            WITHOUT922=(Token)match(input,WITHOUT,FOLLOW_WITHOUT_in_ftIgnoreOption15310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WITHOUT922_tree = (Object)adaptor.create(WITHOUT922);
            adaptor.addChild(root_0, WITHOUT922_tree);
            }
            CONTENT923=(Token)match(input,CONTENT,FOLLOW_CONTENT_in_ftIgnoreOption15312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTENT923_tree = (Object)adaptor.create(CONTENT923);
            adaptor.addChild(root_0, CONTENT923_tree);
            }
            pushFollow(FOLLOW_unionExpr_in_ftIgnoreOption15314);
            unionExpr924=unionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unionExpr924.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ftIgnoreOption"

    public static class contextItemDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "contextItemDecl"
    // org/brackit/xquery/compiler/parser/XQuery.g:1784:1: contextItemDecl : {...}? => DECLARE CONTEXT ITEM ( AS itemType )? ( ( ':=' varValue ) | ( EXTERNAL ( ':=' varDefaultValue )? ) ) ;
    public final XQueryParser.contextItemDecl_return contextItemDecl() throws RecognitionException {
        XQueryParser.contextItemDecl_return retval = new XQueryParser.contextItemDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE925=null;
        Token CONTEXT926=null;
        Token ITEM927=null;
        Token AS928=null;
        Token string_literal930=null;
        Token EXTERNAL932=null;
        Token string_literal933=null;
        XQueryParser.itemType_return itemType929 = null;

        XQueryParser.varValue_return varValue931 = null;

        XQueryParser.varDefaultValue_return varDefaultValue934 = null;


        Object DECLARE925_tree=null;
        Object CONTEXT926_tree=null;
        Object ITEM927_tree=null;
        Object AS928_tree=null;
        Object string_literal930_tree=null;
        Object EXTERNAL932_tree=null;
        Object string_literal933_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1785:5: ({...}? => DECLARE CONTEXT ITEM ( AS itemType )? ( ( ':=' varValue ) | ( EXTERNAL ( ':=' varDefaultValue )? ) ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1785:7: {...}? => DECLARE CONTEXT ITEM ( AS itemType )? ( ( ':=' varValue ) | ( EXTERNAL ( ':=' varDefaultValue )? ) )
            {
            root_0 = (Object)adaptor.nil();

            if ( !((xqVersion==XQUERY_3_0)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "contextItemDecl", "xqVersion==XQUERY_3_0");
            }
            DECLARE925=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_contextItemDecl15344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE925_tree = (Object)adaptor.create(DECLARE925);
            adaptor.addChild(root_0, DECLARE925_tree);
            }
            CONTEXT926=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextItemDecl15346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTEXT926_tree = (Object)adaptor.create(CONTEXT926);
            adaptor.addChild(root_0, CONTEXT926_tree);
            }
            ITEM927=(Token)match(input,ITEM,FOLLOW_ITEM_in_contextItemDecl15348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ITEM927_tree = (Object)adaptor.create(ITEM927);
            adaptor.addChild(root_0, ITEM927_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:1786:28: ( AS itemType )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==AS) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1786:29: AS itemType
                    {
                    AS928=(Token)match(input,AS,FOLLOW_AS_in_contextItemDecl15351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS928_tree = (Object)adaptor.create(AS928);
                    adaptor.addChild(root_0, AS928_tree);
                    }
                    pushFollow(FOLLOW_itemType_in_contextItemDecl15353);
                    itemType929=itemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, itemType929.getTree());

                    }
                    break;

            }

            // org/brackit/xquery/compiler/parser/XQuery.g:1787:7: ( ( ':=' varValue ) | ( EXTERNAL ( ':=' varDefaultValue )? ) )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==412) ) {
                alt236=1;
            }
            else if ( (LA236_0==EXTERNAL) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:8: ( ':=' varValue )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:8: ( ':=' varValue )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:9: ':=' varValue
                    {
                    string_literal930=(Token)match(input,412,FOLLOW_412_in_contextItemDecl15366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal930_tree = (Object)adaptor.create(string_literal930);
                    adaptor.addChild(root_0, string_literal930_tree);
                    }
                    pushFollow(FOLLOW_varValue_in_contextItemDecl15368);
                    varValue931=varValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varValue931.getTree());

                    }


                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:26: ( EXTERNAL ( ':=' varDefaultValue )? )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:26: ( EXTERNAL ( ':=' varDefaultValue )? )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:27: EXTERNAL ( ':=' varDefaultValue )?
                    {
                    EXTERNAL932=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_contextItemDecl15374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTERNAL932_tree = (Object)adaptor.create(EXTERNAL932);
                    adaptor.addChild(root_0, EXTERNAL932_tree);
                    }
                    // org/brackit/xquery/compiler/parser/XQuery.g:1787:36: ( ':=' varDefaultValue )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==412) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1787:37: ':=' varDefaultValue
                            {
                            string_literal933=(Token)match(input,412,FOLLOW_412_in_contextItemDecl15377); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal933_tree = (Object)adaptor.create(string_literal933);
                            adaptor.addChild(root_0, string_literal933_tree);
                            }
                            pushFollow(FOLLOW_varDefaultValue_in_contextItemDecl15379);
                            varDefaultValue934=varDefaultValue();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, varDefaultValue934.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "contextItemDecl"

    public static class tryCatchExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tryCatchExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1789:1: tryCatchExpr : tryClause ( catchClause )+ -> ^( TryCatchExpr tryClause ( catchClause )+ ) ;
    public final XQueryParser.tryCatchExpr_return tryCatchExpr() throws RecognitionException {
        XQueryParser.tryCatchExpr_return retval = new XQueryParser.tryCatchExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.tryClause_return tryClause935 = null;

        XQueryParser.catchClause_return catchClause936 = null;


        RewriteRuleSubtreeStream stream_tryClause=new RewriteRuleSubtreeStream(adaptor,"rule tryClause");
        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1790:5: ( tryClause ( catchClause )+ -> ^( TryCatchExpr tryClause ( catchClause )+ ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1790:7: tryClause ( catchClause )+
            {
            pushFollow(FOLLOW_tryClause_in_tryCatchExpr15399);
            tryClause935=tryClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tryClause.add(tryClause935.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1790:17: ( catchClause )+
            int cnt237=0;
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==CATCH) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1790:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_tryCatchExpr15401);
            	    catchClause936=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause936.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt237 >= 1 ) break loop237;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(237, input);
                        throw eee;
                }
                cnt237++;
            } while (true);



            // AST REWRITE
            // elements: tryClause, catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1790:30: -> ^( TryCatchExpr tryClause ( catchClause )+ )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1790:33: ^( TryCatchExpr tryClause ( catchClause )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TryCatchExpr, "TryCatchExpr"), root_1);

                adaptor.addChild(root_1, stream_tryClause.nextTree());
                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tryCatchExpr"

    public static class tryClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tryClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:1792:1: tryClause : TRY LCurly tryTargetExpr RCurly -> ^( TryClause tryTargetExpr ) ;
    public final XQueryParser.tryClause_return tryClause() throws RecognitionException {
        XQueryParser.tryClause_return retval = new XQueryParser.tryClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TRY937=null;
        Token LCurly938=null;
        Token RCurly940=null;
        XQueryParser.tryTargetExpr_return tryTargetExpr939 = null;


        Object TRY937_tree=null;
        Object LCurly938_tree=null;
        Object RCurly940_tree=null;
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_tryTargetExpr=new RewriteRuleSubtreeStream(adaptor,"rule tryTargetExpr");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1793:5: ( TRY LCurly tryTargetExpr RCurly -> ^( TryClause tryTargetExpr ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1793:7: TRY LCurly tryTargetExpr RCurly
            {
            TRY937=(Token)match(input,TRY,FOLLOW_TRY_in_tryClause15429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TRY.add(TRY937);

            LCurly938=(Token)match(input,LCurly,FOLLOW_LCurly_in_tryClause15431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly938);

            pushFollow(FOLLOW_tryTargetExpr_in_tryClause15433);
            tryTargetExpr939=tryTargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tryTargetExpr.add(tryTargetExpr939.getTree());
            RCurly940=(Token)match(input,RCurly,FOLLOW_RCurly_in_tryClause15435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly940);



            // AST REWRITE
            // elements: tryTargetExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1793:39: -> ^( TryClause tryTargetExpr )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1793:42: ^( TryClause tryTargetExpr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TryClause, "TryClause"), root_1);

                adaptor.addChild(root_1, stream_tryTargetExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tryClause"

    public static class tryTargetExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tryTargetExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1795:1: tryTargetExpr : expr ;
    public final XQueryParser.tryTargetExpr_return tryTargetExpr() throws RecognitionException {
        XQueryParser.tryTargetExpr_return retval = new XQueryParser.tryTargetExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.expr_return expr941 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1796:5: ( expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1796:7: expr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_in_tryTargetExpr15459);
            expr941=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr941.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tryTargetExpr"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // org/brackit/xquery/compiler/parser/XQuery.g:1798:1: catchClause : CATCH catchErrorList ( catchVars )? LCurly expr RCurly -> ^( CatchClause catchErrorList ( catchVars )? ) ;
    public final XQueryParser.catchClause_return catchClause() throws RecognitionException {
        XQueryParser.catchClause_return retval = new XQueryParser.catchClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CATCH942=null;
        Token LCurly945=null;
        Token RCurly947=null;
        XQueryParser.catchErrorList_return catchErrorList943 = null;

        XQueryParser.catchVars_return catchVars944 = null;

        XQueryParser.expr_return expr946 = null;


        Object CATCH942_tree=null;
        Object LCurly945_tree=null;
        Object RCurly947_tree=null;
        RewriteRuleTokenStream stream_CATCH=new RewriteRuleTokenStream(adaptor,"token CATCH");
        RewriteRuleTokenStream stream_RCurly=new RewriteRuleTokenStream(adaptor,"token RCurly");
        RewriteRuleTokenStream stream_LCurly=new RewriteRuleTokenStream(adaptor,"token LCurly");
        RewriteRuleSubtreeStream stream_catchErrorList=new RewriteRuleSubtreeStream(adaptor,"rule catchErrorList");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_catchVars=new RewriteRuleSubtreeStream(adaptor,"rule catchVars");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1799:5: ( CATCH catchErrorList ( catchVars )? LCurly expr RCurly -> ^( CatchClause catchErrorList ( catchVars )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1799:7: CATCH catchErrorList ( catchVars )? LCurly expr RCurly
            {
            CATCH942=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause15475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CATCH.add(CATCH942);

            pushFollow(FOLLOW_catchErrorList_in_catchClause15477);
            catchErrorList943=catchErrorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_catchErrorList.add(catchErrorList943.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1799:28: ( catchVars )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==408) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1799:28: catchVars
                    {
                    pushFollow(FOLLOW_catchVars_in_catchClause15479);
                    catchVars944=catchVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catchVars.add(catchVars944.getTree());

                    }
                    break;

            }

            LCurly945=(Token)match(input,LCurly,FOLLOW_LCurly_in_catchClause15482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCurly.add(LCurly945);

            pushFollow(FOLLOW_expr_in_catchClause15484);
            expr946=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr946.getTree());
            RCurly947=(Token)match(input,RCurly,FOLLOW_RCurly_in_catchClause15486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCurly.add(RCurly947);



            // AST REWRITE
            // elements: catchVars, catchErrorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1800:5: -> ^( CatchClause catchErrorList ( catchVars )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1800:8: ^( CatchClause catchErrorList ( catchVars )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CatchClause, "CatchClause"), root_1);

                adaptor.addChild(root_1, stream_catchErrorList.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1800:37: ( catchVars )?
                if ( stream_catchVars.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchVars.nextTree());

                }
                stream_catchVars.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class catchErrorList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchErrorList"
    // org/brackit/xquery/compiler/parser/XQuery.g:1802:1: catchErrorList : nameTest ( '|' nameTest )* -> ^( CatchErrorList ( nameTest )+ ) ;
    public final XQueryParser.catchErrorList_return catchErrorList() throws RecognitionException {
        XQueryParser.catchErrorList_return retval = new XQueryParser.catchErrorList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal949=null;
        XQueryParser.nameTest_return nameTest948 = null;

        XQueryParser.nameTest_return nameTest950 = null;


        Object char_literal949_tree=null;
        RewriteRuleTokenStream stream_416=new RewriteRuleTokenStream(adaptor,"token 416");
        RewriteRuleSubtreeStream stream_nameTest=new RewriteRuleSubtreeStream(adaptor,"rule nameTest");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1803:5: ( nameTest ( '|' nameTest )* -> ^( CatchErrorList ( nameTest )+ ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1803:7: nameTest ( '|' nameTest )*
            {
            pushFollow(FOLLOW_nameTest_in_catchErrorList15517);
            nameTest948=nameTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nameTest.add(nameTest948.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1803:16: ( '|' nameTest )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==416) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // org/brackit/xquery/compiler/parser/XQuery.g:1803:17: '|' nameTest
            	    {
            	    char_literal949=(Token)match(input,416,FOLLOW_416_in_catchErrorList15520); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_416.add(char_literal949);

            	    pushFollow(FOLLOW_nameTest_in_catchErrorList15522);
            	    nameTest950=nameTest();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nameTest.add(nameTest950.getTree());

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);



            // AST REWRITE
            // elements: nameTest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1803:32: -> ^( CatchErrorList ( nameTest )+ )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1803:35: ^( CatchErrorList ( nameTest )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CatchErrorList, "CatchErrorList"), root_1);

                if ( !(stream_nameTest.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nameTest.hasNext() ) {
                    adaptor.addChild(root_1, stream_nameTest.nextTree());

                }
                stream_nameTest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchErrorList"

    public static class catchVars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchVars"
    // org/brackit/xquery/compiler/parser/XQuery.g:1805:1: catchVars : '(' catchErrorCode ( ',' catchErrorDesc ( ',' catchErrorVal )? )? ')' -> ^( CatchVar catchErrorCode ( catchErrorDesc )? ( catchErrorVal )? ) ;
    public final XQueryParser.catchVars_return catchVars() throws RecognitionException {
        XQueryParser.catchVars_return retval = new XQueryParser.catchVars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal951=null;
        Token char_literal953=null;
        Token char_literal955=null;
        Token char_literal957=null;
        XQueryParser.catchErrorCode_return catchErrorCode952 = null;

        XQueryParser.catchErrorDesc_return catchErrorDesc954 = null;

        XQueryParser.catchErrorVal_return catchErrorVal956 = null;


        Object char_literal951_tree=null;
        Object char_literal953_tree=null;
        Object char_literal955_tree=null;
        Object char_literal957_tree=null;
        RewriteRuleTokenStream stream_409=new RewriteRuleTokenStream(adaptor,"token 409");
        RewriteRuleTokenStream stream_408=new RewriteRuleTokenStream(adaptor,"token 408");
        RewriteRuleTokenStream stream_410=new RewriteRuleTokenStream(adaptor,"token 410");
        RewriteRuleSubtreeStream stream_catchErrorDesc=new RewriteRuleSubtreeStream(adaptor,"rule catchErrorDesc");
        RewriteRuleSubtreeStream stream_catchErrorCode=new RewriteRuleSubtreeStream(adaptor,"rule catchErrorCode");
        RewriteRuleSubtreeStream stream_catchErrorVal=new RewriteRuleSubtreeStream(adaptor,"rule catchErrorVal");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1806:5: ( '(' catchErrorCode ( ',' catchErrorDesc ( ',' catchErrorVal )? )? ')' -> ^( CatchVar catchErrorCode ( catchErrorDesc )? ( catchErrorVal )? ) )
            // org/brackit/xquery/compiler/parser/XQuery.g:1806:7: '(' catchErrorCode ( ',' catchErrorDesc ( ',' catchErrorVal )? )? ')'
            {
            char_literal951=(Token)match(input,408,FOLLOW_408_in_catchVars15549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_408.add(char_literal951);

            pushFollow(FOLLOW_catchErrorCode_in_catchVars15551);
            catchErrorCode952=catchErrorCode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_catchErrorCode.add(catchErrorCode952.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1806:26: ( ',' catchErrorDesc ( ',' catchErrorVal )? )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==409) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1806:27: ',' catchErrorDesc ( ',' catchErrorVal )?
                    {
                    char_literal953=(Token)match(input,409,FOLLOW_409_in_catchVars15554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_409.add(char_literal953);

                    pushFollow(FOLLOW_catchErrorDesc_in_catchVars15556);
                    catchErrorDesc954=catchErrorDesc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catchErrorDesc.add(catchErrorDesc954.getTree());
                    // org/brackit/xquery/compiler/parser/XQuery.g:1806:46: ( ',' catchErrorVal )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==409) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // org/brackit/xquery/compiler/parser/XQuery.g:1806:47: ',' catchErrorVal
                            {
                            char_literal955=(Token)match(input,409,FOLLOW_409_in_catchVars15559); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_409.add(char_literal955);

                            pushFollow(FOLLOW_catchErrorVal_in_catchVars15561);
                            catchErrorVal956=catchErrorVal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catchErrorVal.add(catchErrorVal956.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal957=(Token)match(input,410,FOLLOW_410_in_catchVars15567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_410.add(char_literal957);



            // AST REWRITE
            // elements: catchErrorCode, catchErrorDesc, catchErrorVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1807:5: -> ^( CatchVar catchErrorCode ( catchErrorDesc )? ( catchErrorVal )? )
            {
                // org/brackit/xquery/compiler/parser/XQuery.g:1807:8: ^( CatchVar catchErrorCode ( catchErrorDesc )? ( catchErrorVal )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CatchVar, "CatchVar"), root_1);

                adaptor.addChild(root_1, stream_catchErrorCode.nextTree());
                // org/brackit/xquery/compiler/parser/XQuery.g:1807:34: ( catchErrorDesc )?
                if ( stream_catchErrorDesc.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchErrorDesc.nextTree());

                }
                stream_catchErrorDesc.reset();
                // org/brackit/xquery/compiler/parser/XQuery.g:1807:50: ( catchErrorVal )?
                if ( stream_catchErrorVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchErrorVal.nextTree());

                }
                stream_catchErrorVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchVars"

    public static class catchErrorCode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchErrorCode"
    // org/brackit/xquery/compiler/parser/XQuery.g:1809:1: catchErrorCode : '$' varName ;
    public final XQueryParser.catchErrorCode_return catchErrorCode() throws RecognitionException {
        XQueryParser.catchErrorCode_return retval = new XQueryParser.catchErrorCode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal958=null;
        XQueryParser.varName_return varName959 = null;


        Object char_literal958_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1810:5: ( '$' varName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1810:7: '$' varName
            {
            root_0 = (Object)adaptor.nil();

            char_literal958=(Token)match(input,411,FOLLOW_411_in_catchErrorCode15601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal958_tree = (Object)adaptor.create(char_literal958);
            adaptor.addChild(root_0, char_literal958_tree);
            }
            pushFollow(FOLLOW_varName_in_catchErrorCode15603);
            varName959=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName959.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchErrorCode"

    public static class catchErrorDesc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchErrorDesc"
    // org/brackit/xquery/compiler/parser/XQuery.g:1812:1: catchErrorDesc : '$' varName ;
    public final XQueryParser.catchErrorDesc_return catchErrorDesc() throws RecognitionException {
        XQueryParser.catchErrorDesc_return retval = new XQueryParser.catchErrorDesc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal960=null;
        XQueryParser.varName_return varName961 = null;


        Object char_literal960_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1813:5: ( '$' varName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1813:7: '$' varName
            {
            root_0 = (Object)adaptor.nil();

            char_literal960=(Token)match(input,411,FOLLOW_411_in_catchErrorDesc15619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal960_tree = (Object)adaptor.create(char_literal960);
            adaptor.addChild(root_0, char_literal960_tree);
            }
            pushFollow(FOLLOW_varName_in_catchErrorDesc15621);
            varName961=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName961.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchErrorDesc"

    public static class catchErrorVal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchErrorVal"
    // org/brackit/xquery/compiler/parser/XQuery.g:1815:1: catchErrorVal : '$' varName ;
    public final XQueryParser.catchErrorVal_return catchErrorVal() throws RecognitionException {
        XQueryParser.catchErrorVal_return retval = new XQueryParser.catchErrorVal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal962=null;
        XQueryParser.varName_return varName963 = null;


        Object char_literal962_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1816:5: ( '$' varName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1816:7: '$' varName
            {
            root_0 = (Object)adaptor.nil();

            char_literal962=(Token)match(input,411,FOLLOW_411_in_catchErrorVal15637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal962_tree = (Object)adaptor.create(char_literal962);
            adaptor.addChild(root_0, char_literal962_tree);
            }
            pushFollow(FOLLOW_varName_in_catchErrorVal15639);
            varName963=varName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varName963.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchErrorVal"

    public static class compNamespaceConstructor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compNamespaceConstructor"
    // org/brackit/xquery/compiler/parser/XQuery.g:1818:1: compNamespaceConstructor : NAMESPACE ( prefix | ( LCurly prefixExpr RCurly ) ) LCurly ( uriExpr )? RCurly ;
    public final XQueryParser.compNamespaceConstructor_return compNamespaceConstructor() throws RecognitionException {
        XQueryParser.compNamespaceConstructor_return retval = new XQueryParser.compNamespaceConstructor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NAMESPACE964=null;
        Token LCurly966=null;
        Token RCurly968=null;
        Token LCurly969=null;
        Token RCurly971=null;
        XQueryParser.prefix_return prefix965 = null;

        XQueryParser.prefixExpr_return prefixExpr967 = null;

        XQueryParser.uriExpr_return uriExpr970 = null;


        Object NAMESPACE964_tree=null;
        Object LCurly966_tree=null;
        Object RCurly968_tree=null;
        Object LCurly969_tree=null;
        Object RCurly971_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1819:5: ( NAMESPACE ( prefix | ( LCurly prefixExpr RCurly ) ) LCurly ( uriExpr )? RCurly )
            // org/brackit/xquery/compiler/parser/XQuery.g:1819:7: NAMESPACE ( prefix | ( LCurly prefixExpr RCurly ) ) LCurly ( uriExpr )? RCurly
            {
            root_0 = (Object)adaptor.nil();

            NAMESPACE964=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_compNamespaceConstructor15655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE964_tree = (Object)adaptor.create(NAMESPACE964);
            adaptor.addChild(root_0, NAMESPACE964_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:1819:17: ( prefix | ( LCurly prefixExpr RCurly ) )
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( ((LA242_0>=XQUERY && LA242_0<=ANCESTOR_OR_SELF)||(LA242_0>=DOCUMENT && LA242_0<=ITEM)||(LA242_0>=DOCUMENT_NODE && LA242_0<=WHILE)||(LA242_0>=NOT && LA242_0<=NCName)) ) {
                alt242=1;
            }
            else if ( (LA242_0==LCurly) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1819:18: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_compNamespaceConstructor15658);
                    prefix965=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefix965.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1819:27: ( LCurly prefixExpr RCurly )
                    {
                    // org/brackit/xquery/compiler/parser/XQuery.g:1819:27: ( LCurly prefixExpr RCurly )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1819:28: LCurly prefixExpr RCurly
                    {
                    LCurly966=(Token)match(input,LCurly,FOLLOW_LCurly_in_compNamespaceConstructor15663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LCurly966_tree = (Object)adaptor.create(LCurly966);
                    adaptor.addChild(root_0, LCurly966_tree);
                    }
                    pushFollow(FOLLOW_prefixExpr_in_compNamespaceConstructor15665);
                    prefixExpr967=prefixExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefixExpr967.getTree());
                    RCurly968=(Token)match(input,RCurly,FOLLOW_RCurly_in_compNamespaceConstructor15667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RCurly968_tree = (Object)adaptor.create(RCurly968);
                    adaptor.addChild(root_0, RCurly968_tree);
                    }

                    }


                    }
                    break;

            }

            LCurly969=(Token)match(input,LCurly,FOLLOW_LCurly_in_compNamespaceConstructor15671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCurly969_tree = (Object)adaptor.create(LCurly969);
            adaptor.addChild(root_0, LCurly969_tree);
            }
            // org/brackit/xquery/compiler/parser/XQuery.g:1819:62: ( uriExpr )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==LAngle||LA243_0==Pragma||(LA243_0>=XQUERY && LA243_0<=AposedStringLiteral)||(LA243_0>=DirCommentConstructor && LA243_0<=DirPIConstructor)||(LA243_0>=DOCUMENT && LA243_0<=WHILE)||(LA243_0>=NOT && LA243_0<=NCName)||LA243_0==408||LA243_0==411||(LA243_0>=413 && LA243_0<=415)||(LA243_0>=422 && LA243_0<=423)||(LA243_0>=425 && LA243_0<=426)||LA243_0==429) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1819:62: uriExpr
                    {
                    pushFollow(FOLLOW_uriExpr_in_compNamespaceConstructor15673);
                    uriExpr970=uriExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uriExpr970.getTree());

                    }
                    break;

            }

            RCurly971=(Token)match(input,RCurly,FOLLOW_RCurly_in_compNamespaceConstructor15676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCurly971_tree = (Object)adaptor.create(RCurly971);
            adaptor.addChild(root_0, RCurly971_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compNamespaceConstructor"

    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix"
    // org/brackit/xquery/compiler/parser/XQuery.g:1821:1: prefix : ncName ;
    public final XQueryParser.prefix_return prefix() throws RecognitionException {
        XQueryParser.prefix_return retval = new XQueryParser.prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.ncName_return ncName972 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1822:5: ( ncName )
            // org/brackit/xquery/compiler/parser/XQuery.g:1822:7: ncName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ncName_in_prefix15692);
            ncName972=ncName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ncName972.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix"

    public static class prefixExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1824:1: prefixExpr : expr ;
    public final XQueryParser.prefixExpr_return prefixExpr() throws RecognitionException {
        XQueryParser.prefixExpr_return retval = new XQueryParser.prefixExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.expr_return expr973 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1825:5: ( expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1825:7: expr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_in_prefixExpr15708);
            expr973=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr973.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefixExpr"

    public static class uriExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uriExpr"
    // org/brackit/xquery/compiler/parser/XQuery.g:1827:1: uriExpr : expr ;
    public final XQueryParser.uriExpr_return uriExpr() throws RecognitionException {
        XQueryParser.uriExpr_return retval = new XQueryParser.uriExpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        XQueryParser.expr_return expr974 = null;



        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1828:5: ( expr )
            // org/brackit/xquery/compiler/parser/XQuery.g:1828:7: expr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_in_uriExpr15724);
            expr974=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr974.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uriExpr"

    public static class namespaceNodeTest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespaceNodeTest"
    // org/brackit/xquery/compiler/parser/XQuery.g:1830:1: namespaceNodeTest : NAMESPACE_NODE '(' ')' ;
    public final XQueryParser.namespaceNodeTest_return namespaceNodeTest() throws RecognitionException {
        XQueryParser.namespaceNodeTest_return retval = new XQueryParser.namespaceNodeTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NAMESPACE_NODE975=null;
        Token char_literal976=null;
        Token char_literal977=null;

        Object NAMESPACE_NODE975_tree=null;
        Object char_literal976_tree=null;
        Object char_literal977_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1831:5: ( NAMESPACE_NODE '(' ')' )
            // org/brackit/xquery/compiler/parser/XQuery.g:1831:7: NAMESPACE_NODE '(' ')'
            {
            root_0 = (Object)adaptor.nil();

            NAMESPACE_NODE975=(Token)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_namespaceNodeTest15740); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE_NODE975_tree = (Object)adaptor.create(NAMESPACE_NODE975);
            adaptor.addChild(root_0, NAMESPACE_NODE975_tree);
            }
            char_literal976=(Token)match(input,408,FOLLOW_408_in_namespaceNodeTest15742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal976_tree = (Object)adaptor.create(char_literal976);
            adaptor.addChild(root_0, char_literal976_tree);
            }
            char_literal977=(Token)match(input,410,FOLLOW_410_in_namespaceNodeTest15744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal977_tree = (Object)adaptor.create(char_literal977);
            adaptor.addChild(root_0, char_literal977_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "namespaceNodeTest"

    public static class qName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1838:1: qName : ncn= ncName ( Colon local= ncName )? -> Qname[$qName.text] ;
    public final XQueryParser.qName_return qName() throws RecognitionException {
        XQueryParser.qName_return retval = new XQueryParser.qName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token Colon978=null;
        XQueryParser.ncName_return ncn = null;

        XQueryParser.ncName_return local = null;


        Object Colon978_tree=null;
        RewriteRuleTokenStream stream_Colon=new RewriteRuleTokenStream(adaptor,"token Colon");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1839:5: (ncn= ncName ( Colon local= ncName )? -> Qname[$qName.text] )
            // org/brackit/xquery/compiler/parser/XQuery.g:1839:7: ncn= ncName ( Colon local= ncName )?
            {
            pushFollow(FOLLOW_ncName_in_qName15766);
            ncn=ncName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ncName.add(ncn.getTree());
            // org/brackit/xquery/compiler/parser/XQuery.g:1841:6: ( Colon local= ncName )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==Colon) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1842:7: Colon local= ncName
                    {
                    Colon978=(Token)match(input,Colon,FOLLOW_Colon_in_qName15787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Colon.add(Colon978);

                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }
                    pushFollow(FOLLOW_ncName_in_qName15793);
                    local=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(local.getTree());
                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1846:3: -> Qname[$qName.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(Qname, input.toString(retval.start,input.LT(-1))));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qName"

    public static class eqName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eqName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1848:1: eqName : ( qName | ( uriLiteral ':' ncName ) );
    public final XQueryParser.eqName_return eqName() throws RecognitionException {
        XQueryParser.eqName_return retval = new XQueryParser.eqName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal981=null;
        XQueryParser.qName_return qName979 = null;

        XQueryParser.uriLiteral_return uriLiteral980 = null;

        XQueryParser.ncName_return ncName982 = null;


        Object char_literal981_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1849:5: ( qName | ( uriLiteral ':' ncName ) )
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( ((LA245_0>=XQUERY && LA245_0<=ANCESTOR_OR_SELF)||(LA245_0>=DOCUMENT && LA245_0<=ITEM)||(LA245_0>=DOCUMENT_NODE && LA245_0<=WHILE)||(LA245_0>=NOT && LA245_0<=NCName)) ) {
                alt245=1;
            }
            else if ( ((LA245_0>=QuotedStringLiteral && LA245_0<=AposedStringLiteral)) ) {
                alt245=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }
            switch (alt245) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1850:5: qName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_qName_in_eqName15844);
                    qName979=qName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qName979.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1850:13: ( uriLiteral ':' ncName )
                    {
                    root_0 = (Object)adaptor.nil();

                    // org/brackit/xquery/compiler/parser/XQuery.g:1850:13: ( uriLiteral ':' ncName )
                    // org/brackit/xquery/compiler/parser/XQuery.g:1850:14: uriLiteral ':' ncName
                    {
                    pushFollow(FOLLOW_uriLiteral_in_eqName15849);
                    uriLiteral980=uriLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uriLiteral980.getTree());
                    char_literal981=(Token)match(input,Colon,FOLLOW_Colon_in_eqName15851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal981_tree = (Object)adaptor.create(char_literal981);
                    adaptor.addChild(root_0, char_literal981_tree);
                    }
                    pushFollow(FOLLOW_ncName_in_eqName15853);
                    ncName982=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ncName982.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eqName"

    public static class fqName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fqName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1852:1: fqName : (ncn= ncName Colon ncName -> Qname[$fqName.text] | fncName -> Qname[$fncName.text] );
    public final XQueryParser.fqName_return fqName() throws RecognitionException {
        XQueryParser.fqName_return retval = new XQueryParser.fqName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token Colon983=null;
        XQueryParser.ncName_return ncn = null;

        XQueryParser.ncName_return ncName984 = null;

        XQueryParser.fncName_return fncName985 = null;


        Object Colon983_tree=null;
        RewriteRuleTokenStream stream_Colon=new RewriteRuleTokenStream(adaptor,"token Colon");
        RewriteRuleSubtreeStream stream_ncName=new RewriteRuleSubtreeStream(adaptor,"rule ncName");
        RewriteRuleSubtreeStream stream_fncName=new RewriteRuleSubtreeStream(adaptor,"rule fncName");
        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1853:5: (ncn= ncName Colon ncName -> Qname[$fqName.text] | fncName -> Qname[$fncName.text] )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( ((LA246_0>=XQUERY && LA246_0<=DEFAULT)||(LA246_0>=FUNCTION && LA246_0<=EVERY)||(LA246_0>=CASE && LA246_0<=AS)||(LA246_0>=THEN && LA246_0<=CONTAINS)||(LA246_0>=TO && LA246_0<=DESCENDANT)||(LA246_0>=SELF && LA246_0<=ANCESTOR_OR_SELF)||LA246_0==DOCUMENT||(LA246_0>=REVALIDATION && LA246_0<=INSERT)||(LA246_0>=NODES && LA246_0<=RETURNING)||(LA246_0>=NOT && LA246_0<=CATCH)||LA246_0==NCName) ) {
                int LA246_1 = input.LA(2);

                if ( (LA246_1==Colon) ) {
                    alt246=1;
                }
                else if ( (LA246_1==408) ) {
                    alt246=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA246_0==ELEMENT||LA246_0==TYPESWITCH||LA246_0==IF||LA246_0==TEXT||LA246_0==ATTRIBUTE||(LA246_0>=COMMENT && LA246_0<=ITEM)||(LA246_0>=DOCUMENT_NODE && LA246_0<=SCHEMA_ELEMENT)||LA246_0==NODE||LA246_0==WHILE||LA246_0==NAMESPACE_NODE) ) {
                alt246=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1853:7: ncn= ncName Colon ncName
                    {
                    pushFollow(FOLLOW_ncName_in_fqName15876);
                    ncn=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncn.getTree());
                    Colon983=(Token)match(input,Colon,FOLLOW_Colon_in_fqName15879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Colon.add(Colon983);

                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }
                    pushFollow(FOLLOW_ncName_in_fqName15883);
                    ncName984=ncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ncName.add(ncName984.getTree());
                    if ( state.backtracking==0 ) {
                      noSpaceBefore();
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1853:70: -> Qname[$fqName.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(Qname, input.toString(retval.start,input.LT(-1))));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1854:7: fncName
                    {
                    pushFollow(FOLLOW_fncName_in_fqName15898);
                    fncName985=fncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fncName.add(fncName985.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1854:15: -> Qname[$fncName.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(Qname, (fncName985!=null?input.toString(fncName985.start,fncName985.stop):null)));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fqName"

    public static class ncName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ncName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1856:1: ncName : ( fncName | ATTRIBUTE | COMMENT | DOCUMENT_NODE | ELEMENT | EMPTY_SEQUENCE | IF | ITEM | NODE | PROCESSING_INSTRUCTION | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | TEXT | TYPESWITCH | WHILE | NAMESPACE_NODE -> Str[$ncName.text] );
    public final XQueryParser.ncName_return ncName() throws RecognitionException {
        XQueryParser.ncName_return retval = new XQueryParser.ncName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ATTRIBUTE987=null;
        Token COMMENT988=null;
        Token DOCUMENT_NODE989=null;
        Token ELEMENT990=null;
        Token EMPTY_SEQUENCE991=null;
        Token IF992=null;
        Token ITEM993=null;
        Token NODE994=null;
        Token PROCESSING_INSTRUCTION995=null;
        Token SCHEMA_ATTRIBUTE996=null;
        Token SCHEMA_ELEMENT997=null;
        Token TEXT998=null;
        Token TYPESWITCH999=null;
        Token WHILE1000=null;
        Token NAMESPACE_NODE1001=null;
        XQueryParser.fncName_return fncName986 = null;


        Object ATTRIBUTE987_tree=null;
        Object COMMENT988_tree=null;
        Object DOCUMENT_NODE989_tree=null;
        Object ELEMENT990_tree=null;
        Object EMPTY_SEQUENCE991_tree=null;
        Object IF992_tree=null;
        Object ITEM993_tree=null;
        Object NODE994_tree=null;
        Object PROCESSING_INSTRUCTION995_tree=null;
        Object SCHEMA_ATTRIBUTE996_tree=null;
        Object SCHEMA_ELEMENT997_tree=null;
        Object TEXT998_tree=null;
        Object TYPESWITCH999_tree=null;
        Object WHILE1000_tree=null;
        Object NAMESPACE_NODE1001_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE_NODE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE_NODE");

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1857:5: ( fncName | ATTRIBUTE | COMMENT | DOCUMENT_NODE | ELEMENT | EMPTY_SEQUENCE | IF | ITEM | NODE | PROCESSING_INSTRUCTION | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | TEXT | TYPESWITCH | WHILE | NAMESPACE_NODE -> Str[$ncName.text] )
            int alt247=16;
            switch ( input.LA(1) ) {
            case XQUERY:
            case ENCODING:
            case VERSION:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case BOUNDARY_SPACE:
            case PRESERVE:
            case STRIP:
            case DEFAULT:
            case FUNCTION:
            case OPTION:
            case FT_OPTION:
            case USING:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case COPY_NAMESPACES:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAN:
            case PERCENT:
            case PER_MILLE:
            case ZERO_DIGIT:
            case DIGIT:
            case PATTERN_SEPARATOR:
            case NO_PRESERVE:
            case INHERIT:
            case NO_INHERIT:
            case COLLATION:
            case BASE_URI:
            case IMPORT:
            case SCHEMA:
            case AT:
            case EXTERNAL:
            case VARIABLE:
            case CONSTANT:
            case CONSTRUCTION:
            case SEQUENTIAL:
            case UPDATING:
            case SIMPLE:
            case DETERMINISTIC:
            case NONDETERMINISTIC:
            case FOR:
            case IN:
            case ALLOWING:
            case SCORE:
            case LET:
            case TUMBLING:
            case WINDOW:
            case SLIDING:
            case START:
            case WHEN:
            case ONLY:
            case END:
            case PREVIOUS:
            case NEXT:
            case COUNT:
            case WHERE:
            case GROUP:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case RETURN:
            case SOME:
            case SATISFIES:
            case EVERY:
            case CASE:
            case AS:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case CONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case DOCUMENT:
            case REVALIDATION:
            case SKIP:
            case FIRST:
            case LAST:
            case INTO:
            case AFTER:
            case BEFORE:
            case INSERT:
            case NODES:
            case DELETE:
            case REPLACE:
            case WITH:
            case VALUE:
            case RENAME:
            case COPY:
            case MODIFY:
            case SET:
            case BLOCK:
            case EXIT:
            case RETURNING:
            case NOT:
            case FTNOT:
            case WEIGHT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case DISTANCE:
            case SENTENCES:
            case PARAGRAPHS:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case ENTIRE:
            case CONTENT:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case STEMMING:
            case NO:
            case THESAURUS:
            case RELATIONSHIP:
            case LEVELS:
            case STOP:
            case LANGUAGE:
            case WILDCARDS:
            case WITHOUT:
            case CONTEXT:
            case TRY:
            case CATCH:
            case NCName:
                {
                alt247=1;
                }
                break;
            case ATTRIBUTE:
                {
                alt247=2;
                }
                break;
            case COMMENT:
                {
                alt247=3;
                }
                break;
            case DOCUMENT_NODE:
                {
                alt247=4;
                }
                break;
            case ELEMENT:
                {
                alt247=5;
                }
                break;
            case EMPTY_SEQUENCE:
                {
                alt247=6;
                }
                break;
            case IF:
                {
                alt247=7;
                }
                break;
            case ITEM:
                {
                alt247=8;
                }
                break;
            case NODE:
                {
                alt247=9;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt247=10;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt247=11;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt247=12;
                }
                break;
            case TEXT:
                {
                alt247=13;
                }
                break;
            case TYPESWITCH:
                {
                alt247=14;
                }
                break;
            case WHILE:
                {
                alt247=15;
                }
                break;
            case NAMESPACE_NODE:
                {
                alt247=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }

            switch (alt247) {
                case 1 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1857:7: fncName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fncName_in_ncName15919);
                    fncName986=fncName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fncName986.getTree());

                    }
                    break;
                case 2 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1859:7: ATTRIBUTE
                    {
                    root_0 = (Object)adaptor.nil();

                    ATTRIBUTE987=(Token)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_ncName15932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE987_tree = (Object)adaptor.create(ATTRIBUTE987);
                    adaptor.addChild(root_0, ATTRIBUTE987_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1860:7: COMMENT
                    {
                    root_0 = (Object)adaptor.nil();

                    COMMENT988=(Token)match(input,COMMENT,FOLLOW_COMMENT_in_ncName15940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMENT988_tree = (Object)adaptor.create(COMMENT988);
                    adaptor.addChild(root_0, COMMENT988_tree);
                    }

                    }
                    break;
                case 4 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1861:7: DOCUMENT_NODE
                    {
                    root_0 = (Object)adaptor.nil();

                    DOCUMENT_NODE989=(Token)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_ncName15948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOCUMENT_NODE989_tree = (Object)adaptor.create(DOCUMENT_NODE989);
                    adaptor.addChild(root_0, DOCUMENT_NODE989_tree);
                    }

                    }
                    break;
                case 5 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1862:7: ELEMENT
                    {
                    root_0 = (Object)adaptor.nil();

                    ELEMENT990=(Token)match(input,ELEMENT,FOLLOW_ELEMENT_in_ncName15956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELEMENT990_tree = (Object)adaptor.create(ELEMENT990);
                    adaptor.addChild(root_0, ELEMENT990_tree);
                    }

                    }
                    break;
                case 6 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1863:7: EMPTY_SEQUENCE
                    {
                    root_0 = (Object)adaptor.nil();

                    EMPTY_SEQUENCE991=(Token)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_ncName15964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EMPTY_SEQUENCE991_tree = (Object)adaptor.create(EMPTY_SEQUENCE991);
                    adaptor.addChild(root_0, EMPTY_SEQUENCE991_tree);
                    }

                    }
                    break;
                case 7 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1864:7: IF
                    {
                    root_0 = (Object)adaptor.nil();

                    IF992=(Token)match(input,IF,FOLLOW_IF_in_ncName15972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF992_tree = (Object)adaptor.create(IF992);
                    adaptor.addChild(root_0, IF992_tree);
                    }

                    }
                    break;
                case 8 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1865:7: ITEM
                    {
                    root_0 = (Object)adaptor.nil();

                    ITEM993=(Token)match(input,ITEM,FOLLOW_ITEM_in_ncName15980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ITEM993_tree = (Object)adaptor.create(ITEM993);
                    adaptor.addChild(root_0, ITEM993_tree);
                    }

                    }
                    break;
                case 9 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1866:7: NODE
                    {
                    root_0 = (Object)adaptor.nil();

                    NODE994=(Token)match(input,NODE,FOLLOW_NODE_in_ncName15988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NODE994_tree = (Object)adaptor.create(NODE994);
                    adaptor.addChild(root_0, NODE994_tree);
                    }

                    }
                    break;
                case 10 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1867:7: PROCESSING_INSTRUCTION
                    {
                    root_0 = (Object)adaptor.nil();

                    PROCESSING_INSTRUCTION995=(Token)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_ncName15996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROCESSING_INSTRUCTION995_tree = (Object)adaptor.create(PROCESSING_INSTRUCTION995);
                    adaptor.addChild(root_0, PROCESSING_INSTRUCTION995_tree);
                    }

                    }
                    break;
                case 11 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1868:7: SCHEMA_ATTRIBUTE
                    {
                    root_0 = (Object)adaptor.nil();

                    SCHEMA_ATTRIBUTE996=(Token)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_ncName16004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SCHEMA_ATTRIBUTE996_tree = (Object)adaptor.create(SCHEMA_ATTRIBUTE996);
                    adaptor.addChild(root_0, SCHEMA_ATTRIBUTE996_tree);
                    }

                    }
                    break;
                case 12 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1869:7: SCHEMA_ELEMENT
                    {
                    root_0 = (Object)adaptor.nil();

                    SCHEMA_ELEMENT997=(Token)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_ncName16012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SCHEMA_ELEMENT997_tree = (Object)adaptor.create(SCHEMA_ELEMENT997);
                    adaptor.addChild(root_0, SCHEMA_ELEMENT997_tree);
                    }

                    }
                    break;
                case 13 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1870:7: TEXT
                    {
                    root_0 = (Object)adaptor.nil();

                    TEXT998=(Token)match(input,TEXT,FOLLOW_TEXT_in_ncName16020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT998_tree = (Object)adaptor.create(TEXT998);
                    adaptor.addChild(root_0, TEXT998_tree);
                    }

                    }
                    break;
                case 14 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1871:7: TYPESWITCH
                    {
                    root_0 = (Object)adaptor.nil();

                    TYPESWITCH999=(Token)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_ncName16028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPESWITCH999_tree = (Object)adaptor.create(TYPESWITCH999);
                    adaptor.addChild(root_0, TYPESWITCH999_tree);
                    }

                    }
                    break;
                case 15 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1874:7: WHILE
                    {
                    root_0 = (Object)adaptor.nil();

                    WHILE1000=(Token)match(input,WHILE,FOLLOW_WHILE_in_ncName16046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE1000_tree = (Object)adaptor.create(WHILE1000);
                    adaptor.addChild(root_0, WHILE1000_tree);
                    }

                    }
                    break;
                case 16 :
                    // org/brackit/xquery/compiler/parser/XQuery.g:1875:7: NAMESPACE_NODE
                    {
                    NAMESPACE_NODE1001=(Token)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_ncName16109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE_NODE.add(NAMESPACE_NODE1001);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1876:2: -> Str[$ncName.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(Str, input.toString(retval.start,input.LT(-1))));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ncName"

    public static class fncName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fncName"
    // org/brackit/xquery/compiler/parser/XQuery.g:1878:1: fncName : ( NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CASTABLE | CAST | CHILD | COLLATION | CONSTRUCTION | COPY | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | INHERIT | IN | INSTANCE | INTERSECT | IS | LAX | LEAST | LE | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | ORDERED | ORDERING | ORDER | OR | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SIMPLE | SOME | STABLE | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | STRICT | AFTER | BEFORE | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | RETURNING | SEQUENTIAL | SET | ALL | ANY | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | END | ENTIRE | EXACTLY | FROM | CONTAINS | FTNOT | FT_OPTION | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | START | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WINDOW | WITHOUT | WORD | WORDS | CATCH | CONTEXT | DETERMINISTIC | NONDETERMINISTIC | TRY | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | PATTERN_SEPARATOR | PER_MILLE | PERCENT | ZERO_DIGIT | COUNT | GROUP | NEXT | ONLY | PREVIOUS | SLIDING | TUMBLING | WHEN | ALLOWING );
    public final XQueryParser.fncName_return fncName() throws RecognitionException {
        XQueryParser.fncName_return retval = new XQueryParser.fncName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set1002=null;

        Object set1002_tree=null;

        try {
            // org/brackit/xquery/compiler/parser/XQuery.g:1879:5: ( NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CASTABLE | CAST | CHILD | COLLATION | CONSTRUCTION | COPY | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | INHERIT | IN | INSTANCE | INTERSECT | IS | LAX | LEAST | LE | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | ORDERED | ORDERING | ORDER | OR | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SIMPLE | SOME | STABLE | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | STRICT | AFTER | BEFORE | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | RETURNING | SEQUENTIAL | SET | ALL | ANY | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | END | ENTIRE | EXACTLY | FROM | CONTAINS | FTNOT | FT_OPTION | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | START | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WINDOW | WITHOUT | WORD | WORDS | CATCH | CONTEXT | DETERMINISTIC | NONDETERMINISTIC | TRY | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | PATTERN_SEPARATOR | PER_MILLE | PERCENT | ZERO_DIGIT | COUNT | GROUP | NEXT | ONLY | PREVIOUS | SLIDING | TUMBLING | WHEN | ALLOWING )
            // org/brackit/xquery/compiler/parser/XQuery.g:
            {
            root_0 = (Object)adaptor.nil();

            set1002=(Token)input.LT(1);
            if ( (input.LA(1)>=XQUERY && input.LA(1)<=DEFAULT)||(input.LA(1)>=FUNCTION && input.LA(1)<=EVERY)||(input.LA(1)>=CASE && input.LA(1)<=AS)||(input.LA(1)>=THEN && input.LA(1)<=CONTAINS)||(input.LA(1)>=TO && input.LA(1)<=DESCENDANT)||(input.LA(1)>=SELF && input.LA(1)<=ANCESTOR_OR_SELF)||input.LA(1)==DOCUMENT||(input.LA(1)>=REVALIDATION && input.LA(1)<=INSERT)||(input.LA(1)>=NODES && input.LA(1)<=RETURNING)||(input.LA(1)>=NOT && input.LA(1)<=CATCH)||input.LA(1)==NCName ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1002));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException re) {
                throw re;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fncName"

    // $ANTLR start synpred1_XQuery
    public final void synpred1_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1008:7: ( ( '+' | '-' )+ valueExpr )
        // org/brackit/xquery/compiler/parser/XQuery.g:1008:8: ( '+' | '-' )+ valueExpr
        {
        // org/brackit/xquery/compiler/parser/XQuery.g:1008:8: ( '+' | '-' )+
        int cnt248=0;
        loop248:
        do {
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( ((LA248_0>=413 && LA248_0<=414)) ) {
                alt248=1;
            }


            switch (alt248) {
        	case 1 :
        	    // org/brackit/xquery/compiler/parser/XQuery.g:
        	    {
        	    if ( (input.LA(1)>=413 && input.LA(1)<=414) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt248 >= 1 ) break loop248;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(248, input);
                    throw eee;
            }
            cnt248++;
        } while (true);

        pushFollow(FOLLOW_valueExpr_in_synpred1_XQuery8826);
        valueExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_XQuery

    // $ANTLR start synpred2_XQuery
    public final void synpred2_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1067:7: ( '/' relativePathExpr )
        // org/brackit/xquery/compiler/parser/XQuery.g:1067:8: '/' relativePathExpr
        {
        match(input,422,FOLLOW_422_in_synpred2_XQuery9419); if (state.failed) return ;
        pushFollow(FOLLOW_relativePathExpr_in_synpred2_XQuery9421);
        relativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_XQuery

    // $ANTLR start synpred3_XQuery
    public final void synpred3_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1068:7: ( '//' relativePathExpr )
        // org/brackit/xquery/compiler/parser/XQuery.g:1068:8: '//' relativePathExpr
        {
        match(input,423,FOLLOW_423_in_synpred3_XQuery9440); if (state.failed) return ;
        pushFollow(FOLLOW_relativePathExpr_in_synpred3_XQuery9442);
        relativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_XQuery

    // $ANTLR start synpred4_XQuery
    public final void synpred4_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1069:7: ( '/' '*' )
        // org/brackit/xquery/compiler/parser/XQuery.g:1069:8: '/' '*'
        {
        match(input,422,FOLLOW_422_in_synpred4_XQuery9461); if (state.failed) return ;
        match(input,415,FOLLOW_415_in_synpred4_XQuery9470); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_XQuery

    // $ANTLR start synpred5_XQuery
    public final void synpred5_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1116:7: ( '@' )
        // org/brackit/xquery/compiler/parser/XQuery.g:1116:8: '@'
        {
        match(input,425,FOLLOW_425_in_synpred5_XQuery9920); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_XQuery

    // $ANTLR start synpred6_XQuery
    public final void synpred6_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1117:8: ( ( ATTRIBUTE | SCHEMA_ATTRIBUTE ) '(' )
        // org/brackit/xquery/compiler/parser/XQuery.g:1117:9: ( ATTRIBUTE | SCHEMA_ATTRIBUTE ) '('
        {
        if ( input.LA(1)==ATTRIBUTE||input.LA(1)==SCHEMA_ATTRIBUTE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        match(input,408,FOLLOW_408_in_synpred6_XQuery9955); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_XQuery

    // $ANTLR start synpred7_XQuery
    public final void synpred7_XQuery_fragment() throws RecognitionException {   
        // org/brackit/xquery/compiler/parser/XQuery.g:1430:19: ( occurrenceIndicator )
        // org/brackit/xquery/compiler/parser/XQuery.g:1430:20: occurrenceIndicator
        {
        pushFollow(FOLLOW_occurrenceIndicator_in_synpred7_XQuery12700);
        occurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_XQuery

    // Delegated rules

    public final boolean synpred5_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_XQuery() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_XQuery_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA218 dfa218 = new DFA218(this);
    static final String DFA5_eotS =
        "\14\uffff";
    static final String DFA5_eofS =
        "\1\2\1\12\1\uffff\1\12\10\uffff";
    static final String DFA5_minS =
        "\2\4\1\uffff\1\4\10\uffff";
    static final String DFA5_maxS =
        "\1\u01ad\1\u01ab\1\uffff\1\u01ab\10\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\2\1\uffff\1\2\5\1\1\2\1\1";
    static final String DFA5_specialS =
        "\1\uffff\1\0\12\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\2\41\uffff\1\2\u009a\uffff\5\2\1\1\41\2\1\3\125\2\1\uffff"+
            "\2\2\3\uffff\37\2\2\uffff\51\2\12\uffff\1\2\2\uffff\1\2\1\uffff"+
            "\3\2\6\uffff\2\2\1\uffff\2\2\2\uffff\1\2",
            "\2\12\4\uffff\2\12\u00b9\uffff\1\7\1\uffff\1\5\2\uffff\1\5"+
            "\1\uffff\1\12\1\2\1\10\1\uffff\1\5\6\uffff\1\5\1\11\16\uffff"+
            "\1\5\4\uffff\2\12\1\5\5\12\37\uffff\3\12\1\uffff\10\12\1\uffff"+
            "\12\12\43\uffff\1\6\73\uffff\1\4\14\uffff\4\12\3\uffff\13\12"+
            "\3\uffff\1\12",
            "",
            "\2\12\4\uffff\2\12\u00b8\uffff\1\13\44\uffff\1\13\51\uffff"+
            "\3\12\1\uffff\10\12\1\uffff\12\12\154\uffff\1\12\1\uffff\2\12"+
            "\3\uffff\13\12\3\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 367:7: ( prologPartOne )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_1==OPTION) ) {s = 2;}

                        else if ( (LA5_1==CONTEXT) && ((xqVersion==XQUERY_3_0))) {s = 4;}

                        else if ( (LA5_1==BOUNDARY_SPACE||LA5_1==DEFAULT||LA5_1==ORDERING||LA5_1==COPY_NAMESPACES||LA5_1==BASE_URI||LA5_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA5_1==REVALIDATION) && ((update))) {s = 6;}

                        else if ( (LA5_1==NAMESPACE) ) {s = 7;}

                        else if ( (LA5_1==FT_OPTION) && ((fullText))) {s = 8;}

                        else if ( (LA5_1==DECIMAL_FORMAT) && ((xqVersion==XQUERY_3_0))) {s = 9;}

                        else if ( (LA5_1==EOF||(LA5_1>=LAngle && LA5_1<=RAngle)||(LA5_1>=SymEq && LA5_1<=Colon)||LA5_1==FUNCTION||(LA5_1>=VARIABLE && LA5_1<=CONSTANT)||(LA5_1>=SEQUENTIAL && LA5_1<=NONDETERMINISTIC)||(LA5_1>=OR && LA5_1<=CONTAINS)||(LA5_1>=TO && LA5_1<=INSTANCE)||(LA5_1>=TREAT && LA5_1<=IS)||(LA5_1>=406 && LA5_1<=409)||(LA5_1>=413 && LA5_1<=423)||LA5_1==427) ) {s = 10;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\14\uffff";
    static final String DFA7_eofS =
        "\14\uffff";
    static final String DFA7_minS =
        "\1\u00c6\1\u00c5\1\uffff\1\u00cb\10\uffff";
    static final String DFA7_maxS =
        "\1\u00e8\1\u014d\1\uffff\1\u00e6\10\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\4\1\uffff\2\2\1\3\1\5\3\2\1\1";
    static final String DFA7_specialS =
        "\1\uffff\1\1\1\uffff\1\0\10\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\1\41\uffff\1\2",
            "\1\6\1\uffff\1\4\2\uffff\1\3\3\uffff\1\7\1\uffff\1\4\6\uffff"+
            "\1\4\1\10\16\uffff\1\4\6\uffff\1\4\136\uffff\1\5",
            "",
            "\2\13\6\uffff\1\11\4\uffff\1\12\15\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "374:6: ( defaultNamespaceDecl | setter | namespaceDecl | importDecl | ftOptionDecl )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA7_3==ORDER||LA7_3==COLLATION) ) {s = 9;}

                        else if ( (LA7_3==DECIMAL_FORMAT) && ((xqVersion==XQUERY_3_0))) {s = 10;}

                        else if ( ((LA7_3>=ELEMENT && LA7_3<=FUNCTION)) ) {s = 11;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA7_1==DEFAULT) ) {s = 3;}

                        else if ( (LA7_1==BOUNDARY_SPACE||LA7_1==ORDERING||LA7_1==COPY_NAMESPACES||LA7_1==BASE_URI||LA7_1==CONSTRUCTION) ) {s = 4;}

                        else if ( (LA7_1==REVALIDATION) && ((update))) {s = 5;}

                        else if ( (LA7_1==NAMESPACE) ) {s = 6;}

                        else if ( (LA7_1==FT_OPTION) && ((fullText))) {s = 7;}

                        else if ( (LA7_1==DECIMAL_FORMAT) && ((xqVersion==XQUERY_3_0))) {s = 8;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\14\uffff";
    static final String DFA13_eofS =
        "\14\uffff";
    static final String DFA13_minS =
        "\1\u00c6\1\u00c7\1\uffff\1\u00d3\10\uffff";
    static final String DFA13_maxS =
        "\1\u00c6\1\u014d\1\uffff\1\u00e6\10\uffff";
    static final String DFA13_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\7\1\10\1\11\1\2\1\6";
    static final String DFA13_specialS =
        "\1\uffff\1\0\1\uffff\1\1\10\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\1",
            "\1\2\2\uffff\1\3\5\uffff\1\6\6\uffff\1\7\1\11\16\uffff\1\4"+
            "\6\uffff\1\5\136\uffff\1\10",
            "",
            "\1\13\4\uffff\1\11\15\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "392:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl | {...}? => revalidationDecl | {...}? => decimalFormatDecl );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_1 = input.LA(1);

                         
                        int index13_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA13_1==BOUNDARY_SPACE) ) {s = 2;}

                        else if ( (LA13_1==DEFAULT) ) {s = 3;}

                        else if ( (LA13_1==BASE_URI) ) {s = 4;}

                        else if ( (LA13_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA13_1==ORDERING) ) {s = 6;}

                        else if ( (LA13_1==COPY_NAMESPACES) ) {s = 7;}

                        else if ( (LA13_1==REVALIDATION) && ((update))) {s = 8;}

                        else if ( (LA13_1==DECIMAL_FORMAT) && ((xqVersion==XQUERY_3_0))) {s = 9;}

                         
                        input.seek(index13_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA13_3==COLLATION) ) {s = 10;}

                        else if ( (LA13_3==ORDER) ) {s = 11;}

                        else if ( (LA13_3==DECIMAL_FORMAT) && ((xqVersion==XQUERY_3_0))) {s = 9;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\40\uffff";
    static final String DFA52_eofS =
        "\1\uffff\6\7\1\uffff\12\7\16\uffff";
    static final String DFA52_minS =
        "\7\4\1\uffff\12\4\16\uffff";
    static final String DFA52_maxS =
        "\1\u01ad\6\u01ac\1\uffff\12\u01ac\16\uffff";
    static final String DFA52_acceptS =
        "\7\uffff\1\5\12\uffff\1\1\1\2\1\3\1\4\1\16\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\17";
    static final String DFA52_specialS =
        "\10\uffff\1\4\1\0\1\6\1\3\1\10\1\5\1\1\1\2\1\11\1\7\16\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\7\41\uffff\1\7\u009a\uffff\63\7\1\1\3\7\1\2\21\7\1\3\1\7"+
            "\1\4\1\5\2\7\1\6\55\7\1\uffff\2\7\3\uffff\20\7\1\11\2\7\1\12"+
            "\1\14\2\7\1\13\1\15\1\7\1\17\1\16\1\20\1\7\1\10\2\uffff\45\7"+
            "\1\21\3\7\12\uffff\1\7\2\uffff\1\7\1\uffff\3\7\6\uffff\2\7\1"+
            "\uffff\2\7\2\uffff\1\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\1\22\1\uffff\1\22\1\7\1"+
            "\uffff\2\7\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2"+
            "\uffff\4\7\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1"+
            "\7\3\uffff\1\7\70\uffff\1\7\1\uffff\3\7\1\22\1\uffff\13\7\3"+
            "\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\2\uffff\1\22\1\7\3\uffff\1\7\1\uffff"+
            "\2\7\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff"+
            "\4\7\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\3\7\1\22\1\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\3\7\1\23\1\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\3\7\1\23\1\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\1\24\2\7\2\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\1\25\2\7\2\uffff\13\7\3\uffff\2\7",
            "",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\1\26\2\7\2\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\1\uffff\2\27\2\uffff"+
            "\1\7\3\uffff\1\7\70\uffff\1\7\1\uffff\3\7\2\uffff\13\7\3\uffff"+
            "\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\1\uffff\2\30\2\uffff"+
            "\1\7\3\uffff\1\7\70\uffff\1\7\1\uffff\3\7\2\uffff\13\7\3\uffff"+
            "\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\1\uffff\1\31\3\uffff"+
            "\1\7\3\uffff\1\7\70\uffff\1\7\1\uffff\3\7\2\uffff\13\7\3\uffff"+
            "\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\1\uffff\1\32\3\uffff"+
            "\1\7\1\32\2\uffff\1\7\70\uffff\1\7\1\uffff\3\7\2\uffff\13\7"+
            "\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\3\7\1\33\1\uffff\13\7\3\uffff\2\7",
            "\2\7\1\34\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21\uffff"+
            "\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7\2\uffff"+
            "\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7\1\uffff"+
            "\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff\1\7\70\uffff"+
            "\1\7\1\uffff\3\7\2\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\70\uffff\1\7\1\uffff\3\7\1\35\1\uffff\13\7\3\uffff\2\7",
            "\2\7\1\uffff\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21"+
            "\uffff\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7"+
            "\2\uffff\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7"+
            "\1\uffff\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff"+
            "\1\7\3\uffff\1\36\64\uffff\1\7\1\uffff\3\7\2\uffff\13\7\3\uffff"+
            "\2\7",
            "\2\7\1\37\1\7\2\uffff\2\7\u00be\uffff\1\7\10\uffff\2\7\21\uffff"+
            "\1\7\15\uffff\1\7\3\uffff\1\7\3\uffff\1\7\1\uffff\2\7\2\uffff"+
            "\3\7\1\uffff\4\7\1\uffff\1\7\2\uffff\2\7\2\uffff\4\7\1\uffff"+
            "\10\7\1\uffff\12\7\47\uffff\3\7\5\uffff\1\7\3\uffff\1\7\70\uffff"+
            "\1\7\1\uffff\3\7\2\uffff\13\7\3\uffff\2\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "619:1: exprSingle : ( flworExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr | {...}? => insertExpr | {...}? => deleteExpr | {...}? => renameExpr | {...}? => replaceExpr | {...}? => transformExpr | {...}? => blockExpr | {...}? => assignmentExpr | {...}? => exitExpr | {...}? => whileExpr | {...}? => tryCatchExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_9==EOF||(LA52_9>=LAngle && LA52_9<=RAngle)||LA52_9==RCurly||(LA52_9>=SymEq && LA52_9<=Colon)||LA52_9==DEFAULT||(LA52_9>=ORDER && LA52_9<=EMPTY)||LA52_9==COLLATION||LA52_9==FOR||LA52_9==LET||LA52_9==START||(LA52_9>=ONLY && LA52_9<=END)||(LA52_9>=COUNT && LA52_9<=GROUP)||(LA52_9>=STABLE && LA52_9<=RETURN)||LA52_9==SATISFIES||(LA52_9>=CASE && LA52_9<=AS)||(LA52_9>=ELSE && LA52_9<=CONTAINS)||(LA52_9>=TO && LA52_9<=INSTANCE)||(LA52_9>=TREAT && LA52_9<=IS)||(LA52_9>=INTO && LA52_9<=BEFORE)||LA52_9==WITH||LA52_9==MODIFY||LA52_9==406||(LA52_9>=408 && LA52_9<=410)||(LA52_9>=413 && LA52_9<=423)||(LA52_9>=427 && LA52_9<=428)) ) {s = 7;}

                        else if ( ((LA52_9>=NODE && LA52_9<=NODES)) && ((update))) {s = 23;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_14==EOF||(LA52_14>=LAngle && LA52_14<=RAngle)||LA52_14==RCurly||(LA52_14>=SymEq && LA52_14<=Colon)||LA52_14==DEFAULT||(LA52_14>=ORDER && LA52_14<=EMPTY)||LA52_14==COLLATION||LA52_14==FOR||LA52_14==LET||LA52_14==START||(LA52_14>=ONLY && LA52_14<=END)||(LA52_14>=COUNT && LA52_14<=GROUP)||(LA52_14>=STABLE && LA52_14<=RETURN)||LA52_14==SATISFIES||(LA52_14>=CASE && LA52_14<=AS)||(LA52_14>=ELSE && LA52_14<=CONTAINS)||(LA52_14>=TO && LA52_14<=INSTANCE)||(LA52_14>=TREAT && LA52_14<=IS)||(LA52_14>=INTO && LA52_14<=BEFORE)||LA52_14==WITH||LA52_14==MODIFY||LA52_14==406||(LA52_14>=408 && LA52_14<=410)||(LA52_14>=413 && LA52_14<=423)||(LA52_14>=427 && LA52_14<=428)) ) {s = 7;}

                        else if ( (LA52_14==LCurly) && ((scripting))) {s = 28;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_15==411) && ((scripting))) {s = 29;}

                        else if ( (LA52_15==EOF||(LA52_15>=LAngle && LA52_15<=RAngle)||LA52_15==RCurly||(LA52_15>=SymEq && LA52_15<=Colon)||LA52_15==DEFAULT||(LA52_15>=ORDER && LA52_15<=EMPTY)||LA52_15==COLLATION||LA52_15==FOR||LA52_15==LET||LA52_15==START||(LA52_15>=ONLY && LA52_15<=END)||(LA52_15>=COUNT && LA52_15<=GROUP)||(LA52_15>=STABLE && LA52_15<=RETURN)||LA52_15==SATISFIES||(LA52_15>=CASE && LA52_15<=AS)||(LA52_15>=ELSE && LA52_15<=CONTAINS)||(LA52_15>=TO && LA52_15<=INSTANCE)||(LA52_15>=TREAT && LA52_15<=IS)||(LA52_15>=INTO && LA52_15<=BEFORE)||LA52_15==WITH||LA52_15==MODIFY||LA52_15==406||(LA52_15>=408 && LA52_15<=410)||(LA52_15>=413 && LA52_15<=423)||(LA52_15>=427 && LA52_15<=428)) ) {s = 7;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_11==NODE) && ((update))) {s = 25;}

                        else if ( (LA52_11==EOF||(LA52_11>=LAngle && LA52_11<=RAngle)||LA52_11==RCurly||(LA52_11>=SymEq && LA52_11<=Colon)||LA52_11==DEFAULT||(LA52_11>=ORDER && LA52_11<=EMPTY)||LA52_11==COLLATION||LA52_11==FOR||LA52_11==LET||LA52_11==START||(LA52_11>=ONLY && LA52_11<=END)||(LA52_11>=COUNT && LA52_11<=GROUP)||(LA52_11>=STABLE && LA52_11<=RETURN)||LA52_11==SATISFIES||(LA52_11>=CASE && LA52_11<=AS)||(LA52_11>=ELSE && LA52_11<=CONTAINS)||(LA52_11>=TO && LA52_11<=INSTANCE)||(LA52_11>=TREAT && LA52_11<=IS)||(LA52_11>=INTO && LA52_11<=BEFORE)||LA52_11==WITH||LA52_11==MODIFY||LA52_11==406||(LA52_11>=408 && LA52_11<=410)||(LA52_11>=413 && LA52_11<=423)||(LA52_11>=427 && LA52_11<=428)) ) {s = 7;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_8==408) && ((scripting))) {s = 22;}

                        else if ( (LA52_8==EOF||(LA52_8>=LAngle && LA52_8<=RAngle)||LA52_8==RCurly||(LA52_8>=SymEq && LA52_8<=Colon)||LA52_8==DEFAULT||(LA52_8>=ORDER && LA52_8<=EMPTY)||LA52_8==COLLATION||LA52_8==FOR||LA52_8==LET||LA52_8==START||(LA52_8>=ONLY && LA52_8<=END)||(LA52_8>=COUNT && LA52_8<=GROUP)||(LA52_8>=STABLE && LA52_8<=RETURN)||LA52_8==SATISFIES||(LA52_8>=CASE && LA52_8<=AS)||(LA52_8>=ELSE && LA52_8<=CONTAINS)||(LA52_8>=TO && LA52_8<=INSTANCE)||(LA52_8>=TREAT && LA52_8<=IS)||(LA52_8>=INTO && LA52_8<=BEFORE)||LA52_8==WITH||LA52_8==MODIFY||LA52_8==406||(LA52_8>=409 && LA52_8<=410)||(LA52_8>=413 && LA52_8<=423)||(LA52_8>=427 && LA52_8<=428)) ) {s = 7;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_13==EOF||(LA52_13>=LAngle && LA52_13<=RAngle)||LA52_13==RCurly||(LA52_13>=SymEq && LA52_13<=Colon)||LA52_13==DEFAULT||(LA52_13>=ORDER && LA52_13<=EMPTY)||LA52_13==COLLATION||LA52_13==FOR||LA52_13==LET||LA52_13==START||(LA52_13>=ONLY && LA52_13<=END)||(LA52_13>=COUNT && LA52_13<=GROUP)||(LA52_13>=STABLE && LA52_13<=RETURN)||LA52_13==SATISFIES||(LA52_13>=CASE && LA52_13<=AS)||(LA52_13>=ELSE && LA52_13<=CONTAINS)||(LA52_13>=TO && LA52_13<=INSTANCE)||(LA52_13>=TREAT && LA52_13<=IS)||(LA52_13>=INTO && LA52_13<=BEFORE)||LA52_13==WITH||LA52_13==MODIFY||LA52_13==406||(LA52_13>=408 && LA52_13<=410)||(LA52_13>=413 && LA52_13<=423)||(LA52_13>=427 && LA52_13<=428)) ) {s = 7;}

                        else if ( (LA52_13==411) && ((update))) {s = 27;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_10==EOF||(LA52_10>=LAngle && LA52_10<=RAngle)||LA52_10==RCurly||(LA52_10>=SymEq && LA52_10<=Colon)||LA52_10==DEFAULT||(LA52_10>=ORDER && LA52_10<=EMPTY)||LA52_10==COLLATION||LA52_10==FOR||LA52_10==LET||LA52_10==START||(LA52_10>=ONLY && LA52_10<=END)||(LA52_10>=COUNT && LA52_10<=GROUP)||(LA52_10>=STABLE && LA52_10<=RETURN)||LA52_10==SATISFIES||(LA52_10>=CASE && LA52_10<=AS)||(LA52_10>=ELSE && LA52_10<=CONTAINS)||(LA52_10>=TO && LA52_10<=INSTANCE)||(LA52_10>=TREAT && LA52_10<=IS)||(LA52_10>=INTO && LA52_10<=BEFORE)||LA52_10==WITH||LA52_10==MODIFY||LA52_10==406||(LA52_10>=408 && LA52_10<=410)||(LA52_10>=413 && LA52_10<=423)||(LA52_10>=427 && LA52_10<=428)) ) {s = 7;}

                        else if ( ((LA52_10>=NODE && LA52_10<=NODES)) && ((update))) {s = 24;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_17==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 31;}

                        else if ( (LA52_17==EOF||(LA52_17>=LAngle && LA52_17<=RAngle)||LA52_17==RCurly||(LA52_17>=SymEq && LA52_17<=Colon)||LA52_17==DEFAULT||(LA52_17>=ORDER && LA52_17<=EMPTY)||LA52_17==COLLATION||LA52_17==FOR||LA52_17==LET||LA52_17==START||(LA52_17>=ONLY && LA52_17<=END)||(LA52_17>=COUNT && LA52_17<=GROUP)||(LA52_17>=STABLE && LA52_17<=RETURN)||LA52_17==SATISFIES||(LA52_17>=CASE && LA52_17<=AS)||(LA52_17>=ELSE && LA52_17<=CONTAINS)||(LA52_17>=TO && LA52_17<=INSTANCE)||(LA52_17>=TREAT && LA52_17<=IS)||(LA52_17>=INTO && LA52_17<=BEFORE)||LA52_17==WITH||LA52_17==MODIFY||LA52_17==406||(LA52_17>=408 && LA52_17<=410)||(LA52_17>=413 && LA52_17<=423)||(LA52_17>=427 && LA52_17<=428)) ) {s = 7;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_12==EOF||(LA52_12>=LAngle && LA52_12<=RAngle)||LA52_12==RCurly||(LA52_12>=SymEq && LA52_12<=Colon)||LA52_12==DEFAULT||(LA52_12>=ORDER && LA52_12<=EMPTY)||LA52_12==COLLATION||LA52_12==FOR||LA52_12==LET||LA52_12==START||(LA52_12>=ONLY && LA52_12<=END)||(LA52_12>=COUNT && LA52_12<=GROUP)||(LA52_12>=STABLE && LA52_12<=RETURN)||LA52_12==SATISFIES||(LA52_12>=CASE && LA52_12<=AS)||(LA52_12>=ELSE && LA52_12<=CONTAINS)||(LA52_12>=TO && LA52_12<=INSTANCE)||(LA52_12>=TREAT && LA52_12<=IS)||(LA52_12>=INTO && LA52_12<=BEFORE)||LA52_12==WITH||LA52_12==MODIFY||LA52_12==406||(LA52_12>=408 && LA52_12<=410)||(LA52_12>=413 && LA52_12<=423)||(LA52_12>=427 && LA52_12<=428)) ) {s = 7;}

                        else if ( (LA52_12==NODE||LA52_12==VALUE) && ((update))) {s = 26;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_16==RETURNING) && ((scripting))) {s = 30;}

                        else if ( (LA52_16==EOF||(LA52_16>=LAngle && LA52_16<=RAngle)||LA52_16==RCurly||(LA52_16>=SymEq && LA52_16<=Colon)||LA52_16==DEFAULT||(LA52_16>=ORDER && LA52_16<=EMPTY)||LA52_16==COLLATION||LA52_16==FOR||LA52_16==LET||LA52_16==START||(LA52_16>=ONLY && LA52_16<=END)||(LA52_16>=COUNT && LA52_16<=GROUP)||(LA52_16>=STABLE && LA52_16<=RETURN)||LA52_16==SATISFIES||(LA52_16>=CASE && LA52_16<=AS)||(LA52_16>=ELSE && LA52_16<=CONTAINS)||(LA52_16>=TO && LA52_16<=INSTANCE)||(LA52_16>=TREAT && LA52_16<=IS)||(LA52_16>=INTO && LA52_16<=BEFORE)||LA52_16==WITH||LA52_16==MODIFY||LA52_16==406||(LA52_16>=408 && LA52_16<=410)||(LA52_16>=413 && LA52_16<=423)||(LA52_16>=427 && LA52_16<=428)) ) {s = 7;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\64\uffff";
    static final String DFA123_eofS =
        "\64\uffff";
    static final String DFA123_minS =
        "\1\4\1\0\62\uffff";
    static final String DFA123_maxS =
        "\1\u01ad\1\0\62\uffff";
    static final String DFA123_acceptS =
        "\2\uffff\1\2\1\5\55\uffff\1\1\1\3\1\4";
    static final String DFA123_specialS =
        "\1\0\1\1\62\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\3\u00bc\uffff\175\3\1\uffff\2\3\3\uffff\37\3\2\uffff\51\3"+
            "\12\uffff\1\3\2\uffff\1\3\3\uffff\1\3\6\uffff\1\1\1\2\1\uffff"+
            "\2\3\2\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "1061:1: pathExpr : ( ( '/' relativePathExpr )=> '/' relativePathExpr | ( '//' relativePathExpr )=> '//' relativePathExpr | ( '/' '*' )=> '/' '*' | '/' -> ^( TreatExpr ^( FunctionCall[\"fn:root\"] ^( StepExpr ^( AxisSpec SELF[\"self\"] ) KindTestAnyKind ) ) ^( SequenceType KindTestDocument ) ) | relativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_0 = input.LA(1);

                         
                        int index123_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA123_0==422) ) {s = 1;}

                        else if ( (LA123_0==423) && (synpred3_XQuery())) {s = 2;}

                        else if ( (LA123_0==LAngle||(LA123_0>=XQUERY && LA123_0<=AposedStringLiteral)||(LA123_0>=DirCommentConstructor && LA123_0<=DirPIConstructor)||(LA123_0>=DOCUMENT && LA123_0<=WHILE)||(LA123_0>=NOT && LA123_0<=NCName)||LA123_0==408||LA123_0==411||LA123_0==415||(LA123_0>=425 && LA123_0<=426)||LA123_0==429) ) {s = 3;}

                         
                        input.seek(index123_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQuery()) ) {s = 49;}

                        else if ( (synpred4_XQuery()) ) {s = 50;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\u011c\uffff";
    static final String DFA126_eofS =
        "\1\uffff\7\10\1\uffff\7\10\15\u00cf\1\uffff\4\u00cf\60\uffff\1\u00cf"+
        "\6\uffff\3\u00cf\57\uffff\1\u00cf\6\uffff\3\u00cf\57\uffff\1\u00cf"+
        "\6\uffff\3\u00cf\62\uffff\1\u00cf\6\uffff\3\u00cf\1\uffff\20\u00cf"+
        "\1\uffff";
    static final String DFA126_minS =
        "\10\4\1\uffff\24\4\1\uffff\4\4\1\u00c1\4\6\7\4\1\6\11\4\2\6\1\4"+
        "\4\6\1\4\7\6\1\4\2\6\7\4\1\6\2\4\5\6\3\4\4\6\7\4\1\6\11\4\2\6\1"+
        "\4\4\6\1\4\7\6\1\4\2\6\7\4\1\6\2\4\5\6\3\4\4\6\7\4\1\6\11\4\2\6"+
        "\1\4\4\6\1\4\7\6\1\4\2\6\7\4\1\6\2\4\5\6\3\4\2\uffff\1\6\1\uffff"+
        "\3\6\7\4\1\6\11\4\2\6\1\4\4\6\1\4\7\6\1\4\2\6\7\4\1\6\2\4\5\6\3"+
        "\4\1\uffff\20\4\1\uffff";
    static final String DFA126_maxS =
        "\1\u01ad\7\u01ac\1\uffff\24\u01ac\1\uffff\4\u01ac\1\u019f\3\u010f"+
        "\1\u011f\7\u01ad\1\u0116\11\u01ad\2\u019b\1\u01ad\2\u0105\1\u00d3"+
        "\1\u019b\1\u01ad\1\u019b\1\u00ff\1\u019b\2\u0199\1\u00d6\1\u013d"+
        "\1\u01ad\2\u019b\7\u01ad\1\u00f5\1\u01ac\1\u01ad\1\u0171\1\u0178"+
        "\1\u00ff\2\u017a\3\u01ac\3\u010f\1\u011f\7\u01ad\1\u0116\11\u01ad"+
        "\2\u019b\1\u01ad\2\u0105\1\u00d3\1\u019b\1\u01ad\1\u019b\1\u00ff"+
        "\1\u019b\2\u0199\1\u00d6\1\u013d\1\u01ad\2\u019b\7\u01ad\1\u00f5"+
        "\1\u01ac\1\u01ad\1\u0171\1\u0178\1\u00ff\2\u017a\3\u01ac\3\u010f"+
        "\1\u011f\7\u01ad\1\u0116\11\u01ad\2\u019b\1\u01ad\2\u0105\1\u00d3"+
        "\1\u019b\1\u01ad\1\u019b\1\u00ff\1\u019b\2\u0199\1\u00d6\1\u013d"+
        "\1\u01ad\2\u019b\7\u01ad\1\u00f5\1\u01ac\1\u01ad\1\u0171\1\u0178"+
        "\1\u00ff\2\u017a\3\u01ac\2\uffff\1\u010f\1\uffff\2\u010f\1\u011f"+
        "\7\u01ad\1\u0116\11\u01ad\2\u019b\1\u01ad\2\u0105\1\u00d3\1\u019b"+
        "\1\u01ad\1\u019b\1\u00ff\1\u019b\2\u0199\1\u00d6\1\u013d\1\u01ad"+
        "\2\u019b\7\u01ad\1\u00f5\1\u01ac\1\u01ad\1\u0171\1\u0178\1\u00ff"+
        "\2\u017a\3\u01ac\1\uffff\20\u01ac\1\uffff";
    static final String DFA126_acceptS =
        "\10\uffff\1\1\24\uffff\1\2\u00b0\uffff\2\1\1\uffff\1\2\70\uffff"+
        "\1\2\20\uffff\1\2";
    static final String DFA126_specialS =
        "\20\uffff\1\66\17\uffff\1\32\u00af\uffff\1\63\1\uffff\1\62\1\72"+
        "\1\65\1\51\1\52\1\35\1\37\1\30\1\22\1\70\1\42\1\5\1\0\1\1\1\2\1"+
        "\3\1\7\1\11\1\46\1\44\1\15\1\13\1\24\1\10\1\40\1\41\1\12\1\36\1"+
        "\6\1\53\1\71\1\56\1\57\1\16\1\20\1\54\1\34\1\64\1\61\1\45\1\31\1"+
        "\26\1\27\1\50\1\60\1\33\1\14\1\17\1\67\1\43\1\47\1\55\1\21\1\4\1"+
        "\23\1\25\22\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\35\u00bc\uffff\4\41\1\40\5\41\1\12\5\41\1\34\1\36\72\41\1"+
            "\26\2\41\1\23\5\41\1\17\26\41\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1"+
            "\21\1\30\1\31\1\32\1\33\5\35\1\uffff\2\35\3\uffff\1\37\1\16"+
            "\1\15\1\22\1\24\1\10\1\11\1\14\1\13\10\41\1\25\14\41\1\27\2"+
            "\uffff\47\41\1\20\1\41\12\uffff\1\35\2\uffff\1\35\3\uffff\1"+
            "\10\11\uffff\2\10\2\uffff\1\35",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\1\35\2\10\2\uffff\14\10\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\1\35\2\10\2\uffff\14\10\2\uffff\2\10",
            "\2\10\1\35\1\10\2\uffff\1\10\1\42\u00b5\uffff\11\35\1\110\6"+
            "\35\1\122\1\35\1\74\1\105\21\35\1\106\3\35\1\126\11\35\1\70"+
            "\3\35\1\71\1\35\1\123\1\35\1\100\1\35\1\101\1\102\2\35\1\76"+
            "\1\72\1\73\1\35\1\75\1\103\1\104\1\77\1\35\1\107\2\35\1\111"+
            "\1\113\2\35\1\112\1\67\1\66\1\56\1\35\1\55\1\52\1\53\1\54\1"+
            "\51\1\47\1\50\1\46\1\35\1\45\1\44\1\43\1\57\1\60\1\61\1\62\1"+
            "\63\1\64\1\65\17\35\13\uffff\5\35\1\uffff\7\35\1\114\1\115\1"+
            "\116\5\35\1\117\3\35\1\120\5\35\2\10\1\121\5\35\1\132\2\35\1"+
            "\131\3\35\1\124\2\132\2\125\2\35\1\127\12\35\1\133\3\35\1\130"+
            "\5\35\10\uffff\1\10\1\uffff\3\10\2\uffff\14\10\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\1\35\2\10\2\uffff\14\10\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\1\35\2\10\2\uffff\14\10\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\1\35\2\10\2\uffff\14\10\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\1\35\2\10\2\uffff\14\10\2\uffff\2\10",
            "",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\3\10\2\uffff\13\10\3\uffff\2\10",
            "\2\10\1\35\1\10\2\uffff\1\10\1\42\u00b5\uffff\11\35\1\u0081"+
            "\6\35\1\u008b\1\35\1\165\1\176\21\35\1\177\3\35\1\u008f\11\35"+
            "\1\161\3\35\1\162\1\35\1\u008c\1\35\1\171\1\35\1\172\1\173\2"+
            "\35\1\167\1\163\1\164\1\35\1\166\1\174\1\175\1\170\1\35\1\u0080"+
            "\2\35\1\u0082\1\u0084\2\35\1\u0083\1\160\1\157\1\147\1\35\1"+
            "\146\1\143\1\144\1\145\1\142\1\140\1\141\1\137\1\35\1\136\1"+
            "\135\1\134\1\150\1\151\1\152\1\153\1\154\1\155\1\156\17\35\13"+
            "\uffff\5\35\1\uffff\7\35\1\u0085\1\u0086\1\u0087\5\35\1\u0088"+
            "\3\35\1\u0089\5\35\2\10\1\u008a\5\35\1\u0093\2\35\1\u0092\3"+
            "\35\1\u008d\2\u0093\2\u008e\2\35\1\u0090\12\35\1\u0094\3\35"+
            "\1\u0091\5\35\10\uffff\1\10\1\uffff\3\10\2\uffff\13\10\3\uffff"+
            "\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\3\10\2\uffff\13\10\3\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\3\10\2\uffff\13\10\3\uffff\2\10",
            "\2\10\1\35\1\10\2\uffff\1\10\1\42\u00b5\uffff\11\35\1\u00ba"+
            "\6\35\1\u00c4\1\35\1\u00ae\1\u00b7\21\35\1\u00b8\3\35\1\u00c8"+
            "\11\35\1\u00aa\3\35\1\u00ab\1\35\1\u00c5\1\35\1\u00b2\1\35\1"+
            "\u00b3\1\u00b4\2\35\1\u00b0\1\u00ac\1\u00ad\1\35\1\u00af\1\u00b5"+
            "\1\u00b6\1\u00b1\1\35\1\u00b9\2\35\1\u00bb\1\u00bd\2\35\1\u00bc"+
            "\1\u00a9\1\u00a8\1\u00a0\1\35\1\u009f\1\u009c\1\u009d\1\u009e"+
            "\1\u009b\1\u0099\1\u009a\1\u0098\1\35\1\u0097\1\u0096\1\u0095"+
            "\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\17"+
            "\35\13\uffff\5\35\1\uffff\7\35\1\u00be\1\u00bf\1\u00c0\5\35"+
            "\1\u00c1\3\35\1\u00c2\5\35\2\10\1\u00c3\5\35\1\u00cc\2\35\1"+
            "\u00cb\3\35\1\u00c6\2\u00cc\2\u00c7\2\35\1\u00c9\12\35\1\u00cd"+
            "\3\35\1\u00ca\5\35\10\uffff\1\10\1\uffff\3\10\2\uffff\13\10"+
            "\3\uffff\2\10",
            "\2\10\1\35\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\3\10\2\uffff\13\10\3\uffff\2\10",
            "\2\10\1\35\1\10\2\uffff\1\10\1\42\u00be\uffff\1\10\6\uffff"+
            "\1\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10"+
            "\3\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff"+
            "\3\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1"+
            "\uffff\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff"+
            "\1\10\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2"+
            "\uffff\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff"+
            "\3\10\2\uffff\13\10\3\uffff\2\10",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\u00ce\2\u00cf\2\uffff\13\u00cf\3\uffff"+
            "\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\35\2\u00cf\2\uffff\14\u00cf\2\uffff"+
            "\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\35\2\u00cf\2\uffff\14\u00cf\2\uffff"+
            "\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\35\2\u00cf\2\uffff\14\u00cf\2\uffff"+
            "\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\35\2\u00cf\2\uffff\14\u00cf\2\uffff"+
            "\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\35\2\u00cf\2\uffff\14\u00cf\2\uffff"+
            "\2\u00cf",
            "\2\u00cf\1\35\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\35\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "",
            "\2\u00cf\1\35\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\35\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\35\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\35\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\u00d1\1\u00cf\2\uffff\1\u00cf\1\42\u00b5\uffff\11"+
            "\u00d1\1\u00f6\6\u00d1\1\u0100\1\u00d1\1\u00ea\1\u00f3\21\u00d1"+
            "\1\u00f4\3\u00d1\1\u0104\11\u00d1\1\u00e6\3\u00d1\1\u00e7\1"+
            "\u00d1\1\u0101\1\u00d1\1\u00ee\1\u00d1\1\u00ef\1\u00f0\2\u00d1"+
            "\1\u00ec\1\u00e8\1\u00e9\1\u00d1\1\u00eb\1\u00f1\1\u00f2\1\u00ed"+
            "\1\u00d1\1\u00f5\2\u00d1\1\u00f7\1\u00f9\2\u00d1\1\u00f8\1\u00e5"+
            "\1\u00e4\1\u00dc\1\u00d1\1\u00db\1\u00d8\1\u00d9\1\u00da\1\u00d7"+
            "\1\u00d5\1\u00d6\1\u00d4\1\u00d1\1\u00d3\1\u00d2\1\u00d0\1\u00dd"+
            "\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\17\u00d1\13"+
            "\uffff\5\u00d1\1\uffff\7\u00d1\1\u00fa\1\u00fb\1\u00fc\5\u00d1"+
            "\1\u00fd\3\u00d1\1\u00fe\5\u00d1\2\u00cf\1\u00ff\5\u00d1\1\u0108"+
            "\2\u00d1\1\u0107\3\u00d1\1\u0102\2\u0108\2\u0103\2\u00d1\1\u0105"+
            "\12\u00d1\1\u0109\3\u00d1\1\u0106\5\u00d1\10\uffff\1\u00cf\1"+
            "\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\1\42\u00be\uffff\1"+
            "\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1"+
            "\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10"+
            "\u00cf\1\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff"+
            "\1\u00cf\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff"+
            "\5\u00cf\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff"+
            "\2\u00cf",
            "\12\u010b\1\u010f\101\u010b\1\u0118\2\u010b\1\u0111\5\u010b"+
            "\1\u0117\30\u010b\1\u010c\11\u010b\13\uffff\1\u010b\1\u010d"+
            "\1\u0114\1\u0110\1\u0112\1\uffff\1\u010e\1\u0115\1\u0116\10"+
            "\u010b\1\u0113\14\u010b\1\u0119\2\uffff\47\u010b\1\u011a\1\u010b"+
            "\21\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0103\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0103\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0103\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0113\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u010a\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00ed\uffff\1\u00cf\1\uffff\1\u00cf"+
            "\u009f\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00eb\uffff\1\u00cf\u00a3\uffff\1"+
            "\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f9\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f9\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c7\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u018f\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00de\uffff\1\u00cf\22\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\u0099\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f3\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00de\uffff\1\u00cf\22\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\u0099\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c7\uffff\2\u00cf\21\uffff\1\u00cf"+
            "\15\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1"+
            "\u00cf\2\uffff\1\u00cf\u008f\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c7\uffff\2\u00cf\21\uffff\1\u00cf"+
            "\15\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1"+
            "\u00cf\2\uffff\1\u00cf\u008f\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c9\uffff\2\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0130\uffff\2\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00fd\uffff\1\u00cf\u0091\uffff\1"+
            "\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00b5\uffff\170\u00cf\13\uffff\37"+
            "\u00cf\2\uffff\51\u00cf\15\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00e9\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3"+
            "\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7"+
            "\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00de\uffff\1\u00cf\u0084\uffff\1"+
            "\u00cf\1\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u016b\uffff\2\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f0\uffff\1\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u016e\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u016e\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21"+
            "\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\1\uffff\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\16\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2"+
            "\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3"+
            "\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7"+
            "\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21"+
            "\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\1\uffff\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\16\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2"+
            "\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0103\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0103\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0103\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0113\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u010a\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00ed\uffff\1\u00cf\1\uffff\1\u00cf"+
            "\u009f\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00eb\uffff\1\u00cf\u00a3\uffff\1"+
            "\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f9\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f9\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c7\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u018f\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00de\uffff\1\u00cf\22\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\u0099\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f3\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00de\uffff\1\u00cf\22\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\u0099\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c7\uffff\2\u00cf\21\uffff\1\u00cf"+
            "\15\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1"+
            "\u00cf\2\uffff\1\u00cf\u008f\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c7\uffff\2\u00cf\21\uffff\1\u00cf"+
            "\15\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1"+
            "\u00cf\2\uffff\1\u00cf\u008f\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00c9\uffff\2\u00cf",
            "\1\u010a\4\uffff\1\u010a\u0130\uffff\2\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00fd\uffff\1\u00cf\u0091\uffff\1"+
            "\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00b5\uffff\170\u00cf\13\uffff\37"+
            "\u00cf\2\uffff\51\u00cf\15\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00e9\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3"+
            "\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7"+
            "\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\4\uffff\1\u010a\32\uffff\1\u00cf\u009a"+
            "\uffff\175\u00cf\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\12\uffff\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff"+
            "\2\u00cf\1\uffff\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00de\uffff\1\u00cf\u0084\uffff\1"+
            "\u00cf\1\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u016b\uffff\2\u00cf",
            "\1\u010a\4\uffff\1\u010a\u00f0\uffff\1\u00cf\2\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u016e\uffff\1\u00cf",
            "\1\u010a\4\uffff\1\u010a\u016e\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21"+
            "\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\1\uffff\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\16\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2"+
            "\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3"+
            "\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf"+
            "\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7"+
            "\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15"+
            "\uffff\1\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\1\u010a\u00be\uffff"+
            "\1\u00cf\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21"+
            "\uffff\1\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\1\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\1\uffff\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf"+
            "\16\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2"+
            "\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\1\u010a\u0108\uffff\1\u00cf",
            "\1\u010a\u0108\uffff\1\u00cf",
            "\1\u010a\u0108\uffff\1\u00cf",
            "\1\u010a\u0118\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u010f\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u00f2\uffff\1\u00cf\1\uffff\1\u00cf\u009f\uffff\1"+
            "\u00cf",
            "\1\u010a\u00f0\uffff\1\u00cf\u00a3\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u00fe\uffff\1\u00cf",
            "\1\u010a\u00fe\uffff\1\u00cf",
            "\1\u010a\u00cc\uffff\1\u00cf",
            "\1\u010a\u0194\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u00e3\uffff\1\u00cf\22\uffff\1\u00cf\2\uffff\2\u00cf"+
            "\u0099\uffff\1\u00cf",
            "\1\u010a\u00f8\uffff\1\u00cf",
            "\1\u010a\u00e3\uffff\1\u00cf\22\uffff\1\u00cf\2\uffff\2\u00cf"+
            "\u0099\uffff\1\u00cf",
            "\1\u010a\u00cc\uffff\2\u00cf\21\uffff\1\u00cf\15\uffff\1\u00cf"+
            "\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1\u00cf\2\uffff\1"+
            "\u00cf\u008f\uffff\1\u00cf",
            "\1\u010a\u00cc\uffff\2\u00cf\21\uffff\1\u00cf\15\uffff\1\u00cf"+
            "\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1\u00cf\2\uffff\1"+
            "\u00cf\u008f\uffff\1\u00cf",
            "\1\u010a\u00ce\uffff\2\u00cf",
            "\1\u010a\u0135\uffff\2\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u0102\uffff\1\u00cf\u0091\uffff\1\u00cf",
            "\1\u010a\u00ba\uffff\170\u00cf\13\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\15\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u00ee\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7\u00cf\47"+
            "\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u010a\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u00e3\uffff\1\u00cf\u0084\uffff\1\u00cf\1\uffff\1"+
            "\u00cf",
            "\1\u010a\u0170\uffff\2\u00cf",
            "\1\u010a\u00f5\uffff\1\u00cf\2\uffff\1\u00cf",
            "\1\u010a\u0173\uffff\1\u00cf",
            "\1\u010a\u0173\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1"+
            "\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff"+
            "\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16"+
            "\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff\2"+
            "\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7\u00cf\47"+
            "\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u010a\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1"+
            "\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff"+
            "\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16"+
            "\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff\2"+
            "\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "",
            "",
            "\1\u011b\u0108\uffff\1\u00cf",
            "",
            "\1\u011b\u0108\uffff\1\u00cf",
            "\1\u011b\u0108\uffff\1\u00cf",
            "\1\u011b\u0118\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u010f\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u00f2\uffff\1\u00cf\1\uffff\1\u00cf\u009f\uffff\1"+
            "\u00cf",
            "\1\u011b\u00f0\uffff\1\u00cf\u00a3\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u00fe\uffff\1\u00cf",
            "\1\u011b\u00fe\uffff\1\u00cf",
            "\1\u011b\u00cc\uffff\1\u00cf",
            "\1\u011b\u0194\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u00e3\uffff\1\u00cf\22\uffff\1\u00cf\2\uffff\2\u00cf"+
            "\u0099\uffff\1\u00cf",
            "\1\u011b\u00f8\uffff\1\u00cf",
            "\1\u011b\u00e3\uffff\1\u00cf\22\uffff\1\u00cf\2\uffff\2\u00cf"+
            "\u0099\uffff\1\u00cf",
            "\1\u011b\u00cc\uffff\2\u00cf\21\uffff\1\u00cf\15\uffff\1\u00cf"+
            "\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1\u00cf\2\uffff\1"+
            "\u00cf\u008f\uffff\1\u00cf",
            "\1\u011b\u00cc\uffff\2\u00cf\21\uffff\1\u00cf\15\uffff\1\u00cf"+
            "\3\uffff\1\u00cf\11\uffff\3\u00cf\1\uffff\1\u00cf\2\uffff\1"+
            "\u00cf\u008f\uffff\1\u00cf",
            "\1\u011b\u00ce\uffff\2\u00cf",
            "\1\u011b\u0135\uffff\2\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u0102\uffff\1\u00cf\u0091\uffff\1\u00cf",
            "\1\u011b\u00ba\uffff\170\u00cf\13\uffff\37\u00cf\2\uffff\51"+
            "\u00cf\15\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u00ee\uffff\1\u00cf",
            "\2\u00cf\1\u011b\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7\u00cf\47"+
            "\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\1\u00cf\1\uffff\1\u011b\37\uffff\1\u00cf\u009a\uffff\175\u00cf"+
            "\1\uffff\2\u00cf\3\uffff\37\u00cf\2\uffff\51\u00cf\12\uffff"+
            "\1\u00cf\2\uffff\1\u00cf\1\uffff\3\u00cf\6\uffff\2\u00cf\1\uffff"+
            "\2\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u00e3\uffff\1\u00cf\u0084\uffff\1\u00cf\1\uffff\1"+
            "\u00cf",
            "\1\u011b\u0170\uffff\2\u00cf",
            "\1\u011b\u00f5\uffff\1\u00cf\2\uffff\1\u00cf",
            "\1\u011b\u0173\uffff\1\u00cf",
            "\1\u011b\u0173\uffff\1\u00cf",
            "\2\u00cf\1\u011b\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1"+
            "\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff"+
            "\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16"+
            "\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff\2"+
            "\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u011b\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16\uffff\7\u00cf\47"+
            "\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf\24\uffff\1\u00cf"+
            "\2\uffff\2\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\2\uffff\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "\2\u00cf\1\u011b\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\4\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1"+
            "\u00cf\3\uffff\1\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff"+
            "\4\u00cf\1\uffff\1\u00cf\2\uffff\2\u00cf\2\uffff\3\u00cf\16"+
            "\uffff\7\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\1\uffff\1\u00cf\12\uffff\1\u00cf\2\uffff\2"+
            "\u00cf\2\uffff\1\u00cf\16\uffff\1\u00cf\15\uffff\1\u00cf\2\uffff"+
            "\2\u00cf\6\uffff\5\u00cf\6\uffff\1\u00cf",
            "",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            "\2\u00cf\1\uffff\1\u00cf\2\uffff\1\u00cf\u00bf\uffff\1\u00cf"+
            "\6\uffff\1\u00cf\1\uffff\2\u00cf\21\uffff\1\u00cf\3\uffff\1"+
            "\u00cf\11\uffff\1\u00cf\3\uffff\1\u00cf\1\uffff\1\u00cf\1\uffff"+
            "\1\u00cf\1\uffff\2\u00cf\2\uffff\3\u00cf\1\uffff\4\u00cf\1\uffff"+
            "\1\u00cf\2\uffff\2\u00cf\2\uffff\4\u00cf\1\uffff\10\u00cf\1"+
            "\uffff\12\u00cf\47\uffff\3\u00cf\5\uffff\1\u00cf\3\uffff\1\u00cf"+
            "\5\uffff\3\u00cf\5\uffff\1\u00cf\2\uffff\1\u00cf\3\uffff\5\u00cf"+
            "\2\uffff\1\u00cf\12\uffff\1\u00cf\3\uffff\1\u00cf\15\uffff\1"+
            "\u00cf\1\uffff\1\u010a\2\u00cf\2\uffff\13\u00cf\3\uffff\2\u00cf",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "1088:1: stepExpr : ( axisStep | filterExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_222 = input.LA(1);

                         
                        int index126_222 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_222==LAngle||LA126_222==Pragma||(LA126_222>=XQUERY && LA126_222<=AposedStringLiteral)||(LA126_222>=DirCommentConstructor && LA126_222<=DirPIConstructor)||(LA126_222>=DOCUMENT && LA126_222<=WHILE)||(LA126_222>=NOT && LA126_222<=NCName)||LA126_222==408||LA126_222==411||(LA126_222>=413 && LA126_222<=415)||(LA126_222>=422 && LA126_222<=423)||(LA126_222>=425 && LA126_222<=426)||LA126_222==429) ) {s = 207;}

                        else if ( (LA126_222==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_222);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_223 = input.LA(1);

                         
                        int index126_223 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_223==LAngle||LA126_223==Pragma||(LA126_223>=XQUERY && LA126_223<=AposedStringLiteral)||(LA126_223>=DirCommentConstructor && LA126_223<=DirPIConstructor)||(LA126_223>=DOCUMENT && LA126_223<=WHILE)||(LA126_223>=NOT && LA126_223<=NCName)||LA126_223==408||LA126_223==411||(LA126_223>=413 && LA126_223<=415)||(LA126_223>=422 && LA126_223<=423)||(LA126_223>=425 && LA126_223<=426)||LA126_223==429) ) {s = 207;}

                        else if ( (LA126_223==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_223);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_224 = input.LA(1);

                         
                        int index126_224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_224==LAngle||LA126_224==Pragma||(LA126_224>=XQUERY && LA126_224<=AposedStringLiteral)||(LA126_224>=DirCommentConstructor && LA126_224<=DirPIConstructor)||(LA126_224>=DOCUMENT && LA126_224<=WHILE)||(LA126_224>=NOT && LA126_224<=NCName)||LA126_224==408||LA126_224==411||(LA126_224>=413 && LA126_224<=415)||(LA126_224>=422 && LA126_224<=423)||(LA126_224>=425 && LA126_224<=426)||LA126_224==429) ) {s = 207;}

                        else if ( (LA126_224==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_224);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_225 = input.LA(1);

                         
                        int index126_225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_225==LAngle||LA126_225==Pragma||(LA126_225>=XQUERY && LA126_225<=AposedStringLiteral)||(LA126_225>=DirCommentConstructor && LA126_225<=DirPIConstructor)||(LA126_225>=DOCUMENT && LA126_225<=WHILE)||(LA126_225>=NOT && LA126_225<=NCName)||LA126_225==408||LA126_225==411||(LA126_225>=413 && LA126_225<=415)||(LA126_225>=422 && LA126_225<=423)||(LA126_225>=425 && LA126_225<=426)||LA126_225==429) ) {s = 207;}

                        else if ( (LA126_225==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_225);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA126_263 = input.LA(1);

                         
                        int index126_263 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_263==EOF||(LA126_263>=LAngle && LA126_263<=RAngle)||LA126_263==RCurly||LA126_263==SymEq||LA126_263==DEFAULT||LA126_263==USING||LA126_263==ORDERED||(LA126_263>=ORDER && LA126_263<=EMPTY)||LA126_263==COLLATION||LA126_263==AT||LA126_263==FOR||LA126_263==LET||LA126_263==WINDOW||LA126_263==START||(LA126_263>=ONLY && LA126_263<=END)||(LA126_263>=COUNT && LA126_263<=GROUP)||(LA126_263>=STABLE && LA126_263<=RETURN)||LA126_263==SATISFIES||(LA126_263>=CASE && LA126_263<=AS)||(LA126_263>=ELSE && LA126_263<=AND)||(LA126_263>=EQ && LA126_263<=IS)||(LA126_263>=INTO && LA126_263<=BEFORE)||LA126_263==WITH||LA126_263==MODIFY||(LA126_263>=FTOR && LA126_263<=NOT)||LA126_263==WEIGHT||LA126_263==DISTANCE||(LA126_263>=SAME && LA126_263<=DIFFERENT)||LA126_263==ENTIRE||LA126_263==WITHOUT||LA126_263==406||(LA126_263>=409 && LA126_263<=410)||(LA126_263>=417 && LA126_263<=421)||LA126_263==428) ) {s = 207;}

                        else if ( (LA126_263==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_263);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA126_221 = input.LA(1);

                         
                        int index126_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_221==LAngle||LA126_221==Pragma||(LA126_221>=XQUERY && LA126_221<=AposedStringLiteral)||(LA126_221>=DirCommentConstructor && LA126_221<=DirPIConstructor)||(LA126_221>=DOCUMENT && LA126_221<=WHILE)||(LA126_221>=NOT && LA126_221<=NCName)||LA126_221==408||LA126_221==411||(LA126_221>=413 && LA126_221<=415)||(LA126_221>=422 && LA126_221<=423)||(LA126_221>=425 && LA126_221<=426)||LA126_221==429) ) {s = 207;}

                        else if ( (LA126_221==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_221);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA126_238 = input.LA(1);

                         
                        int index126_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_238==AT||LA126_238==WHEN||(LA126_238>=PREVIOUS && LA126_238<=NEXT)||LA126_238==411) ) {s = 207;}

                        else if ( (LA126_238==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_238);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA126_226 = input.LA(1);

                         
                        int index126_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_226==LAngle||LA126_226==Pragma||(LA126_226>=XQUERY && LA126_226<=AposedStringLiteral)||(LA126_226>=DirCommentConstructor && LA126_226<=DirPIConstructor)||(LA126_226>=DOCUMENT && LA126_226<=WHILE)||(LA126_226>=NOT && LA126_226<=NCName)||LA126_226==408||LA126_226==411||(LA126_226>=413 && LA126_226<=415)||(LA126_226>=422 && LA126_226<=423)||(LA126_226>=425 && LA126_226<=426)||LA126_226==429) ) {s = 207;}

                        else if ( (LA126_226==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_226);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA126_233 = input.LA(1);

                         
                        int index126_233 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_233==BY) ) {s = 207;}

                        else if ( (LA126_233==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_233);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA126_227 = input.LA(1);

                         
                        int index126_227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_227==LAngle||LA126_227==Pragma||(LA126_227>=XQUERY && LA126_227<=AposedStringLiteral)||(LA126_227>=DirCommentConstructor && LA126_227<=DirPIConstructor)||(LA126_227>=DOCUMENT && LA126_227<=WHILE)||(LA126_227>=NOT && LA126_227<=NCName)||LA126_227==408||LA126_227==411||(LA126_227>=413 && LA126_227<=415)||(LA126_227>=422 && LA126_227<=423)||(LA126_227>=425 && LA126_227<=426)||LA126_227==429) ) {s = 207;}

                        else if ( (LA126_227==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_227);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA126_236 = input.LA(1);

                         
                        int index126_236 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_236==411) ) {s = 207;}

                        else if ( (LA126_236==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_236);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA126_231 = input.LA(1);

                         
                        int index126_231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_231==SCORE||LA126_231==411) ) {s = 207;}

                        else if ( (LA126_231==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_231);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA126_256 = input.LA(1);

                         
                        int index126_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_256==EOF||(LA126_256>=LAngle && LA126_256<=RAngle)||LA126_256==RCurly||LA126_256==SymEq||LA126_256==DEFAULT||LA126_256==ORDERED||(LA126_256>=ORDER && LA126_256<=EMPTY)||LA126_256==COLLATION||LA126_256==AT||LA126_256==FOR||LA126_256==LET||LA126_256==WINDOW||LA126_256==START||(LA126_256>=ONLY && LA126_256<=END)||(LA126_256>=COUNT && LA126_256<=GROUP)||(LA126_256>=STABLE && LA126_256<=RETURN)||LA126_256==SATISFIES||(LA126_256>=CASE && LA126_256<=AS)||(LA126_256>=ELSE && LA126_256<=AND)||(LA126_256>=EQ && LA126_256<=IS)||(LA126_256>=INTO && LA126_256<=BEFORE)||LA126_256==WITH||LA126_256==MODIFY||LA126_256==DISTANCE||(LA126_256>=SAME && LA126_256<=DIFFERENT)||LA126_256==ENTIRE||LA126_256==WITHOUT||LA126_256==406||(LA126_256>=409 && LA126_256<=410)||(LA126_256>=417 && LA126_256<=421)||LA126_256==428) ) {s = 207;}

                        else if ( (LA126_256==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_256);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA126_230 = input.LA(1);

                         
                        int index126_230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_230==TUMBLING||LA126_230==SLIDING||LA126_230==411) ) {s = 207;}

                        else if ( (LA126_230==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_230);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA126_243 = input.LA(1);

                         
                        int index126_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_243==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                        else if ( ((LA126_243>=GREATEST && LA126_243<=LEAST)) ) {s = 207;}

                         
                        input.seek(index126_243);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA126_257 = input.LA(1);

                         
                        int index126_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_257==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                        else if ( (LA126_257==LAngle||LA126_257==Pragma||(LA126_257>=XQUERY && LA126_257<=AposedStringLiteral)||(LA126_257>=DirCommentConstructor && LA126_257<=DirPIConstructor)||(LA126_257>=DOCUMENT && LA126_257<=WHILE)||(LA126_257>=NOT && LA126_257<=NCName)||LA126_257==408||LA126_257==411||(LA126_257>=413 && LA126_257<=415)||(LA126_257>=422 && LA126_257<=423)||(LA126_257>=425 && LA126_257<=426)||LA126_257==429) ) {s = 207;}

                         
                        input.seek(index126_257);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA126_244 = input.LA(1);

                         
                        int index126_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA126_244>=QuotedStringLiteral && LA126_244<=AposedStringLiteral)) ) {s = 207;}

                        else if ( (LA126_244==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_244);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA126_262 = input.LA(1);

                         
                        int index126_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_262==CONTENT) ) {s = 207;}

                        else if ( (LA126_262==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_262);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA126_218 = input.LA(1);

                         
                        int index126_218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_218==LAngle||LA126_218==Pragma||(LA126_218>=XQUERY && LA126_218<=AposedStringLiteral)||(LA126_218>=DirCommentConstructor && LA126_218<=DirPIConstructor)||(LA126_218>=DOCUMENT && LA126_218<=WHILE)||(LA126_218>=NOT && LA126_218<=NCName)||LA126_218==408||LA126_218==411||(LA126_218>=413 && LA126_218<=415)||(LA126_218>=422 && LA126_218<=423)||(LA126_218>=425 && LA126_218<=426)||LA126_218==429) ) {s = 207;}

                        else if ( (LA126_218==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_218);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA126_264 = input.LA(1);

                         
                        int index126_264 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_264==EOF||(LA126_264>=LAngle && LA126_264<=RAngle)||LA126_264==RCurly||LA126_264==SymEq||LA126_264==DEFAULT||LA126_264==ORDERED||(LA126_264>=ORDER && LA126_264<=EMPTY)||LA126_264==COLLATION||LA126_264==AT||LA126_264==FOR||LA126_264==LET||LA126_264==WINDOW||LA126_264==START||(LA126_264>=ONLY && LA126_264<=END)||(LA126_264>=COUNT && LA126_264<=GROUP)||(LA126_264>=STABLE && LA126_264<=RETURN)||LA126_264==SATISFIES||(LA126_264>=CASE && LA126_264<=AS)||(LA126_264>=ELSE && LA126_264<=AND)||(LA126_264>=EQ && LA126_264<=IS)||(LA126_264>=INTO && LA126_264<=BEFORE)||LA126_264==WITH||LA126_264==MODIFY||LA126_264==DISTANCE||(LA126_264>=SAME && LA126_264<=DIFFERENT)||LA126_264==ENTIRE||LA126_264==WITHOUT||LA126_264==406||(LA126_264>=409 && LA126_264<=410)||(LA126_264>=417 && LA126_264<=421)||LA126_264==428) ) {s = 207;}

                        else if ( (LA126_264==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_264);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA126_232 = input.LA(1);

                         
                        int index126_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_232==LAngle||LA126_232==Pragma||(LA126_232>=XQUERY && LA126_232<=AposedStringLiteral)||(LA126_232>=DirCommentConstructor && LA126_232<=DirPIConstructor)||(LA126_232>=DOCUMENT && LA126_232<=WHILE)||(LA126_232>=NOT && LA126_232<=NCName)||LA126_232==408||LA126_232==411||(LA126_232>=413 && LA126_232<=415)||(LA126_232>=422 && LA126_232<=423)||(LA126_232>=425 && LA126_232<=426)||LA126_232==429) ) {s = 207;}

                        else if ( (LA126_232==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_232);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA126_265 = input.LA(1);

                         
                        int index126_265 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_265==EOF||(LA126_265>=LAngle && LA126_265<=RAngle)||LA126_265==RCurly||LA126_265==SymEq||LA126_265==DEFAULT||LA126_265==USING||LA126_265==ORDERED||(LA126_265>=ORDER && LA126_265<=EMPTY)||LA126_265==COLLATION||LA126_265==AT||LA126_265==FOR||LA126_265==LET||LA126_265==WINDOW||LA126_265==START||(LA126_265>=ONLY && LA126_265<=END)||(LA126_265>=COUNT && LA126_265<=GROUP)||(LA126_265>=STABLE && LA126_265<=RETURN)||LA126_265==SATISFIES||(LA126_265>=CASE && LA126_265<=AS)||(LA126_265>=ELSE && LA126_265<=AND)||(LA126_265>=EQ && LA126_265<=IS)||(LA126_265>=INTO && LA126_265<=BEFORE)||LA126_265==WITH||LA126_265==MODIFY||(LA126_265>=FTOR && LA126_265<=NOT)||LA126_265==WEIGHT||LA126_265==DISTANCE||(LA126_265>=SAME && LA126_265<=DIFFERENT)||LA126_265==ENTIRE||LA126_265==WITHOUT||LA126_265==406||(LA126_265>=409 && LA126_265<=410)||(LA126_265>=417 && LA126_265<=421)||LA126_265==428) ) {s = 207;}

                        else if ( (LA126_265==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_265);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA126_251 = input.LA(1);

                         
                        int index126_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_251==LAngle||LA126_251==Pragma||(LA126_251>=XQUERY && LA126_251<=AposedStringLiteral)||(LA126_251>=DirCommentConstructor && LA126_251<=DirPIConstructor)||(LA126_251>=DOCUMENT && LA126_251<=WHILE)||(LA126_251>=NOT && LA126_251<=NCName)||LA126_251==408||LA126_251==411||(LA126_251>=413 && LA126_251<=415)||(LA126_251>=422 && LA126_251<=423)||(LA126_251>=425 && LA126_251<=426)||LA126_251==429) ) {s = 207;}

                        else if ( (LA126_251==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_251);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA126_252 = input.LA(1);

                         
                        int index126_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_252==LAngle||LA126_252==Pragma||(LA126_252>=XQUERY && LA126_252<=AposedStringLiteral)||(LA126_252>=DirCommentConstructor && LA126_252<=DirPIConstructor)||(LA126_252>=DOCUMENT && LA126_252<=WHILE)||(LA126_252>=NOT && LA126_252<=NCName)||LA126_252==408||LA126_252==411||(LA126_252>=413 && LA126_252<=415)||(LA126_252>=422 && LA126_252<=423)||(LA126_252>=425 && LA126_252<=426)||LA126_252==429) ) {s = 207;}

                        else if ( (LA126_252==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_252);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA126_217 = input.LA(1);

                         
                        int index126_217 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_217==LAngle||LA126_217==Pragma||(LA126_217>=XQUERY && LA126_217<=AposedStringLiteral)||(LA126_217>=DirCommentConstructor && LA126_217<=DirPIConstructor)||(LA126_217>=DOCUMENT && LA126_217<=WHILE)||(LA126_217>=NOT && LA126_217<=NCName)||LA126_217==408||LA126_217==411||(LA126_217>=413 && LA126_217<=415)||(LA126_217>=422 && LA126_217<=423)||(LA126_217>=425 && LA126_217<=426)||LA126_217==429) ) {s = 207;}

                        else if ( (LA126_217==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_217);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA126_250 = input.LA(1);

                         
                        int index126_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_250==LAngle||LA126_250==Pragma||(LA126_250>=XQUERY && LA126_250<=AposedStringLiteral)||(LA126_250>=DirCommentConstructor && LA126_250<=DirPIConstructor)||(LA126_250>=DOCUMENT && LA126_250<=WHILE)||(LA126_250>=NOT && LA126_250<=NCName)||LA126_250==408||LA126_250==411||(LA126_250>=413 && LA126_250<=415)||(LA126_250>=422 && LA126_250<=423)||(LA126_250>=425 && LA126_250<=426)||LA126_250==429) ) {s = 207;}

                        else if ( (LA126_250==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_250);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA126_32 = input.LA(1);

                         
                        int index126_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_32==CAST) ) {s = 208;}

                        else if ( (LA126_32==LCurly||(LA126_32>=XQUERY && LA126_32<=STRIP)||(LA126_32>=ELEMENT && LA126_32<=ORDERING)||LA126_32==UNORDERED||(LA126_32>=GREATEST && LA126_32<=NO_INHERIT)||(LA126_32>=BASE_URI && LA126_32<=SCHEMA)||(LA126_32>=EXTERNAL && LA126_32<=NONDETERMINISTIC)||(LA126_32>=IN && LA126_32<=SCORE)||LA126_32==TUMBLING||LA126_32==SLIDING||LA126_32==WHEN||(LA126_32>=PREVIOUS && LA126_32<=NEXT)||LA126_32==BY||LA126_32==SOME||(LA126_32>=EVERY && LA126_32<=TYPESWITCH)||(LA126_32>=IF && LA126_32<=THEN)||LA126_32==TEXT||LA126_32==OF||(LA126_32>=VALIDATE && LA126_32<=ANCESTOR_OR_SELF)||(LA126_32>=DOCUMENT && LA126_32<=ITEM)||(LA126_32>=DOCUMENT_NODE && LA126_32<=LAST)||(LA126_32>=INSERT && LA126_32<=REPLACE)||(LA126_32>=VALUE && LA126_32<=COPY)||(LA126_32>=SET && LA126_32<=WHILE)||(LA126_32>=FTNOT && LA126_32<=ALL)||(LA126_32>=PHRASE && LA126_32<=OCCURS)||(LA126_32>=EXACTLY && LA126_32<=FROM)||(LA126_32>=SENTENCE && LA126_32<=PARAGRAPH)||(LA126_32>=CONTENT && LA126_32<=RELATIONSHIP)||(LA126_32>=STOP && LA126_32<=WILDCARDS)||(LA126_32>=CONTEXT && LA126_32<=NCName)) && ((xqVersion==XQUERY_3_0))) {s = 209;}

                        else if ( (LA126_32==Colon) ) {s = 34;}

                        else if ( (LA126_32==EOF||(LA126_32>=LAngle && LA126_32<=RAngle)||LA126_32==RCurly||LA126_32==SymEq||(LA126_32>=FTOR && LA126_32<=FTAND)||LA126_32==406||(LA126_32>=409 && LA126_32<=410)||(LA126_32>=413 && LA126_32<=423)||(LA126_32>=427 && LA126_32<=428)) ) {s = 207;}

                        else if ( (LA126_32==CASTABLE) ) {s = 210;}

                        else if ( (LA126_32==TREAT) ) {s = 211;}

                        else if ( (LA126_32==INSTANCE) ) {s = 212;}

                        else if ( (LA126_32==INTERSECT) ) {s = 213;}

                        else if ( (LA126_32==EXCEPT) ) {s = 214;}

                        else if ( (LA126_32==UNION) ) {s = 215;}

                        else if ( (LA126_32==DIV) ) {s = 216;}

                        else if ( (LA126_32==IDIV) ) {s = 217;}

                        else if ( (LA126_32==MOD) ) {s = 218;}

                        else if ( (LA126_32==TO) ) {s = 219;}

                        else if ( (LA126_32==CONTAINS) ) {s = 220;}

                        else if ( (LA126_32==EQ) ) {s = 221;}

                        else if ( (LA126_32==NE) ) {s = 222;}

                        else if ( (LA126_32==LT) ) {s = 223;}

                        else if ( (LA126_32==LE) ) {s = 224;}

                        else if ( (LA126_32==GT) ) {s = 225;}

                        else if ( (LA126_32==GE) ) {s = 226;}

                        else if ( (LA126_32==IS) ) {s = 227;}

                        else if ( (LA126_32==AND) ) {s = 228;}

                        else if ( (LA126_32==OR) ) {s = 229;}

                        else if ( (LA126_32==FOR) ) {s = 230;}

                        else if ( (LA126_32==LET) ) {s = 231;}

                        else if ( (LA126_32==WHERE) ) {s = 232;}

                        else if ( (LA126_32==GROUP) ) {s = 233;}

                        else if ( (LA126_32==ORDER) ) {s = 234;}

                        else if ( (LA126_32==STABLE) ) {s = 235;}

                        else if ( (LA126_32==COUNT) ) {s = 236;}

                        else if ( (LA126_32==RETURN) ) {s = 237;}

                        else if ( (LA126_32==START) ) {s = 238;}

                        else if ( (LA126_32==ONLY) ) {s = 239;}

                        else if ( (LA126_32==END) ) {s = 240;}

                        else if ( (LA126_32==ASCENDING) ) {s = 241;}

                        else if ( (LA126_32==DESCENDING) ) {s = 242;}

                        else if ( (LA126_32==EMPTY) ) {s = 243;}

                        else if ( (LA126_32==COLLATION) ) {s = 244;}

                        else if ( (LA126_32==SATISFIES) ) {s = 245;}

                        else if ( (LA126_32==DEFAULT) ) {s = 246;}

                        else if ( (LA126_32==CASE) ) {s = 247;}

                        else if ( (LA126_32==ELSE) ) {s = 248;}

                        else if ( (LA126_32==AS) ) {s = 249;}

                        else if ( (LA126_32==INTO) ) {s = 250;}

                        else if ( (LA126_32==AFTER) ) {s = 251;}

                        else if ( (LA126_32==BEFORE) ) {s = 252;}

                        else if ( (LA126_32==WITH) ) {s = 253;}

                        else if ( (LA126_32==MODIFY) ) {s = 254;}

                        else if ( (LA126_32==NOT) ) {s = 255;}

                        else if ( (LA126_32==ORDERED) ) {s = 256;}

                        else if ( (LA126_32==WINDOW) ) {s = 257;}

                        else if ( (LA126_32==DISTANCE) ) {s = 258;}

                        else if ( ((LA126_32>=SAME && LA126_32<=DIFFERENT)) ) {s = 259;}

                        else if ( (LA126_32==AT) ) {s = 260;}

                        else if ( (LA126_32==ENTIRE) ) {s = 261;}

                        else if ( (LA126_32==WITHOUT) ) {s = 262;}

                        else if ( (LA126_32==TIMES) ) {s = 263;}

                        else if ( (LA126_32==WORDS||(LA126_32>=SENTENCES && LA126_32<=PARAGRAPHS)) ) {s = 264;}

                        else if ( (LA126_32==LEVELS) ) {s = 265;}

                        else if ( (LA126_32==408) ) {s = 266;}

                         
                        input.seek(index126_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA126_255 = input.LA(1);

                         
                        int index126_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_255==IN) ) {s = 207;}

                        else if ( (LA126_255==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_255);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA126_246 = input.LA(1);

                         
                        int index126_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_246==RETURN||LA126_246==411) ) {s = 207;}

                        else if ( (LA126_246==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_246);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA126_215 = input.LA(1);

                         
                        int index126_215 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_215==LAngle||LA126_215==Pragma||(LA126_215>=XQUERY && LA126_215<=AposedStringLiteral)||(LA126_215>=DirCommentConstructor && LA126_215<=DirPIConstructor)||(LA126_215>=DOCUMENT && LA126_215<=WHILE)||(LA126_215>=NOT && LA126_215<=NCName)||LA126_215==408||LA126_215==411||(LA126_215>=413 && LA126_215<=415)||(LA126_215>=422 && LA126_215<=423)||(LA126_215>=425 && LA126_215<=426)||LA126_215==429) ) {s = 207;}

                        else if ( (LA126_215==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_215);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA126_237 = input.LA(1);

                         
                        int index126_237 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_237==LAngle||LA126_237==Pragma||(LA126_237>=XQUERY && LA126_237<=AposedStringLiteral)||(LA126_237>=DirCommentConstructor && LA126_237<=DirPIConstructor)||(LA126_237>=DOCUMENT && LA126_237<=WHILE)||(LA126_237>=NOT && LA126_237<=NCName)||LA126_237==408||LA126_237==411||(LA126_237>=413 && LA126_237<=415)||(LA126_237>=422 && LA126_237<=423)||(LA126_237>=425 && LA126_237<=426)||LA126_237==429) ) {s = 207;}

                        else if ( (LA126_237==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_237);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA126_216 = input.LA(1);

                         
                        int index126_216 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_216==LAngle||LA126_216==Pragma||(LA126_216>=XQUERY && LA126_216<=AposedStringLiteral)||(LA126_216>=DirCommentConstructor && LA126_216<=DirPIConstructor)||(LA126_216>=DOCUMENT && LA126_216<=WHILE)||(LA126_216>=NOT && LA126_216<=NCName)||LA126_216==408||LA126_216==411||(LA126_216>=413 && LA126_216<=415)||(LA126_216>=422 && LA126_216<=423)||(LA126_216>=425 && LA126_216<=426)||LA126_216==429) ) {s = 207;}

                        else if ( (LA126_216==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_216);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA126_234 = input.LA(1);

                         
                        int index126_234 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_234==BY) ) {s = 207;}

                        else if ( (LA126_234==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_234);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA126_235 = input.LA(1);

                         
                        int index126_235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_235==ORDER) ) {s = 207;}

                        else if ( (LA126_235==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_235);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA126_220 = input.LA(1);

                         
                        int index126_220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_220==TEXT) ) {s = 207;}

                        else if ( (LA126_220==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_220);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA126_259 = input.LA(1);

                         
                        int index126_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA126_259>=SENTENCE && LA126_259<=PARAGRAPH)) ) {s = 207;}

                        else if ( (LA126_259==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_259);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA126_229 = input.LA(1);

                         
                        int index126_229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_229==LAngle||LA126_229==Pragma||(LA126_229>=XQUERY && LA126_229<=AposedStringLiteral)||(LA126_229>=DirCommentConstructor && LA126_229<=DirPIConstructor)||(LA126_229>=DOCUMENT && LA126_229<=WHILE)||(LA126_229>=NOT && LA126_229<=NCName)||LA126_229==408||LA126_229==411||(LA126_229>=413 && LA126_229<=415)||(LA126_229>=422 && LA126_229<=423)||(LA126_229>=425 && LA126_229<=426)||LA126_229==429) ) {s = 207;}

                        else if ( (LA126_229==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_229);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA126_249 = input.LA(1);

                         
                        int index126_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_249==LAngle||LA126_249==Pragma||(LA126_249>=XQUERY && LA126_249<=AposedStringLiteral)||(LA126_249>=DirCommentConstructor && LA126_249<=DirPIConstructor)||(LA126_249>=DOCUMENT && LA126_249<=WHILE)||(LA126_249>=NOT && LA126_249<=NCName)||LA126_249==408||LA126_249==411||(LA126_249>=413 && LA126_249<=415)||(LA126_249>=422 && LA126_249<=423)||(LA126_249>=425 && LA126_249<=426)||LA126_249==429) ) {s = 207;}

                        else if ( (LA126_249==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_249);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA126_228 = input.LA(1);

                         
                        int index126_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_228==LAngle||LA126_228==Pragma||(LA126_228>=XQUERY && LA126_228<=AposedStringLiteral)||(LA126_228>=DirCommentConstructor && LA126_228<=DirPIConstructor)||(LA126_228>=DOCUMENT && LA126_228<=WHILE)||(LA126_228>=NOT && LA126_228<=NCName)||LA126_228==408||LA126_228==411||(LA126_228>=413 && LA126_228<=415)||(LA126_228>=422 && LA126_228<=423)||(LA126_228>=425 && LA126_228<=426)||LA126_228==429) ) {s = 207;}

                        else if ( (LA126_228==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_228);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA126_260 = input.LA(1);

                         
                        int index126_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_260==START||LA126_260==END) ) {s = 207;}

                        else if ( (LA126_260==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_260);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA126_253 = input.LA(1);

                         
                        int index126_253 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_253==LAngle||LA126_253==Pragma||(LA126_253>=XQUERY && LA126_253<=AposedStringLiteral)||(LA126_253>=DirCommentConstructor && LA126_253<=DirPIConstructor)||(LA126_253>=DOCUMENT && LA126_253<=WHILE)||(LA126_253>=NOT && LA126_253<=NCName)||LA126_253==408||LA126_253==411||(LA126_253>=413 && LA126_253<=415)||(LA126_253>=422 && LA126_253<=423)||(LA126_253>=425 && LA126_253<=426)||LA126_253==429) ) {s = 207;}

                        else if ( (LA126_253==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_253);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA126_213 = input.LA(1);

                         
                        int index126_213 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_213==LAngle||LA126_213==Pragma||(LA126_213>=XQUERY && LA126_213<=AposedStringLiteral)||(LA126_213>=DirCommentConstructor && LA126_213<=DirPIConstructor)||(LA126_213>=DOCUMENT && LA126_213<=WHILE)||(LA126_213>=NOT && LA126_213<=NCName)||LA126_213==408||LA126_213==411||(LA126_213>=413 && LA126_213<=415)||(LA126_213>=422 && LA126_213<=423)||(LA126_213>=425 && LA126_213<=426)||LA126_213==429) ) {s = 207;}

                        else if ( (LA126_213==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_213);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA126_214 = input.LA(1);

                         
                        int index126_214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_214==LAngle||LA126_214==Pragma||(LA126_214>=XQUERY && LA126_214<=AposedStringLiteral)||(LA126_214>=DirCommentConstructor && LA126_214<=DirPIConstructor)||(LA126_214>=DOCUMENT && LA126_214<=WHILE)||(LA126_214>=NOT && LA126_214<=NCName)||LA126_214==408||LA126_214==411||(LA126_214>=413 && LA126_214<=415)||(LA126_214>=422 && LA126_214<=423)||(LA126_214>=425 && LA126_214<=426)||LA126_214==429) ) {s = 207;}

                        else if ( (LA126_214==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_214);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA126_239 = input.LA(1);

                         
                        int index126_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_239==END) ) {s = 207;}

                        else if ( (LA126_239==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_239);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA126_245 = input.LA(1);

                         
                        int index126_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_245==LAngle||LA126_245==Pragma||(LA126_245>=XQUERY && LA126_245<=AposedStringLiteral)||(LA126_245>=DirCommentConstructor && LA126_245<=DirPIConstructor)||(LA126_245>=DOCUMENT && LA126_245<=WHILE)||(LA126_245>=NOT && LA126_245<=NCName)||LA126_245==408||LA126_245==411||(LA126_245>=413 && LA126_245<=415)||(LA126_245>=422 && LA126_245<=423)||(LA126_245>=425 && LA126_245<=426)||LA126_245==429) ) {s = 207;}

                        else if ( (LA126_245==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_245);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA126_261 = input.LA(1);

                         
                        int index126_261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_261==CONTENT) ) {s = 207;}

                        else if ( (LA126_261==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_261);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA126_241 = input.LA(1);

                         
                        int index126_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA126_241>=ORDER && LA126_241<=EMPTY)||LA126_241==COLLATION||LA126_241==FOR||LA126_241==LET||(LA126_241>=COUNT && LA126_241<=GROUP)||LA126_241==STABLE||LA126_241==RETURN||LA126_241==409) ) {s = 207;}

                        else if ( (LA126_241==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_241);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA126_242 = input.LA(1);

                         
                        int index126_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA126_242>=ORDER && LA126_242<=EMPTY)||LA126_242==COLLATION||LA126_242==FOR||LA126_242==LET||(LA126_242>=COUNT && LA126_242<=GROUP)||LA126_242==STABLE||LA126_242==RETURN||LA126_242==409) ) {s = 207;}

                        else if ( (LA126_242==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_242);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA126_254 = input.LA(1);

                         
                        int index126_254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_254==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                        else if ( (LA126_254==LAngle||LA126_254==Pragma||(LA126_254>=XQUERY && LA126_254<=AposedStringLiteral)||(LA126_254>=DirCommentConstructor && LA126_254<=DirPIConstructor)||(LA126_254>=DOCUMENT && LA126_254<=WHILE)||(LA126_254>=NOT && LA126_254<=NCName)||LA126_254==408||LA126_254==411||(LA126_254>=413 && LA126_254<=415)||(LA126_254>=422 && LA126_254<=423)||(LA126_254>=425 && LA126_254<=426)||LA126_254==429) ) {s = 207;}

                         
                        input.seek(index126_254);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA126_248 = input.LA(1);

                         
                        int index126_248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_248==LAngle||LA126_248==Pragma||(LA126_248>=XQUERY && LA126_248<=AposedStringLiteral)||(LA126_248>=DirCommentConstructor && LA126_248<=DirPIConstructor)||(LA126_248>=DOCUMENT && LA126_248<=WHILE)||(LA126_248>=NOT && LA126_248<=NCName)||LA126_248==408||LA126_248==411||(LA126_248>=413 && LA126_248<=415)||(LA126_248>=422 && LA126_248<=423)||(LA126_248>=425 && LA126_248<=426)||LA126_248==429) ) {s = 207;}

                        else if ( (LA126_248==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_248);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA126_210 = input.LA(1);

                         
                        int index126_210 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_210==AS) ) {s = 207;}

                        else if ( (LA126_210==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_210);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA126_208 = input.LA(1);

                         
                        int index126_208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_208==AS) ) {s = 207;}

                        else if ( (LA126_208==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_208);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA126_247 = input.LA(1);

                         
                        int index126_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_247==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                        else if ( ((LA126_247>=XQUERY && LA126_247<=ANCESTOR_OR_SELF)||(LA126_247>=DOCUMENT && LA126_247<=WHILE)||(LA126_247>=NOT && LA126_247<=NCName)||LA126_247==411) ) {s = 207;}

                         
                        input.seek(index126_247);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA126_212 = input.LA(1);

                         
                        int index126_212 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_212==OF) ) {s = 207;}

                        else if ( (LA126_212==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_212);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA126_16 = input.LA(1);

                         
                        int index126_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_16==408) && ((xqVersion==XQUERY_3_0))) {s = 206;}

                        else if ( (LA126_16==Colon) ) {s = 34;}

                        else if ( (LA126_16==EOF||(LA126_16>=LAngle && LA126_16<=RAngle)||LA126_16==RCurly||LA126_16==SymEq||LA126_16==DEFAULT||LA126_16==ORDERED||(LA126_16>=ORDER && LA126_16<=EMPTY)||LA126_16==COLLATION||LA126_16==AT||LA126_16==FOR||LA126_16==LET||LA126_16==WINDOW||LA126_16==START||(LA126_16>=ONLY && LA126_16<=END)||(LA126_16>=COUNT && LA126_16<=GROUP)||(LA126_16>=STABLE && LA126_16<=RETURN)||LA126_16==SATISFIES||(LA126_16>=CASE && LA126_16<=AS)||(LA126_16>=ELSE && LA126_16<=CONTAINS)||(LA126_16>=TO && LA126_16<=INSTANCE)||(LA126_16>=TREAT && LA126_16<=IS)||(LA126_16>=INTO && LA126_16<=BEFORE)||LA126_16==WITH||LA126_16==MODIFY||(LA126_16>=FTOR && LA126_16<=NOT)||LA126_16==WORDS||LA126_16==TIMES||(LA126_16>=DISTANCE && LA126_16<=DIFFERENT)||LA126_16==ENTIRE||LA126_16==LEVELS||LA126_16==WITHOUT||LA126_16==406||(LA126_16>=409 && LA126_16<=410)||(LA126_16>=413 && LA126_16<=423)||(LA126_16>=427 && LA126_16<=428)) ) {s = 207;}

                         
                        input.seek(index126_16);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA126_258 = input.LA(1);

                         
                        int index126_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_258==AT||LA126_258==EXACTLY||LA126_258==FROM) ) {s = 207;}

                        else if ( (LA126_258==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_258);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA126_219 = input.LA(1);

                         
                        int index126_219 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_219==LAngle||LA126_219==Pragma||(LA126_219>=XQUERY && LA126_219<=AposedStringLiteral)||(LA126_219>=DirCommentConstructor && LA126_219<=DirPIConstructor)||(LA126_219>=DOCUMENT && LA126_219<=WHILE)||(LA126_219>=NOT && LA126_219<=NCName)||LA126_219==408||LA126_219==411||(LA126_219>=413 && LA126_219<=415)||(LA126_219>=422 && LA126_219<=423)||(LA126_219>=425 && LA126_219<=426)||LA126_219==429) ) {s = 207;}

                        else if ( (LA126_219==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_219);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA126_240 = input.LA(1);

                         
                        int index126_240 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_240==AT||LA126_240==WHEN||(LA126_240>=PREVIOUS && LA126_240<=NEXT)||LA126_240==411) ) {s = 207;}

                        else if ( (LA126_240==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_240);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA126_211 = input.LA(1);

                         
                        int index126_211 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_211==AS) ) {s = 207;}

                        else if ( (LA126_211==LCurly) && ((xqVersion==XQUERY_3_0))) {s = 283;}

                         
                        input.seek(index126_211);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\12\uffff";
    static final String DFA128_eofS =
        "\1\uffff\7\10\2\uffff";
    static final String DFA128_minS =
        "\1\u00c1\7\4\2\uffff";
    static final String DFA128_maxS =
        "\1\u01a9\7\u01ac\2\uffff";
    static final String DFA128_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA128_specialS =
        "\12\uffff}>";
    static final String[] DFA128_transitionS = {
            "\154\10\1\1\1\2\1\3\1\4\1\5\1\6\1\7\5\10\13\uffff\37\10\2\uffff"+
            "\51\10\21\uffff\1\10\11\uffff\1\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\2\uffff\2\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\2\uffff\2\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\1\uffff\3\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\2\uffff\2\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\2\uffff\2\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\2\uffff\2\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "\2\10\1\uffff\1\10\2\uffff\2\10\u00be\uffff\1\10\6\uffff\1"+
            "\10\1\uffff\2\10\21\uffff\1\10\3\uffff\1\10\11\uffff\1\10\3"+
            "\uffff\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3"+
            "\10\1\uffff\4\10\1\uffff\1\10\2\uffff\2\10\2\uffff\4\10\1\uffff"+
            "\10\10\1\uffff\12\10\47\uffff\3\10\5\uffff\1\10\3\uffff\1\10"+
            "\5\uffff\3\10\5\uffff\1\10\2\uffff\1\10\3\uffff\5\10\2\uffff"+
            "\1\10\12\uffff\1\10\3\uffff\1\10\15\uffff\1\10\2\uffff\2\10"+
            "\2\uffff\13\10\1\11\2\uffff\2\10",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "1099:1: forwardStep : ( ( forwardAxis nodeTest ) -> ^( AxisSpec forwardAxis ) nodeTest | abbrevForwardStep -> abbrevForwardStep );";
        }
    }
    static final String DFA130_eotS =
        "\25\uffff";
    static final String DFA130_eofS =
        "\25\uffff";
    static final String DFA130_minS =
        "\1\u00c1\1\uffff\12\0\11\uffff";
    static final String DFA130_maxS =
        "\1\u01a9\1\uffff\12\0\11\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\12\uffff\1\3\7\uffff\1\2";
    static final String DFA130_specialS =
        "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\11\uffff}>";
    static final String[] DFA130_transitionS = {
            "\12\14\1\3\112\14\1\11\30\14\1\4\11\14\13\uffff\1\14\1\10\1"+
            "\7\2\14\1\12\1\2\1\6\1\5\26\14\2\uffff\47\14\1\13\1\14\21\uffff"+
            "\1\14\11\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "1114:1: abbrevForwardStep : ( ( '@' )=> '@' nodeTest -> ^( AxisSpec ATTRIBUTE ) nodeTest | ( ( ATTRIBUTE | SCHEMA_ATTRIBUTE ) '(' )=> kindTest -> ^( AxisSpec ATTRIBUTE ) kindTest | nodeTest -> ^( AxisSpec CHILD ) nodeTest );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_0 = input.LA(1);

                         
                        int index130_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_0==425) && (synpred5_XQuery())) {s = 1;}

                        else if ( (LA130_0==DOCUMENT_NODE) ) {s = 2;}

                        else if ( (LA130_0==ELEMENT) ) {s = 3;}

                        else if ( (LA130_0==ATTRIBUTE) ) {s = 4;}

                        else if ( (LA130_0==SCHEMA_ELEMENT) ) {s = 5;}

                        else if ( (LA130_0==SCHEMA_ATTRIBUTE) ) {s = 6;}

                        else if ( (LA130_0==PROCESSING_INSTRUCTION) ) {s = 7;}

                        else if ( (LA130_0==COMMENT) ) {s = 8;}

                        else if ( (LA130_0==TEXT) ) {s = 9;}

                        else if ( (LA130_0==ANYKIND) ) {s = 10;}

                        else if ( (LA130_0==NAMESPACE_NODE) ) {s = 11;}

                        else if ( ((LA130_0>=XQUERY && LA130_0<=DEFAULT)||(LA130_0>=FUNCTION && LA130_0<=CONTAINS)||(LA130_0>=TO && LA130_0<=DESCENDANT)||(LA130_0>=SELF && LA130_0<=ANCESTOR_OR_SELF)||LA130_0==DOCUMENT||(LA130_0>=EMPTY_SEQUENCE && LA130_0<=ITEM)||(LA130_0>=REVALIDATION && LA130_0<=WHILE)||(LA130_0>=NOT && LA130_0<=CATCH)||LA130_0==NCName||LA130_0==415) ) {s = 12;}

                         
                        input.seek(index130_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_2 = input.LA(1);

                         
                        int index130_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_5 = input.LA(1);

                         
                        int index130_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_7 = input.LA(1);

                         
                        int index130_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_8 = input.LA(1);

                         
                        int index130_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA130_9 = input.LA(1);

                         
                        int index130_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA130_10 = input.LA(1);

                         
                        int index130_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_XQuery()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA130_11 = input.LA(1);

                         
                        int index130_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred6_XQuery()&&(xqVersion==XQUERY_3_0))) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\15\uffff";
    static final String DFA133_eofS =
        "\1\uffff\10\13\1\uffff\1\13\2\uffff";
    static final String DFA133_minS =
        "\1\u00c1\10\4\1\uffff\1\4\2\uffff";
    static final String DFA133_maxS =
        "\1\u019f\10\u01ac\1\uffff\1\u01ac\2\uffff";
    static final String DFA133_acceptS =
        "\11\uffff\1\1\1\uffff\1\2\1\1";
    static final String DFA133_specialS =
        "\12\uffff\1\0\2\uffff}>";
    static final String[] DFA133_transitionS = {
            "\12\13\1\2\112\13\1\10\30\13\1\3\11\13\13\uffff\1\13\1\7\1\6"+
            "\2\13\1\11\1\1\1\5\1\4\26\13\2\uffff\47\13\1\12\1\13\21\uffff"+
            "\1\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\11"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "",
            "\2\13\1\uffff\1\13\2\uffff\2\13\u00be\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\2\13\21\uffff\1\13\3\uffff\1\13\11\uffff\1\13\3"+
            "\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\2\uffff\3"+
            "\13\1\uffff\4\13\1\uffff\1\13\2\uffff\2\13\2\uffff\4\13\1\uffff"+
            "\10\13\1\uffff\12\13\47\uffff\3\13\5\uffff\1\13\3\uffff\1\13"+
            "\5\uffff\3\13\5\uffff\1\13\2\uffff\1\13\3\uffff\5\13\2\uffff"+
            "\1\13\12\uffff\1\13\3\uffff\1\13\15\uffff\1\13\1\uffff\1\14"+
            "\2\13\2\uffff\13\13\3\uffff\2\13",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "1138:1: nodeTest : ( kindTest -> kindTest | nameTest -> ^( NameTest nameTest ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_10 = input.LA(1);

                         
                        int index133_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_10==408) && ((xqVersion==XQUERY_3_0))) {s = 12;}

                        else if ( (LA133_10==EOF||(LA133_10>=LAngle && LA133_10<=RAngle)||LA133_10==RCurly||(LA133_10>=SymEq && LA133_10<=Colon)||LA133_10==DEFAULT||LA133_10==ORDERED||(LA133_10>=ORDER && LA133_10<=EMPTY)||LA133_10==COLLATION||LA133_10==AT||LA133_10==FOR||LA133_10==LET||LA133_10==WINDOW||LA133_10==START||(LA133_10>=ONLY && LA133_10<=END)||(LA133_10>=COUNT && LA133_10<=GROUP)||(LA133_10>=STABLE && LA133_10<=RETURN)||LA133_10==SATISFIES||(LA133_10>=CASE && LA133_10<=AS)||(LA133_10>=ELSE && LA133_10<=CONTAINS)||(LA133_10>=TO && LA133_10<=INSTANCE)||(LA133_10>=TREAT && LA133_10<=IS)||(LA133_10>=INTO && LA133_10<=BEFORE)||LA133_10==WITH||LA133_10==MODIFY||(LA133_10>=FTOR && LA133_10<=NOT)||LA133_10==WORDS||LA133_10==TIMES||(LA133_10>=DISTANCE && LA133_10<=DIFFERENT)||LA133_10==ENTIRE||LA133_10==LEVELS||LA133_10==WITHOUT||LA133_10==406||(LA133_10>=409 && LA133_10<=410)||(LA133_10>=413 && LA133_10<=423)||(LA133_10>=427 && LA133_10<=428)) ) {s = 11;}

                         
                        input.seek(index133_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\24\uffff";
    static final String DFA134_eofS =
        "\1\uffff\20\23\3\uffff";
    static final String DFA134_minS =
        "\1\u00c1\20\4\1\uffff\1\u00c1\1\uffff";
    static final String DFA134_maxS =
        "\1\u019f\20\u01ac\1\uffff\1\u019f\1\uffff";
    static final String DFA134_acceptS =
        "\21\uffff\1\2\1\uffff\1\1";
    static final String DFA134_specialS =
        "\24\uffff}>";
    static final String[] DFA134_transitionS = {
            "\12\1\1\5\101\1\1\16\2\1\1\7\5\1\1\15\30\1\1\2\11\1\13\uffff"+
            "\1\1\1\3\1\12\1\6\1\10\1\uffff\1\4\1\13\1\14\10\1\1\11\14\1"+
            "\1\17\2\uffff\47\1\1\20\1\1\21\uffff\1\21",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "\4\23\2\uffff\1\23\1\22\u00be\uffff\1\23\6\uffff\1\23\1\uffff"+
            "\2\23\21\uffff\1\23\3\uffff\1\23\11\uffff\1\23\3\uffff\1\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\2\23\2\uffff\3\23\1\uffff"+
            "\4\23\1\uffff\1\23\2\uffff\2\23\2\uffff\4\23\1\uffff\10\23\1"+
            "\uffff\12\23\47\uffff\3\23\5\uffff\1\23\3\uffff\1\23\5\uffff"+
            "\3\23\5\uffff\1\23\2\uffff\1\23\3\uffff\5\23\2\uffff\1\23\12"+
            "\uffff\1\23\3\uffff\1\23\15\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\13\23\3\uffff\2\23",
            "",
            "\170\23\13\uffff\5\23\1\uffff\31\23\2\uffff\51\23\21\uffff"+
            "\1\21",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "1143:1: nameTest : ( qName | wildcard );";
        }
    }
    static final String DFA138_eotS =
        "\23\uffff";
    static final String DFA138_eofS =
        "\23\uffff";
    static final String DFA138_minS =
        "\1\4\4\uffff\3\6\1\uffff\5\6\1\uffff\1\6\3\uffff";
    static final String DFA138_maxS =
        "\1\u01ad\4\uffff\1\u0198\1\u018d\1\13\1\uffff\2\u018d\1\13\2\u0198"+
        "\1\uffff\1\u0198\3\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\3\uffff\1\5\5\uffff\1\10\1\uffff\1\6\1"+
        "\7\1\10";
    static final String DFA138_specialS =
        "\17\uffff\1\0\3\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\16\u00bc\uffff\4\10\1\17\5\10\1\11\5\10\1\5\1\14\103\10\1"+
            "\13\30\10\1\6\11\10\5\1\1\uffff\2\16\3\uffff\1\15\1\7\1\12\2"+
            "\10\1\uffff\31\10\2\uffff\51\10\12\uffff\1\3\2\uffff\1\2\21"+
            "\uffff\1\4",
            "",
            "",
            "",
            "",
            "\1\20\4\uffff\1\10\u018c\uffff\1\10",
            "\1\16\4\uffff\1\10\u00b5\uffff\170\16\13\uffff\5\16\1\uffff"+
            "\31\16\2\uffff\51\16",
            "\1\16\4\uffff\1\10",
            "",
            "\1\16\4\uffff\1\10\u00b5\uffff\170\16\13\uffff\5\16\1\uffff"+
            "\31\16\2\uffff\51\16",
            "\1\16\4\uffff\1\10\u00b5\uffff\170\16\13\uffff\5\16\1\uffff"+
            "\31\16\2\uffff\51\16",
            "\1\16\4\uffff\1\10",
            "\1\21\4\uffff\1\10\u018c\uffff\1\10",
            "\1\16\4\uffff\1\10\u018c\uffff\1\10",
            "",
            "\1\22\4\uffff\1\10\u00b5\uffff\170\22\13\uffff\5\22\1\uffff"+
            "\31\22\2\uffff\51\22\12\uffff\1\10",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "1179:1: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_15 = input.LA(1);

                         
                        int index138_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA138_15==LCurly||(LA138_15>=XQUERY && LA138_15<=ANCESTOR_OR_SELF)||(LA138_15>=DOCUMENT && LA138_15<=ITEM)||(LA138_15>=DOCUMENT_NODE && LA138_15<=WHILE)||(LA138_15>=NOT && LA138_15<=NCName)) && ((xqVersion==XQUERY_3_0))) {s = 18;}

                        else if ( (LA138_15==Colon||LA138_15==408) ) {s = 8;}

                         
                        input.seek(index138_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\4\uffff";
    static final String DFA146_eofS =
        "\4\uffff";
    static final String DFA146_minS =
        "\2\5\2\uffff";
    static final String DFA146_maxS =
        "\1\u013e\1\u018d\2\uffff";
    static final String DFA146_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA146_specialS =
        "\4\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\2\3\uffff\1\2\u0134\uffff\1\1",
            "\1\2\3\uffff\1\2\u00b7\uffff\170\3\5\uffff\1\1\5\uffff\5\3"+
            "\1\uffff\31\3\2\uffff\51\3",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "1252:16: (attrList= dirAttributeList )?";
        }
    }
    static final String DFA153_eotS =
        "\4\uffff";
    static final String DFA153_eofS =
        "\4\uffff";
    static final String DFA153_minS =
        "\2\5\2\uffff";
    static final String DFA153_maxS =
        "\1\u013e\1\u018d\2\uffff";
    static final String DFA153_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA153_specialS =
        "\4\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\2\3\uffff\1\2\u0134\uffff\1\1",
            "\1\2\3\uffff\1\2\u00b7\uffff\170\3\5\uffff\1\1\5\uffff\5\3"+
            "\1\uffff\31\3\2\uffff\51\3",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1282:3: ( ( S )+ dirAttribute )+";
        }
    }
    static final String DFA173_eotS =
        "\122\uffff";
    static final String DFA173_eofS =
        "\1\17\121\uffff";
    static final String DFA173_minS =
        "\1\4\1\uffff\2\0\116\uffff";
    static final String DFA173_maxS =
        "\1\u01ae\1\uffff\2\0\116\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\11\uffff\2\2\77\uffff\3\2";
    static final String DFA173_specialS =
        "\1\0\1\uffff\1\1\1\2\116\uffff}>";
    static final String[] DFA173_transitionS = {
            "\4\17\2\uffff\1\17\u00bf\uffff\1\17\6\uffff\1\17\1\uffff\2\17"+
            "\21\uffff\1\17\3\uffff\2\17\10\uffff\1\17\1\121\1\117\1\120"+
            "\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\2\uffff\3\17\1"+
            "\uffff\3\17\1\4\1\uffff\1\17\2\uffff\2\17\2\uffff\3\17\1\16"+
            "\1\uffff\7\4\1\17\4\uffff\7\17\47\uffff\3\17\5\uffff\1\17\3"+
            "\uffff\1\17\5\uffff\3\17\5\uffff\1\17\2\uffff\1\17\3\uffff\5"+
            "\17\2\uffff\1\17\12\uffff\1\17\3\uffff\1\17\15\uffff\1\17\2"+
            "\uffff\2\17\1\uffff\1\17\1\3\1\4\1\2\1\4\5\17\6\uffff\1\17\1"+
            "\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "1430:18: ( ( occurrenceIndicator )=> occurrenceIndicator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_0 = input.LA(1);

                         
                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA173_0==430) && (synpred7_XQuery())) {s = 1;}

                        else if ( (LA173_0==415) ) {s = 2;}

                        else if ( (LA173_0==413) ) {s = 3;}

                        else if ( (LA173_0==RETURN||(LA173_0>=TO && LA173_0<=EXCEPT)||LA173_0==414||LA173_0==416) ) {s = 4;}

                        else if ( (LA173_0==CONTAINS) && ((fullText))) {s = 14;}

                        else if ( (LA173_0==EOF||(LA173_0>=LAngle && LA173_0<=RCurly)||LA173_0==SymEq||LA173_0==DEFAULT||LA173_0==ORDERED||(LA173_0>=ORDER && LA173_0<=EMPTY)||LA173_0==COLLATION||(LA173_0>=AT && LA173_0<=EXTERNAL)||LA173_0==FOR||LA173_0==LET||LA173_0==WINDOW||LA173_0==START||(LA173_0>=ONLY && LA173_0<=END)||(LA173_0>=COUNT && LA173_0<=GROUP)||(LA173_0>=STABLE && LA173_0<=DESCENDING)||LA173_0==SATISFIES||(LA173_0>=CASE && LA173_0<=AS)||(LA173_0>=ELSE && LA173_0<=AND)||LA173_0==INSTANCE||(LA173_0>=EQ && LA173_0<=IS)||(LA173_0>=INTO && LA173_0<=BEFORE)||LA173_0==WITH||LA173_0==MODIFY||(LA173_0>=FTOR && LA173_0<=NOT)||LA173_0==WORDS||LA173_0==TIMES||(LA173_0>=DISTANCE && LA173_0<=DIFFERENT)||LA173_0==ENTIRE||LA173_0==LEVELS||LA173_0==WITHOUT||LA173_0==406||(LA173_0>=409 && LA173_0<=410)||LA173_0==412||(LA173_0>=417 && LA173_0<=421)||LA173_0==428) ) {s = 15;}

                        else if ( (LA173_0==ALLOWING) && ((xqVersion==XQUERY_3_0))) {s = 79;}

                        else if ( (LA173_0==SCORE) && ((fullText))) {s = 80;}

                        else if ( (LA173_0==IN) ) {s = 81;}

                         
                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA173_2 = input.LA(1);

                         
                        int index173_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_XQuery()) ) {s = 1;}

                        else if ( (true) ) {s = 81;}

                         
                        input.seek(index173_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA173_3 = input.LA(1);

                         
                        int index173_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_XQuery()) ) {s = 1;}

                        else if ( (true) ) {s = 81;}

                         
                        input.seek(index173_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\17\uffff";
    static final String DFA176_eofS =
        "\1\uffff\10\14\1\uffff\2\14\3\uffff";
    static final String DFA176_minS =
        "\1\u00c1\10\4\1\uffff\2\4\3\uffff";
    static final String DFA176_maxS =
        "\1\u018d\10\u01ae\1\uffff\2\u01ae\3\uffff";
    static final String DFA176_acceptS =
        "\11\uffff\1\1\2\uffff\1\3\1\1\1\2";
    static final String DFA176_specialS =
        "\12\uffff\1\0\4\uffff}>";
    static final String[] DFA176_transitionS = {
            "\12\14\1\2\112\14\1\10\30\14\1\3\11\14\13\uffff\1\14\1\7\1\6"+
            "\1\14\1\13\1\11\1\1\1\5\1\4\26\14\2\uffff\47\14\1\12\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\11\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\15\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "\4\14\2\uffff\2\14\u00be\uffff\1\14\6\uffff\1\14\1\uffff\2"+
            "\14\21\uffff\1\14\3\uffff\2\14\10\uffff\5\14\1\uffff\1\14\1"+
            "\uffff\1\14\1\uffff\2\14\2\uffff\3\14\1\uffff\4\14\1\uffff\1"+
            "\14\2\uffff\2\14\2\uffff\4\14\1\uffff\10\14\4\uffff\7\14\47"+
            "\uffff\3\14\5\uffff\1\14\3\uffff\1\14\5\uffff\3\14\5\uffff\1"+
            "\14\2\uffff\1\14\3\uffff\5\14\2\uffff\1\14\12\uffff\1\14\3\uffff"+
            "\1\14\15\uffff\1\14\1\uffff\1\16\2\14\1\uffff\12\14\6\uffff"+
            "\1\14\1\uffff\1\14",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "1440:1: itemType : ( kindTest | ( ITEM '(' ')' ) -> ItemType | atomicType -> ^( AtomicType atomicType ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_10 = input.LA(1);

                         
                        int index176_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_10==408) && ((xqVersion==XQUERY_3_0))) {s = 13;}

                        else if ( (LA176_10==EOF||(LA176_10>=LAngle && LA176_10<=RCurly)||(LA176_10>=SymEq && LA176_10<=Colon)||LA176_10==DEFAULT||LA176_10==ORDERED||(LA176_10>=ORDER && LA176_10<=EMPTY)||LA176_10==COLLATION||(LA176_10>=AT && LA176_10<=EXTERNAL)||(LA176_10>=FOR && LA176_10<=LET)||LA176_10==WINDOW||LA176_10==START||(LA176_10>=ONLY && LA176_10<=END)||(LA176_10>=COUNT && LA176_10<=GROUP)||(LA176_10>=STABLE && LA176_10<=RETURN)||LA176_10==SATISFIES||(LA176_10>=CASE && LA176_10<=AS)||(LA176_10>=ELSE && LA176_10<=CONTAINS)||(LA176_10>=TO && LA176_10<=INSTANCE)||(LA176_10>=EQ && LA176_10<=IS)||(LA176_10>=INTO && LA176_10<=BEFORE)||LA176_10==WITH||LA176_10==MODIFY||(LA176_10>=FTOR && LA176_10<=NOT)||LA176_10==WORDS||LA176_10==TIMES||(LA176_10>=DISTANCE && LA176_10<=DIFFERENT)||LA176_10==ENTIRE||LA176_10==LEVELS||LA176_10==WITHOUT||LA176_10==406||(LA176_10>=409 && LA176_10<=410)||(LA176_10>=412 && LA176_10<=421)||LA176_10==428||LA176_10==430) ) {s = 12;}

                         
                        input.seek(index176_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\13\uffff";
    static final String DFA177_eofS =
        "\13\uffff";
    static final String DFA177_minS =
        "\1\u00cb\12\uffff";
    static final String DFA177_maxS =
        "\1\u018c\12\uffff";
    static final String DFA177_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA177_specialS =
        "\1\0\12\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\2\112\uffff\1\10\30\uffff\1\3\25\uffff\1\7\1\6\2\uffff\1"+
            "\11\1\1\1\5\1\4\77\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "1450:1: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest | {...}? => namespaceNodeTest );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_0 = input.LA(1);

                         
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_0==DOCUMENT_NODE) ) {s = 1;}

                        else if ( (LA177_0==ELEMENT) ) {s = 2;}

                        else if ( (LA177_0==ATTRIBUTE) ) {s = 3;}

                        else if ( (LA177_0==SCHEMA_ELEMENT) ) {s = 4;}

                        else if ( (LA177_0==SCHEMA_ATTRIBUTE) ) {s = 5;}

                        else if ( (LA177_0==PROCESSING_INSTRUCTION) ) {s = 6;}

                        else if ( (LA177_0==COMMENT) ) {s = 7;}

                        else if ( (LA177_0==TEXT) ) {s = 8;}

                        else if ( (LA177_0==ANYKIND) ) {s = 9;}

                        else if ( (LA177_0==NAMESPACE_NODE) && ((xqVersion==XQUERY_3_0))) {s = 10;}

                         
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA218_eotS =
        "\12\uffff";
    static final String DFA218_eofS =
        "\12\uffff";
    static final String DFA218_minS =
        "\1\u00cd\2\uffff\1\u0180\6\uffff";
    static final String DFA218_maxS =
        "\1\u0187\2\uffff\1\u0187\6\uffff";
    static final String DFA218_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA218_specialS =
        "\12\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\11\100\uffff\1\6\156\uffff\2\6\1\7\1\5\1\3\1\4\2\uffff\1"+
            "\10\1\1\1\2",
            "",
            "",
            "\1\5\1\uffff\1\4\2\uffff\1\10\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "1722:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopWordOption | ftExtensionOption );";
        }
    }
 

    public static final BitSet FOLLOW_versionDecl_in_module1391 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_libraryModule_in_module1395 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_mainModule_in_module1406 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_module1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_versionDecl1438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_ENCODING_in_versionDecl1444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_versionDecl1446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_VERSION_in_versionDecl1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_versionDecl1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_ENCODING_in_versionDecl1465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_versionDecl1467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_406_in_versionDecl1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prolog_in_mainModule1489 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_queryBody_in_mainModule1491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleDecl_in_libraryModule1518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000040L});
    public static final BitSet FOLLOW_prolog_in_libraryModule1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_moduleDecl1546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleDecl1548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_moduleDecl1552 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SymEq_in_moduleDecl1554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_406_in_moduleDecl1559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologPartOne_in_prolog1595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000040L});
    public static final BitSet FOLLOW_prologPartTwo_in_prolog1605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_defaultNamespaceDecl_in_prologPartOne1650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_setter_in_prologPartOne1654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_namespaceDecl_in_prologPartOne1658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_importDecl_in_prologPartOne1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_ftOptionDecl_in_prologPartOne1666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_406_in_prologPartOne1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotatedDecl_in_prologPartTwo1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_optionDecl_in_prologPartTwo1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_contextItemDecl_in_prologPartTwo1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_406_in_prologPartTwo1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_annotatedDecl1848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000FB00000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_annotation_in_annotatedDecl1850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000FB00000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_varDecl_in_annotatedDecl1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDecl_in_annotatedDecl1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_407_in_annotation1895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_eqName_in_annotation1897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_annotation1900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_literal_in_annotation1902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_annotation1905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_literal_in_annotation1907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_410_in_annotation1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boundarySpaceDecl_in_setter1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultCollationDecl_in_setter1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseURIDecl_in_setter1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructionDecl_in_setter1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderingModeDecl_in_setter1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyOrderDecl_in_setter1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copyNamespacesDecl_in_setter1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revalidationDecl_in_setter2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decimalFormatDecl_in_setter2052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaImport_in_importDecl2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleImport_in_importDecl2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_namespaceDecl2107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDecl2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_namespaceDecl2113 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SymEq_in_namespaceDecl2115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_namespaceDecl2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_boundarySpaceDecl2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_boundarySpaceDecl2162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_PRESERVE_in_boundarySpaceDecl2174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRIP_in_boundarySpaceDecl2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultNamespaceDecl2235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultNamespaceDecl2237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_ELEMENT_in_defaultNamespaceDecl2240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_FUNCTION_in_defaultNamespaceDecl2244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultNamespaceDecl2249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_defaultNamespaceDecl2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_optionDecl2310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_OPTION_in_optionDecl2312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_optionDecl2314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_optionDecl2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ftOptionDecl2402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FT_OPTION_in_ftOptionDecl2404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_USING_in_ftOptionDecl2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000004000L,0xE000000000000000L,0x00000000000000E7L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftOptionDecl2409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DECLARE_in_orderingModeDecl2427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ORDERING_in_orderingModeDecl2429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_ORDERED_in_orderingModeDecl2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_orderingModeDecl2464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_emptyOrderDecl2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DEFAULT_in_emptyOrderDecl2501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ORDER_in_emptyOrderDecl2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EMPTY_in_emptyOrderDecl2505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_GREATEST_in_emptyOrderDecl2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEAST_in_emptyOrderDecl2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_copyNamespacesDecl2573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl2575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000100L});
    public static final BitSet FOLLOW_preserveMode_in_copyNamespacesDecl2577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_copyNamespacesDecl2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000003000000000L});
    public static final BitSet FOLLOW_inheritMode_in_copyNamespacesDecl2581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_decimalFormatDecl2660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000400L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_decimalFormatDecl2664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_decimalFormatDecl2666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000007FE000000L});
    public static final BitSet FOLLOW_DEFAULT_in_decimalFormatDecl2672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_decimalFormatDecl2674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000007FE000000L});
    public static final BitSet FOLLOW_dfPropertyName_in_decimalFormatDecl2685 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SymEq_in_decimalFormatDecl2687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_decimalFormatDecl2689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000007FE000000L});
    public static final BitSet FOLLOW_set_in_dfPropertyName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_preserveMode2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_PRESERVE_in_preserveMode2860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_inheritMode2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_INHERIT_in_inheritMode2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultCollationDecl2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultCollationDecl2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLLATION_in_defaultCollationDecl2927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_defaultCollationDecl2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_baseURIDecl2957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_BASE_URI_in_baseURIDecl2959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_baseURIDecl2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_schemaImport2989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_schemaImport2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_schemaPrefix_in_schemaImport2993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport2998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_AT_in_schemaImport3009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport3013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_schemaImport3016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport3020 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix3057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_schemaPrefix3059 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SymEq_in_schemaPrefix3061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_schemaPrefix3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ELEMENT_in_schemaPrefix3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_moduleImport3107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_MODULE_in_moduleImport3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleImport3112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_moduleImport3114 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SymEq_in_moduleImport3116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport3124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_AT_in_moduleImport3133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport3137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_moduleImport3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport3144 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_varOrConst_in_varDecl3211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_varDecl3213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_varDecl3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varDecl3219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_declVarValue_in_varDecl3222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_412_in_declVarValue3257 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_declVarValue3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_declVarValue3272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_externalDefaultValue_in_declVarValue3274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_varOrConst3300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTANT_in_varOrConst3312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_412_in_externalDefaultValue3365 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_varDefaultValue_in_externalDefaultValue3367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_varValue3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_varDefaultValue3528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_constructionDecl3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_constructionDecl3546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_STRIP_in_constructionDecl3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_constructionDecl3580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xq3FunModifier_in_functionDecl3620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0003000000001000L});
    public static final BitSet FOLLOW_updateFunModifier_in_functionDecl3624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_scriptingFunModifier_in_functionDecl3628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl3633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_fqName_in_functionDecl3635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_functionDecl3637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_paramList_in_functionDecl3639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_functionDecl3642 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typeDeclaration_in_functionDecl3645 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enclosedExpr_in_functionDecl3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl3653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xq3FunModifier_in_functionDecl3750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEQUENTIAL_in_functionDecl3754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl3757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_fqName_in_functionDecl3759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_functionDecl3761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_paramList_in_functionDecl3763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_functionDecl3766 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typeDeclaration_in_functionDecl3769 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_functionDecl3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl3784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATING_in_updateFunModifier3805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_in_scriptingFunModifier3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DETERMINISTIC_in_xq3FunModifier3845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NONDETERMINISTIC_in_xq3FunModifier3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_paramList3873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_paramList3876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_param_in_paramList3878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_411_in_param3901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_param3905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typeDeclaration_in_param3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCurly_in_enclosedExpr3936 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_enclosedExpr3938 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_enclosedExpr3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_queryBody3984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_expr4069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002400000L});
    public static final BitSet FOLLOW_409_in_expr4084 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_406_in_expr4095 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_expr4119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002400000L});
    public static final BitSet FOLLOW_406_in_expr4129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flworExpr_in_exprSingle4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantifiedExpr_in_exprSingle4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeswitchExpr_in_exprSingle4197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpr_in_exprSingle4205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpr_in_exprSingle4213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertExpr_in_exprSingle4240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteExpr_in_exprSingle4289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_renameExpr_in_exprSingle4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_replaceExpr_in_exprSingle4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_transformExpr_in_exprSingle4435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockExpr_in_exprSingle4478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpr_in_exprSingle4522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exitExpr_in_exprSingle4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileExpr_in_exprSingle4606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryCatchExpr_in_exprSingle4638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initialClause_in_flworExpr4706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0110000000080000L,0x000000000000025CL});
    public static final BitSet FOLLOW_intermediateClause_in_flworExpr4708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0110000000080000L,0x000000000000025CL});
    public static final BitSet FOLLOW_returnClause_in_flworExpr4711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initialClause_in_flworExpr4753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0110000000080000L,0x000000000000025CL});
    public static final BitSet FOLLOW_whereClause_in_flworExpr4756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0110000000080000L,0x000000000000025CL});
    public static final BitSet FOLLOW_orderByClause_in_flworExpr4759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0110000000080000L,0x000000000000025CL});
    public static final BitSet FOLLOW_returnClause_in_flworExpr4762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forClause_in_initialClause4868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letClause_in_initialClause4876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowClause_in_initialClause4888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initialClause_in_intermediateClause4952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_intermediateClause4960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupByClause_in_intermediateClause4968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderByClause_in_intermediateClause4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_countClause_in_intermediateClause4984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forClause5010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_forClauseItem_in_forClause5012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_forClause5015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_forClauseItem_in_forClause5017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_411_in_forClauseItem5051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_inBinding_in_forClauseItem5053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IN_in_forClauseItem5057 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_forClauseItem5059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedVarBinding_in_inBinding5081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00C0040000000000L});
    public static final BitSet FOLLOW_allowingEmpty_in_inBinding5083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080040000000000L});
    public static final BitSet FOLLOW_positionalVar_in_inBinding5086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ftScoreVar_in_inBinding5089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varName_in_typedVarBinding5104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typeDeclaration_in_typedVarBinding5106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALLOWING_in_allowingEmpty5192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EMPTY_in_allowingEmpty5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_positionalVar5225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_positionalVar5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_positionalVar5231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_ftScoreVar5325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_ftScoreVar5327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_ftScoreVar5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause5356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_letClauseItem_in_letClause5358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_letClause5361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_letClauseItem_in_letClause5363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_LET_in_letClause5451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SCORE_in_letClause5453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_letClause5455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_letClause5457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_letClause5459 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_letClause5461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_letClause5470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_letClause5473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_letClause5475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_letClause5477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ftScoreVar_in_letClause5483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_letClause5486 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_letClause5488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_411_in_letClauseItem5511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_typedVarBinding_in_letClauseItem5513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_letClauseItem5515 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_letClauseItem5517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_letClauseItemFT5542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_typedVarBinding_in_letClauseItemFT5544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ftScoreVar_in_letClauseItemFT5556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_letClauseItemFT5572 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_letClauseItemFT5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_windowClause5662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0A00000000000000L});
    public static final BitSet FOLLOW_tumblingWindowClause_in_windowClause5665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slidingWindowClause_in_windowClause5669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUMBLING_in_tumblingWindowClause5737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_WINDOW_in_tumblingWindowClause5739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_tumblingWindowClause5741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_tumblingWindowClause5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typeDeclaration_in_tumblingWindowClause5745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IN_in_tumblingWindowClause5748 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_tumblingWindowClause5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_windowStartCondition_in_tumblingWindowClause5759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_windowEndCondition_in_tumblingWindowClause5761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLIDING_in_slidingWindowClause5830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_WINDOW_in_slidingWindowClause5832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_slidingWindowClause5835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_slidingWindowClause5837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typeDeclaration_in_slidingWindowClause5839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IN_in_slidingWindowClause5842 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_slidingWindowClause5844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_windowStartCondition_in_slidingWindowClause5853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_windowEndCondition_in_slidingWindowClause5855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_windowStartCondition5917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000040000000000L,0x0000000000000003L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_windowVars_in_windowStartCondition5919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_WHEN_in_windowStartCondition5921 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_windowStartCondition5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ONLY_in_windowEndCondition5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_END_in_windowEndCondition5990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000040000000000L,0x0000000000000003L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_windowVars_in_windowEndCondition5992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_WHEN_in_windowEndCondition5994 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_windowEndCondition5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_windowVars6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_currentItem_in_windowVars6071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_positionalVar_in_windowVars6075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_PREVIOUS_in_windowVars6086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_windowVars6088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_previousItem_in_windowVars6090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NEXT_in_windowVars6095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_windowVars6097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_nextItem_in_windowVars6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_currentItem6172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_previousItem6242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nextItem6316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_countClause6387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_countClause6389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_countClause6393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereClause6418 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_whereClause6420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_groupByClause6501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_BY_in_groupByClause6503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_groupingSpecList_in_groupByClause6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupingSpec_in_groupingSpecList6579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_groupingSpecList6582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_groupingSpec_in_groupingSpecList6584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_411_in_groupingSpec6665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_groupingSpec6669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLLATION_in_groupingSpec6672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_groupingSpec6674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause6719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_BY_in_orderByClause6721 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_STABLE_in_orderByClause6738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause6740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_BY_in_orderByClause6742 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_orderSpecList_in_orderByClause6761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList6791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_orderSpecList6794 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList6796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_exprSingle_in_orderSpec6833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000100000L,0x0000000000000180L});
    public static final BitSet FOLLOW_orderModifier_in_orderSpec6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_orderModifier6869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000100000L});
    public static final BitSet FOLLOW_DESCENDING_in_orderModifier6873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000100000L});
    public static final BitSet FOLLOW_EMPTY_in_orderModifier6884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_GREATEST_in_orderModifier6887 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LEAST_in_orderModifier6891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLLATION_in_orderModifier6903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_orderModifier6905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_returnClause7028 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_returnClause7030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_quantifiedExpr7082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_quantifiedVarBinding_in_quantifiedExpr7091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_quantifiedExpr7094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_quantifiedVarBinding_in_quantifiedExpr7096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_SATISFIES_in_quantifiedExpr7112 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExpr7114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_in_quantifiedExpr7140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_quantifiedVarBinding_in_quantifiedExpr7149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_quantifiedExpr7152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_quantifiedVarBinding_in_quantifiedExpr7154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_SATISFIES_in_quantifiedExpr7170 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExpr7172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_quantifiedVarBinding7216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_typedVarBinding_in_quantifiedVarBinding7218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IN_in_quantifiedVarBinding7220 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedVarBinding7222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_typeswitchExpr7253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_typeswitchExpr7255 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_typeswitchExpr7257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_typeswitchExpr7259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_caseClause_in_typeswitchExpr7268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_defaultCase_in_typeswitchExpr7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseClause7328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_caseVarBinding_in_caseClause7330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_sequenceType_in_caseClause7333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RETURN_in_caseClause7335 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_caseClause7337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_caseVarBinding7376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_caseVarBinding7380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_caseVarBinding7382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultCase7416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_defaultVarBinding_in_defaultCase7418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RETURN_in_defaultCase7421 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_defaultCase7423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_defaultVarBinding7455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_defaultVarBinding7459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifExpr7484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_ifExpr7486 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_ifExpr7488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_ifExpr7490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_THEN_in_ifExpr7492 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr7496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ELSE_in_ifExpr7498 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr7502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpr_in_orExpr7557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OR_in_orExpr7570 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_andExpr_in_orExpr7574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr7610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_AND_in_andExpr7623 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr7627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr7742 = new BitSet(new long[]{0x0000000000000432L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000003F800000000L,0x0000000000000000L,0x0000003E00000000L});
    public static final BitSet FOLLOW_comparisonOperator_in_comparisonExpr7764 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr7768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valueComp_in_comparisonOperator7813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generalComp_in_comparisonOperator7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nodeComp_in_comparisonOperator7821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeExpr_in_ftContainsExpr7895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ftContainsClause_in_ftContainsExpr7897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_ftContainsClause7924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_TEXT_in_ftContainsClause7926 = new BitSet(new long[]{0x0000004000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftContainsClause7928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ftIgnoreOption_in_ftContainsClause7930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr7954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TO_in_rangeExpr7967 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr7971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr8007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_additiveExprOperator_in_additiveExpr8029 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr8039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_413_in_additiveExprOperator8086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_414_in_additiveExprOperator8094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr8117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_multiplicativeExprOperator_in_multiplicativeExpr8139 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr8149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_415_in_multiplicativeExprOperator8199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExprOperator8215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDIV_in_multiplicativeExprOperator8270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExprOperator8330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr8397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_UNION_in_unionExpr8418 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_416_in_unionExpr8422 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr8427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr8475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_intersectExceptExprOperator_in_intersectExceptExpr8497 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr8507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_INTERSECT_in_intersectExceptExprOperator8552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPT_in_intersectExceptExprOperator8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_treatExpr_in_instanceofExpr8585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_INSTANCE_in_instanceofExpr8598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_OF_in_instanceofExpr8600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_sequenceType_in_instanceofExpr8604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castableExpr_in_treatExpr8644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_TREAT_in_treatExpr8657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_treatExpr8659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_sequenceType_in_treatExpr8663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_castableExpr8703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASTABLE_in_castableExpr8716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_castableExpr8718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_singleType_in_castableExpr8722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpr_in_castExpr8758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_CAST_in_castExpr8771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_castExpr8773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_singleType_in_castExpr8777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_413_in_unaryExpr8843 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_414_in_unaryExpr8845 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_valueExpr_in_unaryExpr8851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valueExpr_in_unaryExpr8958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_validateExpr_in_valueExpr8986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathExpr_in_valueExpr8994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extensionExpr_in_valueExpr9002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SymEq_in_generalComp9023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_417_in_generalComp9037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAngle_in_generalComp9051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_418_in_generalComp9064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAngle_in_generalComp9078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_419_in_generalComp9091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_valueComp9122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_valueComp9136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_valueComp9149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_valueComp9162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_valueComp9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_valueComp9188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_nodeComp9213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_420_in_nodeComp9227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_421_in_nodeComp9240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_validateExpr9265 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_validationMode_in_validateExpr9267 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_validateExpr9270 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_validateExpr9272 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_validateExpr9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_validationMode9299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_validationMode9306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pragma_in_extensionExpr9327 = new BitSet(new long[]{0x0000004000000040L});
    public static final BitSet FOLLOW_LCurly_in_extensionExpr9331 = new BitSet(new long[]{0x0000004000000090L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_extensionExpr9333 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_extensionExpr9336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_422_in_pathExpr9426 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C089003FFFL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr9431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_423_in_pathExpr9447 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C089003FFFL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr9452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_422_in_pathExpr9482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_415_in_pathExpr9485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_422_in_pathExpr9493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr9556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_422_in_relativePathExpr9580 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C089003FFFL});
    public static final BitSet FOLLOW_423_in_relativePathExpr9593 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C089003FFFL});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr9613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr9675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filterExpr_in_stepExpr9679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardStep_in_axisStep9701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_reverseStep_in_axisStep9705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_predicateList_in_axisStep9708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardAxis_in_forwardStep9780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000020080003FFFL});
    public static final BitSet FOLLOW_nodeTest_in_forwardStep9782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevForwardStep_in_forwardStep9802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_forwardAxis9828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_forwardAxis9839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_forwardAxis9850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_forwardAxis9861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_forwardAxis9872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_forwardAxis9883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_forwardAxis9894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_forwardAxis9896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_425_in_abbrevForwardStep9925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000020080003FFFL});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep9927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_abbrevForwardStep9960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseAxis_in_reverseStep10011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000020080003FFFL});
    public static final BitSet FOLLOW_nodeTest_in_reverseStep10013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevReverseStep_in_reverseStep10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_reverseAxis10059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_reverseAxis10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_reverseAxis10070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_reverseAxis10072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_reverseAxis10081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_reverseAxis10083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_reverseAxis10092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_reverseAxis10094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_reverseAxis10103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_424_in_reverseAxis10105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_426_in_abbrevReverseStep10127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_nodeTest10162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_nodeTest10174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nameTest10203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wildcard_in_nameTest10211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_415_in_wildcard10289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncName_in_wildcard10301 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_Colon_in_wildcard10303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_415_in_wildcard10307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_415_in_wildcard10328 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_Colon_in_wildcard10333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_wildcard10337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpr_in_filterExpr10370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_predicate_in_filterExpr10374 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_predicate_in_predicateList10488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_427_in_predicate10519 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_predicate10521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_428_in_predicate10523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpr10558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varRef_in_primaryExpr10566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpr_in_primaryExpr10574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextItemExpr_in_primaryExpr10582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_primaryExpr10591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderedExpr_in_primaryExpr10599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unorderedExpr_in_primaryExpr10607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_primaryExpr10615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_literal10636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_literal10654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IntegerLiteral_in_numericLiteral10685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_numericLiteral10702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DoubleLiteral_in_numericLiteral10719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuotedStringLiteral_in_stringLiteral10749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AposedStringLiteral_in_stringLiteral10766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_varRef10797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_varRef10801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_varName10830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_408_in_parenthesizedExpr10851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_parenthesizedExpr10853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_408_in_parenthesizedExpr10868 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_parenthesizedExpr10870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_parenthesizedExpr10872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_429_in_contextItemExpr10897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_orderedExpr10922 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_orderedExpr10924 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_orderedExpr10926 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_orderedExpr10928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_unorderedExpr10961 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_unorderedExpr10963 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_unorderedExpr10965 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_unorderedExpr10967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fqName_in_functionCall11026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_functionCall11028 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0ED003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_functionCall11031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_functionCall11034 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_functionCall11036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_410_in_functionCall11047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_constructor11088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_computedConstructor_in_constructor11096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAngle_in_dirElemConstructor11161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor11177 = new BitSet(new long[]{0x0000000000000220L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_dirAttributeList_in_dirElemConstructor11192 = new BitSet(new long[]{0x0000000000000220L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_S_in_dirElemConstructor11195 = new BitSet(new long[]{0x0000000000000220L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RClose_in_dirElemConstructor11214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAngle_in_dirElemConstructor11241 = new BitSet(new long[]{0x00000000000D0150L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_dirElemContent_in_dirElemConstructor11254 = new BitSet(new long[]{0x00000000000D0150L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_LClose_in_dirElemConstructor11266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor11279 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_S_in_dirElemConstructor11292 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RAngle_in_dirElemConstructor11304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemConstructor_in_directConstructor11400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DirCommentConstructor_in_directConstructor11411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DirPIConstructor_in_directConstructor11434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_in_dirAttributeList11474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x41FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_dirAttribute_in_dirAttributeList11477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_qName_in_dirAttribute11494 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_S_in_dirAttribute11496 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SymEq_in_dirAttribute11499 = new BitSet(new long[]{0x0000000000003000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_S_in_dirAttribute11501 = new BitSet(new long[]{0x0000000000003000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_dirAttributeValue_in_dirAttribute11506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Quot_in_dirAttributeValue11591 = new BitSet(new long[]{0x0000000000195040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_quotAttrValue_in_dirAttributeValue11593 = new BitSet(new long[]{0x0000000000195040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_Quot_in_dirAttributeValue11596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Apos_in_dirAttributeValue11609 = new BitSet(new long[]{0x000000000029A040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_aposAttrValue_in_dirAttributeValue11611 = new BitSet(new long[]{0x000000000029A040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_Apos_in_dirAttributeValue11614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EscapeQuot_in_quotAttrValue11650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quotAttrValueContent_in_quotAttrValue11667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EscapeApos_in_aposAttrValue11698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aposAttrValueContent_in_aposAttrValue11715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuotAttrContentChar_in_quotAttrValueContent11742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commonContent_in_quotAttrValueContent11758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AposAttrContentChar_in_aposAttrValueContent11781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commonContent_in_aposAttrValueContent11797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemContentSingle_in_dirElemContent11817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_dirElemContentSingle11847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CDataSection_in_dirElemContentSingle11857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commonContent_in_dirElemContentSingle11871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ElementContentChar_in_dirElemContentSingle11878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PredefinedEntityRef_in_commonContent11909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharRef_in_commonContent11928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EscapeLCurly_in_commonContent11950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EscapeRCurly_in_commonContent11970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirEnclosedExpr_in_commonContent11988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCurly_in_dirEnclosedExpr12009 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_dirEnclosedExpr12013 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_dirEnclosedExpr12017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compDocConstructor_in_computedConstructor12057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compElemConstructor_in_computedConstructor12065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compAttrConstructor_in_computedConstructor12073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compTextConstructor_in_computedConstructor12081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compCommentConstructor_in_computedConstructor12089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compPIConstructor_in_computedConstructor12097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compNamespaceConstructor_in_computedConstructor12109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_compDocConstructor12138 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compDocConstructor12140 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compDocConstructor12142 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compDocConstructor12144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_compElemConstructor12181 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_compElemConstructor12198 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compElemConstructor12218 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compElemConstructor12220 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compElemConstructor12222 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compElemConstructor12242 = new BitSet(new long[]{0x0000004000000090L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_contentExpr_in_compElemConstructor12244 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compElemConstructor12247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_contentExpr12291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_compAttrConstructor12316 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_compAttrConstructor12333 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compAttrConstructor12353 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor12355 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compAttrConstructor12357 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compAttrConstructor12376 = new BitSet(new long[]{0x0000004000000090L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_contentExpr_in_compAttrConstructor12378 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compAttrConstructor12381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_compTextConstructor12422 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compTextConstructor12424 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compTextConstructor12426 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compTextConstructor12428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_compCommentConstructor12461 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compCommentConstructor12463 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compCommentConstructor12465 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compCommentConstructor12467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor12500 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_compPIConstructor12517 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compPIConstructor12537 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compPIConstructor12539 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compPIConstructor12541 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compPIConstructor12560 = new BitSet(new long[]{0x0000004000000090L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_compPIConstructor12564 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compPIConstructor12567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_singleType12612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_430_in_singleType12614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_typeDeclaration12636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_sequenceType_in_typeDeclaration12638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_sequenceType12672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_sequenceType12674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_sequenceType12676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType12696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00004000A0000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_sequenceType12705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_430_in_occurrenceIndicator12775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_415_in_occurrenceIndicator12787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_413_in_occurrenceIndicator12799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_itemType12824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_itemType12833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_itemType12835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_itemType12837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_itemType12850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_atomicType12879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_documentTest_in_kindTest12900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementTest_in_kindTest12908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeTest_in_kindTest12916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaElementTest_in_kindTest12924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaAttributeTest_in_kindTest12932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_piTest_in_kindTest12940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commentTest_in_kindTest12948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textTest_in_kindTest12956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anyKindTest_in_kindTest12964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceNodeTest_in_kindTest12976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANYKIND_in_anyKindTest13006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_documentTest13030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_documentTest13032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000001000L,0x0000000004000000L});
    public static final BitSet FOLLOW_elementTest_in_documentTest13035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_schemaElementTest_in_documentTest13039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_documentTest13043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textTest13075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_textTest13077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_textTest13079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_commentTest13103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_commentTest13105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_commentTest13107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_piTest13137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_piTest13139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000004003FFFL});
    public static final BitSet FOLLOW_ncName_in_piTest13142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_stringLiteral_in_piTest13146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_piTest13150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attributeTest13182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_attributeTest13184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000084003FFFL});
    public static final BitSet FOLLOW_attribNameOrWildcard_in_attributeTest13187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_attributeTest13190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_typeName_in_attributeTest13192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_attributeTest13198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attribNameOrWildcard13230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_415_in_attribNameOrWildcard13238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_schemaAttributeTest13254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_schemaAttributeTest13256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_attributeDeclaration_in_schemaAttributeTest13258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_schemaAttributeTest13260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attributeDeclaration13276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_elementTest13292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_elementTest13294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000084003FFFL});
    public static final BitSet FOLLOW_elementNameOrWildcard_in_elementTest13297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_elementTest13300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_typeName_in_elementTest13302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400004000000L});
    public static final BitSet FOLLOW_430_in_elementTest13304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_elementTest13311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementNameOrWildcard13351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_415_in_elementNameOrWildcard13359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_schemaElementTest13380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_schemaElementTest13382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_elementDeclaration_in_schemaElementTest13384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_schemaElementTest13386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementDeclaration13430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_attributeName13446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_elementName13462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_typeName13478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_uriLiteral13494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_revalidationDecl13518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_REVALIDATION_in_revalidationDecl13520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_revalidationDecl13522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_insertExprTargetChoice13548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_FIRST_in_insertExprTargetChoice13551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_insertExprTargetChoice13558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_INTO_in_insertExprTargetChoice13565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_insertExprTargetChoice13573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_insertExprTargetChoice13585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_insertExprTargetChoice13597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertExpr13617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_NODE_in_insertExpr13620 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_NODES_in_insertExpr13624 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_sourceExpr_in_insertExpr13627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x00000000000E0000L});
    public static final BitSet FOLLOW_insertExprTargetChoice_in_insertExpr13629 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_targetExpr_in_insertExpr13631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteExpr13659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_NODE_in_deleteExpr13662 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_NODES_in_deleteExpr13666 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_targetExpr_in_deleteExpr13669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_replaceExpr13693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004200000L});
    public static final BitSet FOLLOW_replaceTargetChoice_in_replaceExpr13695 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_targetExpr_in_replaceExpr13697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_WITH_in_replaceExpr13699 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_replaceExpr13701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_in_replaceTargetChoice13726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_OF_in_replaceTargetChoice13728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_NODE_in_replaceTargetChoice13730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_replaceTargetChoice13739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_renameExpr13761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_NODE_in_renameExpr13763 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_targetExpr_in_renameExpr13765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_renameExpr13767 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_newNameExpr_in_renameExpr13769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_sourceExpr13795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_targetExpr13811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_newNameExpr13827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_transformExpr13851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_copyBinding_in_transformExpr13853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_transformExpr13856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_copyBinding_in_transformExpr13858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_MODIFY_in_transformExpr13866 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_transformExpr13868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RETURN_in_transformExpr13874 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_transformExpr13876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_untypedVarBinding_in_copyBinding13933 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_copyBinding13935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_untypedVarBinding13966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_untypedVarBinding13970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_untypedVarBinding13972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_assignmentExpr14001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_assignmentExpr14003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_assignmentExpr14005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_assignmentExpr14007 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_assignmentExpr14009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLOCK_in_blockExpr14025 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_block_in_blockExpr14027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCurly_in_block14043 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_blockDecls_in_block14045 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_blockBody_in_block14047 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_block14049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockVarDecl_in_blockDecls14066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_406_in_blockDecls14068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DECLARE_in_blockVarDecl14086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_blockVarDecl14088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_blockVarDecl14090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockVarDecl14092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_412_in_blockVarDecl14096 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_blockVarDecl14098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_409_in_blockVarDecl14113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_411_in_blockVarDecl14115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_blockVarDecl14117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockVarDecl14119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_412_in_blockVarDecl14123 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_blockVarDecl14125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_expr_in_blockBody14146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_exitExpr14162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RETURNING_in_exitExpr14164 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_exitExpr14166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_whileExpr14182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_whileExpr14184 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_exprSingle_in_whileExpr14186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_whileExpr14188 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_whileBody_in_whileExpr14190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_whileBody14206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOr_in_ftSelection14226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400040000020000L,0x0000000000000000L,0x0264000000000000L});
    public static final BitSet FOLLOW_ftPosFilter_in_ftSelection14228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400040000020000L,0x0000000000000000L,0x0264000000000000L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr14245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_FTOR_in_ftOr14248 = new BitSet(new long[]{0x0000004000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr14250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd14268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_FTAND_in_ftAnd14271 = new BitSet(new long[]{0x0000004000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd14273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot14291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_NOT_in_ftMildNot14294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IN_in_ftMildNot14296 = new BitSet(new long[]{0x0000004000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot14298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_FTNOT_in_ftUnaryNot14316 = new BitSet(new long[]{0x0000004000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot14319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftPrimary_in_ftPrimaryWithOptions14335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_USING_in_ftPrimaryWithOptions14338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000004000L,0xE000000000000000L,0x00000000000000E7L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftPrimaryWithOptions14340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ftWeight_in_ftPrimaryWithOptions14344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEIGHT_in_ftWeight14361 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_rangeExpr_in_ftWeight14363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWords_in_ftPrimary14379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_ftTimes_in_ftPrimary14381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_408_in_ftPrimary14390 = new BitSet(new long[]{0x0000004000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftPrimary14392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_ftPrimary14394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionSelection_in_ftPrimary14402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWordsValue_in_ftWords14418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000150000000000L});
    public static final BitSet FOLLOW_ftAnyAllOption_in_ftWords14420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_ftWordsValue14437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCurly_in_ftWordsValue14445 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_ftWordsValue14447 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_ftWordsValue14449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pragma_in_ftExtensionSelection14468 = new BitSet(new long[]{0x0000004000000040L});
    public static final BitSet FOLLOW_LCurly_in_ftExtensionSelection14472 = new BitSet(new long[]{0x00000040000000C0L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L,0x0000004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftExtensionSelection14474 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_ftExtensionSelection14477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_ftAnyAllOption14502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_WORD_in_ftAnyAllOption14504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_ftAnyAllOption14513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_WORDS_in_ftAnyAllOption14515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_ftAnyAllOption14524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_ftTimes14540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_ftRange_in_ftTimes14542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_TIMES_in_ftTimes14544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_ftRange14560 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange14563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange14571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LEAST_in_ftRange14573 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange14575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange14583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_MOST_in_ftRange14585 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange14588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_ftRange14596 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange14602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TO_in_ftRange14604 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange14606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOrder_in_ftPosFilter14622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWindow_in_ftPosFilter14630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDistance_in_ftPosFilter14638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftScope_in_ftPosFilter14646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftContent_in_ftPosFilter14654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_ftOrder14670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_ftWindow14686 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_additiveExpr_in_ftWindow14688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018080000000000L});
    public static final BitSet FOLLOW_ftUnit_in_ftWindow14690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_ftDistance14706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_ftRange_in_ftDistance14708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018080000000000L});
    public static final BitSet FOLLOW_ftUnit_in_ftDistance14710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftScope14758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_ftBigUnit_in_ftScope14766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftBigUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent14806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_START_in_ftContent14808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent14816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_END_in_ftContent14818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_ftContent14826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_CONTENT_in_ftContent14828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftLanguageOption_in_ftMatchOption14848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWildCardOption_in_ftMatchOption14856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftThesaurusOption_in_ftMatchOption14864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStemOption_in_ftMatchOption14872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftCaseOption_in_ftMatchOption14880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDiacriticsOption_in_ftMatchOption14888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStopWordOption_in_ftMatchOption14896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionOption_in_ftMatchOption14904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption14920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftCaseOption14922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption14930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftCaseOption14932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_ftCaseOption14940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_ftCaseOption14948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption14964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftDiacriticsOption14966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption14974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftDiacriticsOption14976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption14995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_in_ftStemOption15003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption15005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption15024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000400L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption15031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption15035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption15048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_ftThesaurusOption15050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000400L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption15053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption15057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_ftThesaurusOption15061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption15063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_410_in_ftThesaurusOption15067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_in_ftThesaurusOption15075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption15077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftThesaurusID15093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_ftThesaurusID15095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0002800000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_ftThesaurusID15098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_ftThesaurusID15100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_ftRange_in_ftThesaurusID15105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LEVELS_in_ftThesaurusID15107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_ftStopWordOption15130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopWordOption15132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftStopWords_in_ftStopWordOption15134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000028000000L});
    public static final BitSet FOLLOW_ftStopWordsInclExcl_in_ftStopWordOption15136 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000028000000L});
    public static final BitSet FOLLOW_NO_in_ftStopWordOption15145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STOP_in_ftStopWordOption15149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopWordOption15151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_ftStopWordOption15159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopWordOption15161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DEFAULT_in_ftStopWordOption15163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000028000000L});
    public static final BitSet FOLLOW_ftStopWordsInclExcl_in_ftStopWordOption15165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000028000000L});
    public static final BitSet FOLLOW_AT_in_ftStopWords15182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x3FFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_uriLiteral_in_ftStopWords15184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_408_in_ftStopWords15192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_ftStopWords15194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_ftStopWords15197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_ftStopWords15199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_410_in_ftStopWords15203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftStopWordsInclExcl15219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftStopWords_in_ftStopWordsInclExcl15227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_ftLanguageOption15243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_ftLanguageOption15245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption15264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_in_ftWildCardOption15272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption15274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_ftExtensionOption15290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_qName_in_ftExtensionOption15292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3E00000000000000L});
    public static final BitSet FOLLOW_stringLiteral_in_ftExtensionOption15294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftIgnoreOption15310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_CONTENT_in_ftIgnoreOption15312 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_unionExpr_in_ftIgnoreOption15314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_contextItemDecl15344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONTEXT_in_contextItemDecl15346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ITEM_in_contextItemDecl15348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_AS_in_contextItemDecl15351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000000008003FFFL});
    public static final BitSet FOLLOW_itemType_in_contextItemDecl15353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_contextItemDecl15366 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_varValue_in_contextItemDecl15368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_contextItemDecl15374 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_412_in_contextItemDecl15377 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_varDefaultValue_in_contextItemDecl15379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryClause_in_tryCatchExpr15399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_catchClause_in_tryCatchExpr15401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_TRY_in_tryClause15429 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_tryClause15431 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_tryTargetExpr_in_tryClause15433 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_tryClause15435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_tryTargetExpr15459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause15475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000020080003FFFL});
    public static final BitSet FOLLOW_catchErrorList_in_catchClause15477 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_catchVars_in_catchClause15479 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_catchClause15482 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_expr_in_catchClause15484 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_catchClause15486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_catchErrorList15517 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_416_in_catchErrorList15520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF0L,0x0000020080003FFFL});
    public static final BitSet FOLLOW_nameTest_in_catchErrorList15522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_408_in_catchVars15549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_catchErrorCode_in_catchVars15551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_catchVars15554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_catchErrorDesc_in_catchVars15556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_409_in_catchVars15559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_catchErrorVal_in_catchVars15561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_catchVars15567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_catchErrorCode15601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_catchErrorCode15603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_catchErrorDesc15619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_catchErrorDesc15621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_411_in_catchErrorVal15637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_varName_in_catchErrorVal15639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_compNamespaceConstructor15655 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_prefix_in_compNamespaceConstructor15658 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compNamespaceConstructor15663 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_prefixExpr_in_compNamespaceConstructor15665 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compNamespaceConstructor15667 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LCurly_in_compNamespaceConstructor15671 = new BitSet(new long[]{0x0000004000000090L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_uriExpr_in_compNamespaceConstructor15673 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RCurly_in_compNamespaceConstructor15676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncName_in_prefix15692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_prefixExpr15708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_uriExpr15724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_namespaceNodeTest15740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_namespaceNodeTest15742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_410_in_namespaceNodeTest15744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncName_in_qName15766 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_Colon_in_qName15787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_qName15793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_eqName15844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_uriLiteral_in_eqName15849 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_Colon_in_eqName15851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_eqName15853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncName_in_fqName15876 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_Colon_in_fqName15879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0x01FFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFDF0L,0x0000000000003FFFL});
    public static final BitSet FOLLOW_ncName_in_fqName15883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fncName_in_fqName15898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fncName_in_ncName15919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_ncName15932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_ncName15940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_ncName15948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_ncName15956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_ncName15964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ncName15972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_ncName15980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_ncName15988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_ncName15996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_ncName16004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_ncName16012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_ncName16020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_ncName16028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_ncName16046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_ncName16109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_fncName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred1_XQuery8819 = new BitSet(new long[]{0x0000004000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C0E9003FFFL});
    public static final BitSet FOLLOW_valueExpr_in_synpred1_XQuery8826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_422_in_synpred2_XQuery9419 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C089003FFFL});
    public static final BitSet FOLLOW_relativePathExpr_in_synpred2_XQuery9421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_423_in_synpred3_XQuery9440 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0xFFFFFFFFFFFFFFFEL,0xBFFFFFFFFFFFFFFFL,0xFFFFFFE7FFFFFFF1L,0x000026C089003FFFL});
    public static final BitSet FOLLOW_relativePathExpr_in_synpred3_XQuery9442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_422_in_synpred4_XQuery9461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_415_in_synpred4_XQuery9470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_425_in_synpred5_XQuery9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred6_XQuery9947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_408_in_synpred6_XQuery9955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_synpred7_XQuery12700 = new BitSet(new long[]{0x0000000000000002L});

}